<?php

/**
 * Docexa Doctor Micro Service API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: satish.soni@globalspace.in
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

namespace App\Http\Controllers;


use Illuminate\Http\Response;
use App\Speciality;
use Illuminate\Http\Request;
use DB;
use Log;

class SpecialityApi extends Controller
{

    /**
     * Constructor
     */
    public function __construct()
    {
    }
    /**
     * @OA\Get(
     * path="/establishments/users/{esteblishmentUserMapID}/specialization",
     * tags={"Specialization"},
     *    
     * @OA\Parameter(
     *         name="esteblishmentUserMapID",
     *         in="path",
     *         description="esteblishmentUserMapID",
     *         required=true,
     *         example=6257,
     *         @OA\Schema(type="number")
     *     ),
     * @OA\Response(
     *         response="200",
     *         description="specialization detail master data",
     *    @OA\JsonContent(
     *       @OA\Property(property="success", type="string", example="success")
     *        )
     *     ),
     * @OA\Response(
     *         response="400",
     *         description="Error: Bad request. required parameters is not supplied.",    
     *    @OA\JsonContent(
     *       @OA\Property(property="error", type="string", example="esteblishment User Map ID not found")
     *        )
     *     ),
     * )
     */
    public function specialitydetails($esteblishmentUserMapID)
    {

        if (!isset($esteblishmentUserMapID)) {
            return response()->json(['status' => 'fail', 'msg' => 'esteblishment User Map ID not found'], 400);
        }
        $data = Speciality::join('docexa_doctor_speciality_relation', 'docexa_doctor_speciality_relation.speciality_id', 'docexa_speciality_master.speciality_id')
            ->select('docexa_speciality_master.*')
            ->where('docexa_doctor_speciality_relation.user_map_id', $esteblishmentUserMapID)->get();
        // return $data;
        return response()->json(['status' => 'success', 'data' => $data], 200);
    }
    /**
     * @OA\Put(
     * path="/establishments/users/{esteblishmentUserMapID}/specialization",
     * tags={"Specialization","Doctor Registration APIs"},
     *    
     * @OA\Parameter(
     *         name="esteblishmentUserMapID",
     *         in="path",
     *         description="esteblishmentUserMapID",
     *         required=true,
     *         example=6257,
     *         @OA\Schema(type="number")
     *     ),
     *@OA\RequestBody(
     *  required=true,
     *  description="",
     *  @OA\JsonContent(
     *       @OA\Property(property="ids", type="array", @OA\Items(type="integer"))
     *  ),
     * ),
     * @OA\Response(
     *         response="200",
     *         description="specialization detail update data",
     *    @OA\JsonContent(
     *       @OA\Property(property="success", type="string", example="success")
     *        )
     *     ),
     * @OA\Response(
     *         response="400",
     *         description="Error: Bad request. required parameters is not supplied.",    
     *    @OA\JsonContent(
     *       @OA\Property(property="error", type="string", example="esteblishment User Map ID not found")
     *        )
     *     ),
     * )
     */
    public function updatespeciality($esteblishmentUserMapID, Request $request)
    {

        if (!isset($esteblishmentUserMapID)) {
            return response()->json(['status' => 'fail', 'msg' => 'esteblishment User Map ID not found'], 400);
        }

        $req = $request->input();
        $this->updatespecialities($esteblishmentUserMapID,$req['ids']);
        
        $data = Speciality::join('docexa_doctor_speciality_relation', 'docexa_doctor_speciality_relation.speciality_id', 'docexa_speciality_master.speciality_id')
            ->select('docexa_speciality_master.*')
            ->where('docexa_doctor_speciality_relation.user_map_id', $esteblishmentUserMapID)->get();
        //  return $data;
        return response()->json(['status' => 'success', 'data' => $data], 200);
    }
    public function updatespecialities($esteblishmentUserMapID,$data)
    {
        $test = DB::table('docexa_doctor_speciality_relation')
            ->where('docexa_doctor_speciality_relation.user_map_id', $esteblishmentUserMapID)->delete();
        foreach ($data as $r) {
            $array[] = [
                'user_map_id' => $esteblishmentUserMapID,
                'speciality_id' => $r
            ];
        }
        Log::info($test);
        Log::info($array);
        Log::info($data);
        DB::table('docexa_doctor_speciality_relation')->insert($array);
    }
}
