<?php

/**
 * Docexa Doctor Micro Service API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: satish.soni@globalspace.in
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

namespace App\Http\Controllers;

use Illuminate\Http\Response;
use Illuminate\Http\Request;
use App\Permission;
use App\PermissionTable;
use App\Roles;
use DB;
use Log;
use URL;
use Symfony\Component\HttpKernel\Exception\HttpException;
use Illuminate\Support\Facades\Http;

class PermissionApi extends Controller
{

    /**
     * Constructor
     */
    public function __construct()
    {
    }
    /**
     * @OA\Get(
     * path="/establishments/users/{esteblishmentusermapID}/permission/{roleID}",
     * summary="get permission data",
     * description="",
     * operationId="getpermission",
     * tags={"Permission"},
     * @OA\Parameter(
     *         name="esteblishmentusermapID",
     *         in="path",
     *         description="esteblishmentusermapID",
     *         required=true,
     *         example=68179,
     *         @OA\Schema(type="number")
     *     ),
     *  @OA\Parameter(
     *         name="roleID",
     *         in="path",
     *         description="roleID",
     *         required=true,
     *         example=1,
     *         @OA\Schema(type="number")
     *     ),
     * @OA\Response(
     *         response="200",
     *         description="Returns doctors data",
     * ),
     * @OA\Response(
     *    response=400,
     *    description="information not found response" 
     * )
     * )
     */
    public function getpermission($esteblishmentusermapID,$roleID)
    {

        try {
            $data = Permission::where(array('roleID'=>$roleID))->get();
            return response()->json(['status' => "success", 'permission' => $data], 200);
        } catch (\Exception $e) {
            throw new HttpException(500, $e->getMessage());
        }
    }

    /**
     * @OA\Put(
     * path="/establishments/users/{esteblishmentusermapID}/permission/{roleID}",
     * summary="edit permission data",
     * description="",
     * operationId="updatepermission",
     * tags={"Permission"},
     * @OA\Parameter(
     *         name="esteblishmentusermapID",
     *         in="path",
     *         description="esteblishmentusermapID",
     *         required=true,
     *         example=68179,
     *         @OA\Schema(type="number")
     *     ),
     * @OA\Parameter(
     *         name="roleID",
     *         in="path",
     *         description="roleID",
     *         required=true,
     *         example=1,
     *         @OA\Schema(type="number")
     *     ),
     * @OA\RequestBody(
     *  required=true,
     *  description="Pass clinic details",
     *  @OA\JsonContent(
     *      type="object",
     *     @OA\Property(property="permission_id", type="string", example="[1,2,3,4]"),
     *  ),
     * ),
     * @OA\Response(
     *         response="200",
     *         description="Returns clinic data",
     * ),
     * @OA\Response(
     *    response=400,
     *    description="information not found response" 
     * )
     * )
     */
    public function updatepermission($esteblishmentusermapID,$roleID, Request $request)
    {
        $data = $request->all();
        Permission::where('roleID',$roleID)->delete();
        $permission = new Permission();
        $permission->user_map_id = $esteblishmentusermapID;
        $permission->roleID = $roleID;
        $permission->permission_id = $data['permission_id'];
        $permission->save(); 
        $data = Permission::where(array("roleID" => $roleID))->get();
        return response()->json(['status' => "success", 'permission' => $data], 200);

    }
    /**
     * @OA\Post(
     * path="/establishments/users/{esteblishmentusermapID}/permission/{roleID}",
     * summary="add permission data",
     * description="",
     * operationId="postpermission",
     * tags={"Permission"},
     * @OA\Parameter(
     *         name="esteblishmentusermapID",
     *         in="path",
     *         description="esteblishmentusermapID",
     *         required=true,
     *         example=68179,
     *         @OA\Schema(type="number")
     *     ),
     *  * @OA\Parameter(
     *         name="roleID",
     *         in="path",
     *         description="roleID",
     *         required=true,
     *         example=1,
     *         @OA\Schema(type="number")
     *     ),
     * @OA\RequestBody(
     *  required=true,
     *  description="Pass permission details",
     *  @OA\JsonContent(
     *      type="object",
     *     @OA\Property(property="permission_id", type="string", example="[1,2,3,4]"),
     *  ),
     * ),
     * @OA\Response(
     *         response="200",
     *         description="Returns permission data",
     * ),
     * @OA\Response(
     *    response=400,
     *    description="information not found response" 
     * )
     * )
     */
    public function addpermission($esteblishmentusermapID,$roleID, Request $request)
    {
        $data = $request->all();
        $permission = new Permission();
        $permission->user_map_id = $esteblishmentusermapID;
        $permission->roleID = $roleID;
        $permission->permission_id = $data['permission_id'];
        $permission->save(); 
        $data = Permission::where(array("roleID" => $roleID))->get();
        return response()->json(['status' => "success", 'clinic' => $data], 200);

    }
    /**
     * @OA\Delete(
     * path="/establishments/users/{esteblishmentusermapID}/permission/{roleID}",
     * summary="delete permission data",
     * description="",
     * operationId="updatepermission",
     * tags={"Permission"},
     * @OA\Parameter(
     *         name="esteblishmentusermapID",
     *         in="path",
     *         description="esteblishmentusermapID",
     *         required=true,
     *         example=68179,
     *         @OA\Schema(type="number")
     *     ),
     * @OA\Parameter(
     *         name="roleID",
     *         in="path",
     *         description="roleID",
     *         required=true,
     *         example=1,
     *         @OA\Schema(type="number")
     *     ),
     * @OA\Response(
     *         response="200",
     *         description="Returns permission data",
     * ),
     * @OA\Response(
     *    response=400,
     *    description="information not found response" 
     * )
     * )
     */
    public function deletepermission($esteblishmentusermapID,$roleID)
    {
        
        Permission::where('roleID',$roleID)->delete();
        //$data = Permission::where(array("user_map_id" => $esteblishmentusermapID))->get();
        return response()->json(['status' => "success"], 200);

    }


    /**
     * @OA\Get(
     * path="/establishments/users/{esteblishmentusermapID}/roles",
     * summary="get roles data",
     * description="",
     * operationId="getroles",
     * tags={"Permission"},
     * @OA\Parameter(
     *         name="esteblishmentusermapID",
     *         in="path",
     *         description="esteblishmentusermapID",
     *         required=true,
     *         example=68179,
     *         @OA\Schema(type="number")
     *     ),
     * @OA\Response(
     *         response="200",
     *         description="Returns doctors data",
     * ),
     * @OA\Response(
     *    response=400,
     *    description="information not found response" 
     * )
     * )
     */
    public function getroles($esteblishmentusermapID)
    {

        try {
            $data = Roles::where(array("user_map_id" => $esteblishmentusermapID))->get();
            return response()->json(['status' => "success", 'roles' => $data], 200);
        } catch (\Exception $e) {
            throw new HttpException(500, $e->getMessage());
        }
    }
    /**
     * @OA\Get(
     * path="/establishments/users/{esteblishmentusermapID}/module",
     * summary="get module data",
     * description="",
     * operationId="getmodule",
     * tags={"Permission"},
     * @OA\Parameter(
     *         name="esteblishmentusermapID",
     *         in="path",
     *         description="esteblishmentusermapID",
     *         required=true,
     *         example=68179,
     *         @OA\Schema(type="number")
     *     ),
     * @OA\Response(
     *         response="200",
     *         description="Returns doctors data",
     * ),
     * @OA\Response(
     *    response=400,
     *    description="information not found response" 
     * )
     * )
     */
    public function getmodule($esteblishmentusermapID)
    {

        try {
            $data = PermissionTable::all();
            return response()->json(['status' => "success", 'module' => $data], 200);
        } catch (\Exception $e) {
            throw new HttpException(500, $e->getMessage());
        }
    }

    /**
     * @OA\Post(
     * path="/establishments/users/{esteblishmentusermapID}/roles",
     * summary="post roles data",
     * description="",
     * operationId="postroles",
     * tags={"Permission"},
     * @OA\Parameter(
     *         name="esteblishmentusermapID",
     *         in="path",
     *         description="esteblishmentusermapID",
     *         required=true,
     *         example=68179,
     *         @OA\Schema(type="number")
     *     ),
     * @OA\RequestBody(
     *  required=true,
     *  description="Pass roles details",
     *  @OA\JsonContent(
     *      type="object",
     *     @OA\Property(property="role", type="string", example="1")
     *  ),
     * ),
     * @OA\Response(
     *         response="200",
     *         description="Returns doctors data",
     * ),
     * @OA\Response(
     *    response=400,
     *    description="information not found response" 
     * )
     * )
     */
    public function saveroles($esteblishmentusermapID,Request $request)
    {

        try {
            $data = $request->all();
            $role = new Roles();
            $role->usertype = $data['role'];
            $role->user_map_id = $esteblishmentusermapID;
            $role->save();
            $data = Roles::where(array("user_map_id" => $esteblishmentusermapID))->get();
            return response()->json(['status' => "success", 'roles' => $data], 200);
        } catch (\Exception $e) {
            throw new HttpException(500, $e->getMessage());
        }
    }
    /**
     * @OA\Put(
     * path="/establishments/users/{esteblishmentusermapID}/roles/{roleID}",
     * summary="update roles data",
     * description="",
     * operationId="postroles",
     * tags={"Permission"},
     * @OA\Parameter(
     *         name="esteblishmentusermapID",
     *         in="path",
     *         description="esteblishmentusermapID",
     *         required=true,
     *         example=68179,
     *         @OA\Schema(type="number")
     *     ),
     * @OA\Parameter(
     *         name="roleID",
     *         in="path",
     *         description="roleID",
     *         required=true,
     *         example=1,
     *         @OA\Schema(type="number"),
     *     ),
     * @OA\RequestBody(
     *  required=true,
     *  description="Pass roles details",
     *  @OA\JsonContent(
     *      type="object",
     *     @OA\Property(property="role", type="string", example="1")
     *  ),
     * ),
     * @OA\Response(
     *         response="200",
     *         description="Returns doctors data",
     * ),
     * @OA\Response(
     *    response=400,
     *    description="information not found response" 
     * )
     * )
     */
    public function updateroles($esteblishmentusermapID,$roleID,Request $request)
    {

        try {
            $data = $request->all();
            $role = Roles::find($roleID);
            $role->usertype = $data['role'];
            $role->user_map_id = $esteblishmentusermapID;
            $role->save();
            $data = Roles::where(array("user_map_id" => $esteblishmentusermapID))->get();
            return response()->json(['status' => "success", 'roles' => $data], 200);
        } catch (\Exception $e) {
            throw new HttpException(500, $e->getMessage());
        }
    }
    /**
     * @OA\Delete(
     * path="/establishments/users/{esteblishmentusermapID}/roles/{roleID}",
     * summary="delete roles data",
     * description="",
     * operationId="deleteroles",
     * tags={"Permission"},
     * @OA\Parameter(
     *         name="esteblishmentusermapID",
     *         in="path",
     *         description="esteblishmentusermapID",
     *         required=true,
     *         example=68179,
     *         @OA\Schema(type="number"),
     *     ),
      * @OA\Parameter(
     *         name="roleID",
     *         in="path",
     *         description="roleID",
     *         required=true,
     *         example=1,
     *         @OA\Schema(type="number"),
     *     ),
     * @OA\Response(
     *         response="200",
     *         description="Returns doctors data",
     * ),
     * @OA\Response(
     *    response=400,
     *    description="information not found response" 
     * ),
     * )
     */
    public function deleteroles($esteblishmentusermapID, $roleID)
    {

        try {
            Roles::find($roleID)->delete();
            $data = Roles::where(array("user_map_id" => $esteblishmentusermapID))->get();
            return response()->json(['status' => "success", 'roles' => $data], 200);
        } catch (\Exception $e) {
            throw new HttpException(500, $e->getMessage());
        }
    }
}
