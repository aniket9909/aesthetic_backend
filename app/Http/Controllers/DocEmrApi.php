<?php

/**
 * Docexa Doctor Micro Service API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: satish.soni@globalspace.in
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Log;
use App\Patientmaster;
use App\Http\Controllers\PatientApi;
use DB;
use Carbon\Carbon;
use App\AppointmentDetails;

use App\DiagnosticReport;
use App\Opconsultation;

class DocEmrApi extends Controller
{

    /**
     * Constructor
     */
    public function __construct()
    {
    }


    public function createPatient($esteblishmentusermapID, Request $req)
    {
        try {
            $input = $req;
            // Log::info(['body' => $input]);
            $patient = new Patientmaster();
            $patient->health_id = $input['healthId'];
            $patient->patient_name = $input['name'];
            $patient->gender = $input["gender"];
            $patient->dob = $input["dob"];
            $patient->mobile_no = $input["mobile"];
            $patient->occupation = $input["occupation"];
            $patient->state_id = $input["state_id"];
            $patient->city = $input["city_id"];
            $patient->pincode = $input["pincode"];
            $patient->visit_type = $input["visit_type"];
            $patient->created_by_doctor = $esteblishmentusermapID;
            $save = $patient->save();
            Log::info(["save data" => $save]);
            if ($save) {
                $currentTimestamp = Carbon::now(); // This generates the current timestamp
                DB::insert('insert into docexa_patient_doctor_relation (user_map_id,patient_id, created_date) values(?,?,?)', [$esteblishmentusermapID, $patient->patient_id, $currentTimestamp]);
                $patientAPi = new PatientApi();
                $patinet_list = $patientAPi->patientlist($esteblishmentusermapID);
                if ($patinet_list->original['status'] == "success") {
                    // return response()->json(["status" => true, "message" => "Patient register successfully", "patient" => $patinet_data->original['data']['patient']], 200);
                    return response()->json(["status" => true, "message" => "Patient register successfully", "patient" => $patinet_list->original['data']['patient']], 200);
                }
            }
            return response()->json(['status' => false, 'message' => "Internal Server Error"], 500);
        } catch (\Throwable $th) {
            Log::info(["error" => $th]);
            return response()->json(["status" => false, 'message' => "Internal Server Error" ], 500);
        }
    }

    public function listappointment($esteblishmentusermapID, Request $request)
    {
        try {
            $data = $request;
            // dd($data);
            $res = new AppointmentDetails();
            $data = $res->getappointment($data);
            return response()->json(['status' => 'success', 'data' => $data], 200);
        } catch (\Throwable $th) {
            dd($th);
            Log::info(["error" => $th]);
            return response()->json(["status" => false, 'message' => "Internal Server Error"], 500);
        }
    }

    public function createDiagnostic($esteblishmentusermapID, Request $request)
    {
        try {
            $req = $request->all();
            $dr = new DiagnosticReport();
            $dr->patient_id = $req['patient_id'];
            $dr->user_map_id = $esteblishmentusermapID;
            $dr->report_type = $req['report_type'];
            $dr->report_category = $req['report_category'];
            $dr->laboratory_test_name = $req['laboratory_test_name'];
            $dr->report_conclusion = $req['report_conclusion'];
            $dr->reporting_Doctor = $req['reporting_Doctor'];
            $dr->upload_file = $req['upload_file'];
            $dr->report_created_date = $req['report_created_date'];
            $save = $dr->save();
            if ($save) {
                return response()->json(['status' => true, 'message' => "Diagnostic report successfully added"], 200);
            }
        } catch (\Throwable $th) {
            dd("catch", $th);
            return response()->json(["status" => false, 'message' => "Internal Server Error"], 500);
        }
    }

    public function diagnosticlist($patientId)
    {
        // first we have to check the patient and doctor is exist or not
        $api = new PatientApi();
        if ($api->patientExist($patientId)) {
            $fun = new DiagnosticReport();
            $res = $fun->getDiagnosticReport($patientId);
            return response()->json(['status' => true, "data" => $res], 200);
        }
        return response()->json(['status' => false, "message" => "Patient Not exist"], 404);
    }

    public function createOpConsultation($esteblishmentusermapID, Request $request)
    {
        try {
        $req = $request->all();
        $op = new Opconsultation();
    
        $op->patient_id = $req['patient_id'];
        $op->user_map_id = $esteblishmentusermapID;
        $op->notes = $req['notes'];
        $op->upload_file = $req['upload_file'];

        $save = $op->save();
        if ($save) {
            return response()->json(['status' => true, 'message' => "Opconsultation record successfully added"], 200);
        }
        } catch (\Throwable $th) {
            return response()->json(["status" => false, 'message' => "Internal Server Error"], 500);
        }
    }

    public function Opconsultationlist($patientId)
    {
        // first we have to check the patient and doctor is exist or not
        $api = new PatientApi();
        if ($api->patientExist($patientId)) {
            $fun = new Opconsultation();
            $res = $fun->getOpconsultationReport($patientId);
            return response()->json(['status' => true, "data" => $res], 200);
        }
        return response()->json(['status' => false, "message" => "Patient Not exist"], 404);
    }

    public function CreateDischargeSummary($esteblishmentusermapID,Request $request){
        try {
            
        } catch (\Throwable $th) {
        }
    
    }

}