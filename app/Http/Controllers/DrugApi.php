<?php

/**
 * Docexa Doctor Micro Service API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: satish.soni@globalspace.in
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

namespace App\Http\Controllers;

use Illuminate\Http\Response;
use Illuminate\Http\Request;
use App\Drug;
use App\DrugUserMap;
use App\Drugcategory;
use App\Drugrx;
use App\Medication;
use App\Drugsearchhistory;
use DB;
use App\Doctor;
use Log;

class DrugApi extends Controller
{

    /**
     * Constructor
     */
    public function __construct()
    {
    }

    /**
     * Operation sync
     *
     * @return Http response
     */
    /**

     * @OA\Post(
     * path="/establishments/users/{esteblishmentusermapID}/drug",
     * tags={"Drug"},
     *       @OA\Parameter(
     *         name="esteblishmentusermapID",
     *         in="path",
     *         description="esteblishmentusermapID",
     *         @OA\Items(type="int")
     *     ),
     *  @OA\RequestBody(
     *  required=true,
     *  description="Pass doctor details",
     *  @OA\JsonContent(
     *      type="object",
     *      @OA\Property(property="medicine_name", type="string", example="sa"),
     *      @OA\Property(property="medicine_type", type="string", example="generic,branded,allopathy"),
     *      @OA\Property(property="content", type="string", example=""),
     *      @OA\Property(property="manufacturer_name", type="string", example="Sanofi India  Ltd,Glowderma Labs Pvt Ltd"),
     *  ),
     * ),
     * @OA\Response(
     *         response="400",
     *         description="Error: Bad request. required parameters is not supplied.", 
     *     ),
     * )
     */
    public function adddrug(int $esteblishmentusermapID, Request $request)
    {

        $data = $request->all();
        $drugUserMap = new DrugUserMap();
        $drugUserMap->user_map_id = $esteblishmentusermapID;
        $drugUserMap->medicine_name = $data['medicine_name'];
        $drugUserMap->medicine_type = $data['medicine_type'];
        $drugUserMap->manufacturer_name = $data['manufacturer_name'];
        
        $drugUserMap->save();
        $response = DrugUserMap::where('user_map_id', $esteblishmentusermapID)->get();

        $existmedicineinmaster = Medication::where('medication_name', $data['medicine_name'])->first();

        if ($existmedicineinmaster === false) {
            $medication = new Medication();
            $medication->medication_name = $data['medicine_name'];
            $medication->medication_type = isset($data['medicine_type']) ? $data['medicine_type'] : null;
            $medication->save();
        }
        if (count($response) > 0)
            return response()->json(['status' => 'success', 'data' => $response], 200);
        else
            return response()->json(['status' => 'fail', 'message' => "No record found"], 400);
    }


    public function updatedrugusermap(Request $request)
    {
        try {

            $data = $request->all();
            $drugUserMapExist = DrugUserMap::find($data['medication_id']);


            if ($drugUserMapExist) {
                $existmedicineinmaster = Medication::where('medication_name', $drugUserMapExist->medicine_name)->first();
                Log::Info(['existmedicineinmaster', $existmedicineinmaster]);
                if ($existmedicineinmaster) {
                    $existmedicineinmaster->medication_name = isset($data['medicine_name']) ? $data['medicine_name'] : $drugUserMapExist->medicine_name;
                    $existmedicineinmaster->medication_type = isset($data['medicine_type']) ? $data['medicine_type'] : $drugUserMapExist->medicine_type;
                    $saved = $existmedicineinmaster->save();
                    Log::info(['medication daved', $saved]);
                }
                $drugUserMapExist->user_map_id = $data['user_map_id'];
                $drugUserMapExist->medicine_name = isset($data['medicine_name']) ? $data['medicine_name'] : $drugUserMapExist->medicine_name;
                $drugUserMapExist->medicine_type = isset($data['medicine_type']) ? $data['medicine_type'] : $drugUserMapExist->medicine_type;
                $drugUserMapExist->manufacturer_name = isset($data['manufacturer_name']) ? $data['manufacturer_name'] : $drugUserMapExist->manufacturer_name;
                $drugUserMapExist->content = isset($data['content']) ? $data['content'] : $drugUserMapExist->content;

                $save = $drugUserMapExist->save();
                Log::info(['medication updte', $save]);

                $response = DrugUserMap::where('user_map_id', $data['user_map_id'])->get();


                if ($save) {
                    return response()->json(['status' => true, 'message' => 'updated successfully', 'code' => 200], 200);
                } else {
                    return response()->json(['status' => false, 'message' => 'update failed', 'code' => 400], 400);
                }
            } else {
                return response()->json(['status' => false, 'message' => 'record not found', 'code' => 200], 200);
            }


        } catch (\Throwable $th) {
            return response()->json(['status' => false, 'message' => "Internal server error", 'error' => $th->getMessage()], 500);

        }

    }


    public function deletedrugusermap($id)
    {
        try {
    
            if (!isset($id)) {
                return response()->json(['status' => false, 'message' => 'medication_id is required', 'code' => 400], 400);
            }
    
            $drugUserMap = DrugUserMap::find($id);
    
            if (!$drugUserMap) {
                return response()->json(['status' => false, 'message' => 'Record not found', 'code' => 404], 404);
            }
    
            $drugUserMap->deleted_by = 1;
            $save = $drugUserMap->save();
    
            if ($save) {
                return response()->json([
                    'status' => true,
                    'message' => 'Record marked as deleted',
                    'code' => 200
                ], 200);
            } else {
                return response()->json([
                    'status' => false,
                    'message' => 'Failed to mark as deleted',
                    'code' => 400
                ], 400);
            }
    
        } catch (\Throwable $th) {
            return response()->json([
                'status' => false,
                'message' => 'Internal server error',
                'error' => $th->getMessage(),
                'code' => 500
            ], 500);
        }
    }
    



    /**

     * @OA\Get(
     * path="/sync/drug",
     * tags={"Sync"},
     * @OA\Response(
     *         response="400",
     *         description="Error: Bad request. required parameters is not supplied.", 
     *     ),
     * )
     */
    public function getdruglist()
    {
        return response()->json(['status' => 'fail', 'message' => "Not Activated"], 400);

        $page = 1;
        $per_page = 50;
        //$prefix_term=["a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z"];
        //foreach($prefix_term as $prefix){
        for ($i = 1; $i < 360; $i++) {
            if ($i == 1) {
                $i = 300;
                $page = 17;
                $category_id = 300;
            }
            do {
                //$url = "https://www.1mg.com/pharmacy_api_gateway/v4/drug_skus/by_prefix?prefix_term=".$prefix."&page=".$page."&per_page=".$per_page;
                $url = "https://www.1mg.com/pharmacy_api_gateway/v4/drug_skus/by_therapeutic_class_id?therapeutic_class_id=" . $i . "&page=" . $page . "&per_page=" . $per_page;
                $ch = curl_init();
                curl_setopt($ch, CURLOPT_URL, $url);
                curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: application/json'));
                curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
                curl_setopt($ch, CURLOPT_HEADER, FALSE);
                curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE);
                $response = curl_exec($ch);
                $data = json_decode($response);
                curl_close($ch);
                $total_count = $data->meta->total_count;
                $skus = $data->data->skus;

                if ($page == 1) {
                    $therapeutic_class = $data->data->therapeutic_class;
                    $therapeutic_class_name = $therapeutic_class->name;
                    $therapeutic_class_description = $therapeutic_class->description;
                    //$therapeutic_class_id = $therapeutic_class->therapeutic_class->id;
                    $drugcategory = new Drugcategory();
                    $drugcategory->name = $therapeutic_class_name;
                    $drugcategory->description = $therapeutic_class_description;
                    $drugcategory->save();
                    $category_id = $drugcategory->id;
                }
                foreach ($skus as $row) {
                    $drug = new Drug();
                    $drug->category_id = $category_id;
                    $drug->is_discontinued = $row->is_discontinued;
                    $drug->manufacturer_name = $row->manufacturer_name;
                    $drug->type = $row->type;
                    $drug->price = $row->price;
                    $drug->name = $row->name;
                    $drug->available = $row->available;
                    $drug->pack_size_label = $row->pack_size_label;
                    $drug->slug = $row->slug;
                    $drug->short_composition = $row->short_composition;
                    $drug->image_url = $row->image_url;
                    $drug->quantity = $row->quantity;
                    $drug->save();
                    if (isset($row->rx_required->header)) {
                        $drugrx = new Drugrx();
                        $drugrx->header = $row->rx_required->header;
                        $drugrx->icon_url = $row->rx_required->icon_url;
                        $drugrx->drug_id = $drug->id;
                        $drugrx->save();
                    }
                }
                $count = $page * $per_page;
                $apicount = $data->meta->count;
                DB::table('drug_sync_log')->insert(['page_no' => $page, 'prefix' => $i, 'count' => $apicount]);
                Log::info(['page_no' => $page, 'prefix' => $i, 'count' => $apicount]);
                $page = $page + 1;
                $finalcount = $count + $data->meta->count;
            } while ($finalcount < $total_count);
            $page = 1;
        }
        return response()->json(['status' => 'success', 'data' => $data], 200);
    }
    /**

     * @OA\Get(
     * path="/drug/filter",
     * tags={"Drug"},
     * @OA\Response(
     *         response="400",
     *         description="Error: Bad request. required parameters is not supplied.", 
     *     ),
     * )
     */
    public function filter()
    {
        $data = [];
        DB::statement(DB::raw('set @rownum=0'));
        $manufacturer_name = Drug::groupBy('manufacturer_name')->orderBy('manufacturer_name')->get(['manufacturer_name as name', DB::raw('@rownum  := @rownum  + 1 AS id')]);
        if (count($manufacturer_name) > 0)
            $data[] = ["key" => "Manufacturer Name", "data" => $manufacturer_name];
        DB::statement(DB::raw('set @rownum=0'));
        $types = Drug::groupBy('type')->get(['type as name', DB::raw('@rownum  := @rownum  + 1 AS id')]);
        if (count($types) > 0)
            $data[] = ["key" => "Type", "data" => $types];
        $category = DB::table("drug_category")->where('parent_id', null)->select('id', 'name')->get();
        if (count($category) > 0)
            $data[] = ["key" => "Category", "data" => $category];
        if (count($data) > 0)
            return response()->json(['status' => 'success', 'data' => $data], 200);
        else
            return response()->json(['status' => 'fail', 'message' => "No record found"], 400);
    }
    /**

     * @OA\Get(
     * path="/drugs/{slug}",
     * tags={"Drug"},
     *      @OA\Parameter(
     *         name="slug",
     *         in="path",
     *         description="slug",
     *         required=true,
     *         @OA\Items(type="string")
     *     ),
     * @OA\Response(
     *         response="400",
     *         description="Error: Bad request. required parameters is not supplied.", 
     *     ),
     * )
     */
    public function drugbyslug($slug)
    {
        $drug = Drug::where('slug', "/drugs/" . $slug)->first();
        if (!isset($drug->id))
            return response()->json(['status' => 'fail', 'message' => "No record found"], 200);
        $drug->slug = str_replace("/drugs/", "", $drug->slug);
        $drugrx = Drugrx::where('drug_id', $drug->id)->first();
        if (isset($drugrx->header)) {
            $drug->rx_required = ['header' => $drugrx->header, 'icon_url' => $drugrx->icon_url];
        } else {
            $drug->rx_required = null;
        }

        $subcategory = DB::table('drug_category')->where('id', $drug->category_id)->first();
        $drug->sub_category_id = 0;
        $drug->category_id = 0;
        $drug->sub_category = "";
        $drug->sub_category = "";
        if (isset($subcategory->parent_id)) {
            $drug->sub_category = $subcategory->name;
            $drug->sub_category_id = $subcategory->id;
            $category = DB::table('drug_category')->where('id', $subcategory->parent_id)->first();
            if (isset($category->id)) {
                $drug->category = $category->name;
                $drug->category_id = $category->id;
            }
        }
        $data[] = $drug;
        return response()->json(['status' => 'success', 'data' => $data], 200);
    }
    /**

     * @OA\Post(
     * path="/establishments/users/{esteblishmentusermapID}/drug/search",
     * tags={"Drug"},
     *       @OA\Parameter(
     *         name="esteblishmentusermapID",
     *         in="path",
     *         description="esteblishmentusermapID",
     *         required=true,
     *         @OA\Items(type="int")
     *     ),
     *      @OA\Parameter(
     *         name="prefix_term",
     *         in="query",
     *         description="prefix_term",
     *         required=true,
     *         @OA\Items(type="string")
     *     ),
     *      @OA\Parameter(
     *         name="page",
     *         in="query",
     *         description="page",
     *         required=true,
     *         @OA\Items(type="int")
     *     ),
     *      @OA\Parameter(
     *         name="per_page",
     *         in="query",
     *         description="per_page",
     *         required=true,
     *         @OA\Items(type="int")
     *     ),
     *  @OA\RequestBody(
     *  required=true,
     *  description="Pass doctor details",
     *  @OA\JsonContent(
     *      type="object",
     *      @OA\Property(property="manufacturer_name", type="string", example="Sanofi India  Ltd,Glowderma Labs Pvt Ltd"),
     *      @OA\Property(property="type", type="string", example="generic,branded,allopathy"),
     *      @OA\Property(property="category", type="int", example=30),
     *  ),
     * ),
     * @OA\Response(
     *         response="400",
     *         description="Error: Bad request. required parameters is not supplied.", 
     *     ),
     * )
     */
    public function drugfilter(int $esteblishmentusermapID, Request $request)
    {
        $parameter = $request->all();
        return $this->search($esteblishmentusermapID, $parameter);
    }
    public function drugfilterv2(int $esteblishmentusermapID, Request $request)
    {
        $parameter = $request->all();
        return $this->searchv2($esteblishmentusermapID, $parameter);
    }
    /**

     * @OA\Get(
     * path="/establishments/users/{esteblishmentusermapID}/drug/search/recent",
     * tags={"Drug"},
     *      @OA\Parameter(
     *         name="esteblishmentusermapID",
     *         in="path",
     *         description="esteblishmentusermapID",
     *         required=true,
     *         @OA\Items(type="int")
     *     ),
     * @OA\Response(
     *         response="400",
     *         description="Error: Bad request. required parameters is not supplied.", 
     *     ),
     * )
     */
    public function recentsearch($esteblishmentusermapID)
    {

        return $this->searchhistory($esteblishmentusermapID);
    }
    /**

     * @OA\Put(
     * path="/establishments/users/{esteblishmentusermapID}/drug/search/recent/{drugID}",
     * tags={"Drug"},
     *      @OA\Parameter(
     *         name="esteblishmentusermapID",
     *         in="path",
     *         description="esteblishmentusermapID",
     *         required=true,
     *         @OA\Items(type="int")
     *     ),
    *      @OA\Parameter(
     *         name="drugID",
     *         in="path",
     *         description="drugID",
     *         required=true,
     *         @OA\Items(type="int")
     *     ),
     * @OA\Response(
     *         response="400",
     *         description="Error: Bad request. required parameters is not supplied.", 
     *     ),
     * )
     */
    public function recentsearchupdate($esteblishmentusermapID, $drugID)
    {
        $drug = new Drugsearchhistory();
        $drug->drug_id = $drugID;
        $drug->user_map_id = $esteblishmentusermapID;
        $drug->save();
        return $this->searchhistory($esteblishmentusermapID);
    }

    public function search($usermapid, $parameter)
    {
        //Log::info($parameter);
        //Log::info([$usermapid]);
        //app('redis')->set($usermapid, json_encode('parameter'));
        $manufacturer_name = isset($parameter["manufacturer_name"]) ? $parameter["manufacturer_name"] : "";
        $type = isset($parameter["type"]) ? $parameter["type"] : "";
        $category = isset($parameter["category"]) ? $parameter["category"] : "";
        //$dosage = isset($parameter["dosage"])?$parameter["dosage"]:"";
        $page = (isset($parameter['page'])) ? $parameter['page'] : 1;
        $per_page = (isset($parameter['per_page'])) ? $parameter['per_page'] : 20;
        $prefix_term = (isset($parameter['prefix_term'])) ? $parameter['prefix_term'] : "";
        $count = ((int) $page - 1) * ((int) $per_page);
        $query = Drug::skip($count)->take($per_page)->orderBy('name');
        if ($prefix_term != "") {
            //$query->where('query',$type);
            $query->where('name', 'like', $prefix_term . '%');
        }
        if ($type != "") {
            $types = explode(",", $type);
            //$query->where('query',$type);
            $query->whereIn('type', $types);
        }
        if ($manufacturer_name != "") {
            $manufacturer_names = explode(",", $manufacturer_name);
            $query->whereIn('manufacturer_name', $manufacturer_names);
        }
        if ($category != "" && $category != 0) {
            $subcategory = DB::table('drug_category')->where('parent_id', $category)->pluck('id');
            $query->whereIn('category_id', $subcategory);
        }
        $drugs = $query->get();
        $data = [];
        $query = DrugUserMap::where(array("user_map_id" => $usermapid));
        if ($prefix_term != "") {
            //$query->where('query',$type);
            $query->where('medicine_name', 'like', $prefix_term . '%');
        }
        $drugUserMap = $query->get();
        foreach ($drugUserMap as $drug) {
            $drug->name = $drug->medicine_name;
            $data[] = $drug;
        }
        foreach ($drugs as $drug) {

            if (!isset($drug->id))
                return response()->json(['status' => 'fail', 'message' => "No record found"], 200);
            // $drug->slug = str_replace("/drugs/", "", $drug->slug);
            // $drugrx = Drugrx::where('drug_id', $drug->id)->first();
            // if (isset($drugrx->header)) {
            //     $drug->rx_required = ['header' => $drugrx->header, 'icon_url' => $drugrx->icon_url];
            // } else {
            //     $drug->rx_required = null;
            // }
            // $subcategory = DB::table('drug_category')->where('id', $drug->category_id)->first();
            // $drug->sub_category_id = 0;
            // $drug->category_id = 0;
            // $drug->sub_category = "";
            // $drug->sub_category = "";
            // if (isset($subcategory->parent_id)) {
            //     $drug->sub_category = $subcategory->name;
            //     $drug->sub_category_id = $subcategory->id;
            //     $category = DB::table('drug_category')->where('id', $subcategory->parent_id)->first();
            //     if (isset($category->id)) {
            //         $drug->category = $category->name;
            //         $drug->category_id = $category->id;
            //     }
            // }
            $data[] = $drug;
        }


        if (count($data) > 0)
            return response()->json(['status' => 'success', 'data' => $data], 200);
        else
            return response()->json(['status' => 'fail', 'message' => "No record found"], 400);
    }
    public function searchhistory($usermapid)
    {
        $drugs = Drug::select('drug_list.*')->join('drug_search_history', 'drug_search_history.drug_id', 'drug_list.id')->where('user_map_id', $usermapid)->take(20)->latest('drug_search_history.created_at')->groupBy('drug_list.id')->get();
        $data = [];
        foreach ($drugs as $drug) {

            if (!isset($drug->id))
                return response()->json(['status' => 'fail', 'message' => "No record found"], 200);
            $drug->slug = str_replace("/drugs/", "", $drug->slug);
            $drugrx = Drugrx::where('drug_id', $drug->id)->first();
            if (isset($drugrx->header)) {
                $drug->rx_required = ['header' => $drugrx->header, 'icon_url' => $drugrx->icon_url];
            } else {
                $drug->rx_required = null;
            }
            $subcategory = DB::table('drug_category')->where('id', $drug->category_id)->first();
            $drug->sub_category_id = 0;
            $drug->category_id = 0;
            $drug->sub_category = "";
            $drug->sub_category = "";
            if (isset($subcategory->parent_id)) {
                $drug->sub_category = $subcategory->name;
                $drug->sub_category_id = $subcategory->id;
                $category = DB::table('drug_category')->where('id', $subcategory->parent_id)->first();
                if (isset($category->id)) {
                    $drug->category = $category->name;
                    $drug->category_id = $category->id;
                }
            }
            $data[] = $drug;
        }
        if (count($data) > 0)
            return response()->json(['status' => 'success', 'data' => $data], 200);
        else
            return response()->json(['status' => 'fail', 'message' => "No record found"], 400);
    }




    public function searchv2($usermapid, $parameter)
    {
        $manufacturer_name = isset($parameter["manufacturer_name"]) ? $parameter["manufacturer_name"] : "";
        $type = isset($parameter["type"]) ? $parameter["type"] : "";
        $category = isset($parameter["category"]) ? $parameter["category"] : "";
        //$dosage = isset($parameter["dosage"])?$parameter["dosage"]:"";
        $page = (isset($parameter['page'])) ? $parameter['page'] : 1;
        $per_page = (isset($parameter['per_page'])) ? $parameter['per_page'] : 20;
        $prefix_term = (isset($parameter['prefix_term'])) ? $parameter['prefix_term'] : "";
        $count = ((int) $page - 1) * ((int) $per_page);


        $data = [];
        $query = DrugUserMap::
        where('deleted_by',0)->
        where(array("user_map_id" => $usermapid));
        if ($prefix_term != "") {
            //$query->where('query',$type);
            $query->where('medicine_name', 'like', $prefix_term . '%');
        }
        $drugUserMap = $query->get();
        foreach ($drugUserMap as $drug) {
            $drug->name = $drug->medicine_name;
            $drug->isMasterData = false;
            $data[] = $drug;
        }

        if (count($data) > 0) {
            return response()->json(['status' => 'success', 'data' => $data], 200);
        }
        // id, is_discontinued, manufacturer_name, type, price, name, available, pack_size_label, slug, short_composition, image_url, quantity, created_at, updated_at, category_id, dosage_forms
        // $query = Drug::select('')->skip($count)->take($per_page)->orderBy('name');

        $query = Drug::select(
            'id',
            'is_discontinued',
            'manufacturer_name',
            'type',
            'price',
            'name',
            'available',
            'pack_size_label',
            'slug',
            'short_composition',
            'image_url',
            'quantity',
            'created_at',
            'updated_at',
            'category_id',
            DB::raw("TRIM(TRAILING 's' FROM dosage_forms) as medicine_type")
        )
            ->skip($count)
            ->take($per_page)
            ->orderBy('name');



        if ($prefix_term != "") {
            //$query->where('query',$type);
            $query->where('name', 'like', $prefix_term . '%');
        }
        if ($type != "") {
            $types = explode(",", $type);
            //$query->where('query',$type);
            $query->whereIn('type', $types);
        }
        if ($manufacturer_name != "") {
            $manufacturer_names = explode(",", $manufacturer_name);
            $query->whereIn('manufacturer_name', $manufacturer_names);
        }
        if ($category != "" && $category != 0) {
            $subcategory = DB::table('drug_category')->where('parent_id', $category)->pluck('id');
            $query->whereIn('category_id', $subcategory);
        }
        $drugs = $query->get();

        foreach ($drugs as $drug) {

            if (!isset($drug->id))
                return response()->json(['status' => 'fail', 'message' => "No record found"], 200);
            // $drug->slug = str_replace("/drugs/", "", $drug->slug);
            // $drugrx = Drugrx::where('drug_id', $drug->id)->first();
            // if (isset($drugrx->header)) {
            //     $drug->rx_required = ['header' => $drugrx->header, 'icon_url' => $drugrx->icon_url];
            // } else {
            //     $drug->rx_required = null;
            // }
            // $subcategory = DB::table('drug_category')->where('id', $drug->category_id)->first();
            // $drug->sub_category_id = 0;
            // $drug->category_id = 0;
            // $drug->sub_category = "";
            // $drug->sub_category = "";
            // if (isset($subcategory->parent_id)) {
            //     $drug->sub_category = $subcategory->name;
            //     $drug->sub_category_id = $subcategory->id;
            //     $category = DB::table('drug_category')->where('id', $subcategory->parent_id)->first();
            //     if (isset($category->id)) {
            //         $drug->category = $category->name;
            //         $drug->category_id = $category->id;
            //     }
            // }
            $drug->isMasterData = true;
            $data[] = $drug;

        }
        if (count($data) > 0)
            return response()->json(['status' => 'success', 'data' => $data], 200);
        else
            return response()->json(['status' => 'fail', 'message' => "No record found"], 400);

        // else{
        //     //Log::info($parameter);
        //     //Log::info([$usermapid]);
        //     //app('redis')->set($usermapid, json_encode('parameter'));
        //     $manufacturer_name = isset($parameter["manufacturer_name"]) ? $parameter["manufacturer_name"] : "";
        //     $type = isset($parameter["type"]) ? $parameter["type"] : "";
        //     $category = isset($parameter["category"]) ? $parameter["category"] : "";
        //     //$dosage = isset($parameter["dosage"])?$parameter["dosage"]:"";
        //     $page = (isset($parameter['page'])) ? $parameter['page'] : 1;
        //     $per_page = (isset($parameter['per_page'])) ? $parameter['per_page'] : 20;
        //     $prefix_term = (isset($parameter['prefix_term'])) ? $parameter['prefix_term'] : "";
        //     $count = ((int)$page - 1) * ((int)$per_page);
        //     $query = Drug::skip($count)->take($per_page)->orderBy('name');
        //     if ($prefix_term != "") {
        //         //$query->where('query',$type);
        //         $query->where('name', 'like', $prefix_term . '%');
        //     }
        //     if ($type != "") {
        //         $types = explode(",", $type);
        //         //$query->where('query',$type);
        //         $query->whereIn('type', $types);
        //     }
        //     if ($manufacturer_name != "") {
        //         $manufacturer_names = explode(",", $manufacturer_name);
        //         $query->whereIn('manufacturer_name', $manufacturer_names);
        //     }
        //     if ($category != "" && $category != 0) {
        //         $subcategory = DB::table('drug_category')->where('parent_id', $category)->pluck('id');
        //         $query->whereIn('category_id', $subcategory);
        //     }
        //     $drugs = $query->get();
        //     $data = [];
        //     $query = DrugUserMap::where(array("user_map_id" => $usermapid));
        //     if ($prefix_term != "") {
        //         //$query->where('query',$type);
        //         $query->where('medicine_name', 'like', $prefix_term . '%');
        //     }
        //     $drugUserMap = $query->get();
        //     foreach($drugUserMap as $drug){
        //         $drug->name = $drug->medicine_name;
        //         $data[] = $drug;
        //     }
        //     foreach ($drugs as $drug) {

        //         if (!isset($drug->id))
        //             return response()->json(['status' => 'fail', 'message' => "No record found"], 200);
        //         // $drug->slug = str_replace("/drugs/", "", $drug->slug);
        //         // $drugrx = Drugrx::where('drug_id', $drug->id)->first();
        //         // if (isset($drugrx->header)) {
        //         //     $drug->rx_required = ['header' => $drugrx->header, 'icon_url' => $drugrx->icon_url];
        //         // } else {
        //         //     $drug->rx_required = null;
        //         // }
        //         // $subcategory = DB::table('drug_category')->where('id', $drug->category_id)->first();
        //         // $drug->sub_category_id = 0;
        //         // $drug->category_id = 0;
        //         // $drug->sub_category = "";
        //         // $drug->sub_category = "";
        //         // if (isset($subcategory->parent_id)) {
        //         //     $drug->sub_category = $subcategory->name;
        //         //     $drug->sub_category_id = $subcategory->id;
        //         //     $category = DB::table('drug_category')->where('id', $subcategory->parent_id)->first();
        //         //     if (isset($category->id)) {
        //         //         $drug->category = $category->name;
        //         //         $drug->category_id = $category->id;
        //         //     }
        //         // }

        //         // $data[] = $drug;

        //     }       
        //     if (count($data) > 0)
        //         return response()->json(['status' => 'success', 'data' => $data], 200);
        //     else
        //         return response()->json(['status' => 'fail', 'message' => "No record found"], 400);
        // }
    }


    public function updateDrugsFlag($esteblishmentusermapID, Request $request)
    {
        try {
            $input = $request->all();
            $doctorUserMap = DB::table('docexa_medical_establishments_medical_user_map')->where('id', $esteblishmentusermapID)->first()->medical_user_id;

            $doctorData = Doctor::where('pharmaclient_id', $doctorUserMap)->first();
            if ($doctorData) {
                $doctorData->is_medication = $input['flag'];
                $save = $doctorData->save();
                // dd($save);
                return response()->json(['status' => true, 'message' => "Flag updated successfully" , 'code' => 200],200);
            } else {
                return response()->json(['status' => false, 'message' => "Doctor data not found" , 'code' => 400], 400);
            }

        } catch (\Throwable $th) {
            Log::info(["error" => $th]);
            return response()->json(['status' => false, 'message' => "Internal server error"], 500);

        }
    }




    public function addDoses(int $esteblishmentusermapID, Request $request)
    {

        try {


            // id, user_map_id, medicine_name, medicine_type, content, manufacturer_name, created_at, updated_at, dosage, strength, max_dosage
            $data = $request->all();
            $drugUserMap = DrugUserMap::find($data['id']);
            if ($drugUserMap) {
                $drugUserMap->dosage = $data['dosage'];
                $drugUserMap->strength = $data['strength'];
                $drugUserMap->max_dosage = $data['max_dosage'];
                $save = $drugUserMap->save();
                if ($save) {
                    $response = DrugUserMap::where('user_map_id', $esteblishmentusermapID)->get();
                    return response()->json(['status' => true, 'message' => 'dosage added successfully', 'data' => $response, 'code' => 200], 200);
                } else {
                    return response()->json(['status' => false, 'message' => 'Failed to add dosage', 'code' => 400], 400);
                }
            } else {
                return response()->json(['status' => false, 'message' => 'data not found', 'code' => 200], 200);

            }

        } catch (\Throwable $th) {
            return response()->json(['status' => false, 'message' => "Internal server error", 'error' => $th->getMessage()], 500);
        }
    }


    public function getDosesOfUserMap($esteblishmentusermapID)
    {
        try {
            $response = DrugUserMap::where('user_map_id', $esteblishmentusermapID)->get();
            if (count($response) > 0) {
                return response()->json(['status' => true, 'message' => 'data retrived successfully', 'data' => $response, 'code' => 200], 200);
            } else {
                return response()->json(['status' => false, 'message' => 'data not found', 'code' => 200], 200);
            }

        } catch (\Throwable $th) {
            return response()->json(['status' => false, 'message' => "Internal server error", 'error' => $th->getMessage()], 500);
        }
    }

    public function addMedicineTiming(int $esteblishmentusermapID, Request $request)
    {
        try {
            //  morning, afternoon, evening, food, duration, duration_validity, notes
            $data = $request->all();
            $drugUserMap = DrugUserMap::find($data['id']);
            if ($drugUserMap) {
                $drugUserMap->dosage = $data['dosage'];
                $drugUserMap->strength = $data['strength'];
                $drugUserMap->max_dosage = $data['max_dosage'];
                $drugUserMap->morning = $data['morning'];
                $drugUserMap->afternoon = $data['afternoon'];
                $drugUserMap->evening = $data['evening'];
                $drugUserMap->food = $data['food'];
                $drugUserMap->duration = $data['duration'];
                $drugUserMap->duration_validity = $data['duration_validity'];
                $drugUserMap->notes = $data['notes'];
                $drugUserMap->timing = isset($data["timing"]) ? $data["timing"] : "";

                $save = $drugUserMap->save();
                if ($save) {
                    $response = DrugUserMap::where('user_map_id', $esteblishmentusermapID)->get();
                    return response()->json(['status' => true, 'message' => 'data added successfully', 'data' => $response, 'code' => 200], 200);
                } else {
                    return response()->json(['status' => false, 'message' => 'Failed to add dosage', 'code' => 400], 400);
                }
            } else {
                return response()->json(['status' => false, 'message' => 'data not found', 'code' => 200], 200);

            }

        } catch (\Throwable $th) {
            return response()->json(['status' => false, 'message' => "Internal server error", 'error' => $th->getMessage()], 500);
        }
    }

}
