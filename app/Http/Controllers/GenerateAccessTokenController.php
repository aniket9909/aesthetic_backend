<?php

/**
 * Docexa Doctor Micro Service API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: satish.soni@globalspace.in
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Twilio\Jwt\AccessToken;
use Twilio\Jwt\Grants\VideoGrant;
use Twilio\Jwt\Grants\ChatGrant;
use Twilio\Rest\Client;
use Illuminate\Support\Facades\Http;
use App\Agro\AgoraDynamicKey\RtcTokenBuilder;
use Carbon\Carbon;
use DateTime;

class GenerateAccessTokenController extends Controller
{

    /**
     * Constructor
     */
    public function __construct()
    {
    }

    public function generate_token(Request $request)
    {

        // Substitute your Twilio Account SID and API Key details
        $accountSid = env('TWILIO_ACCOUNT_SID');
        $apiKeySid = env('TWILIO_API_KEY');
        $apiKeySecret = env('TWILIO_API_SECRET');
        $apiAuthToken = env('TWILIO_AUTH_TOKEN');

        // Required for Chat grant
        $twilio = new Client($accountSid, $apiAuthToken);
        $service = $twilio->conversations->v1->conversations->create([
            "friendlyName" => "satish"
        ]);
        //var_dump($service);die;
        $serviceSid = "IS7b3c293f4dc4449581fbf66e63559994";
        $identity = $request->identity;
        // Create an Access Token
        $token = new AccessToken(
            $accountSid,
            $apiKeySid,
            $apiKeySecret,
            3600,
            $identity
        );

        // Grant access to Video
        $grant = new VideoGrant();
        //$grant->setServiceSid($serviceSid);
        $token->addGrant($grant);

        // Serialize the token as a JWT
        $result = [
            "identity" => $identity,
            "serviceSid" => $serviceSid,
            "token" => $token->toJWT()
        ];

        return response()->json($result);
    }
    public function generate_token_agora(Request $request)
    {
        $data = [
            "accessKey" => "vC-Bb1gTCkHCdhix",
            "secretAccessKey" => "824z1G_7DXxT48UyulTw4pDQiTar8uHz",
            "lifespan" => 3600000,
            "role" => "admin"
        ];
        $response = Http::withHeaders([
            'region' => 'in-mum',
            'Content-Type' => 'application/json'
        ])->post('https://api.netless.link/v5/tokens/teams', $data);
        echo $response->body();
    }
    public function generate_room_token_agora($uuid, Request $request)
    {
        $sdktoken = "NETLESSSDK_YWs9dkMtQmIxZ1RDa0hDZGhpeCZub25jZT1iZWU3ZGRlMC1lNmY3LTExZWMtYTFhYi00ZjFmNTY1YThlMjAmcm9sZT0wJnNpZz00MWYyOWNlNmU0ZTBhNGM1MzhlZTU5YTM1ZjAzOWI3NTg4NWNjYjNiMDk0MmY4Y2JiNjU3YjczNzc3OTRhODg1";
        $data = [
            "lifespan" => 3600000,
            "role" => "admin"
        ];
        $response = Http::withHeaders([
            'region' => 'in-mum',
            'Content-Type' => 'application/json',
            'token' => $sdktoken
        ])->post('https://api.netless.link/v5/tokens/rooms/' . $uuid, $data);
        echo $response->body();
    }
    public function generate_create_room_agora(Request $request)
    {
        $sdktoken = "NETLESSSDK_YWs9dkMtQmIxZ1RDa0hDZGhpeCZub25jZT1iZWU3ZGRlMC1lNmY3LTExZWMtYTFhYi00ZjFmNTY1YThlMjAmcm9sZT0wJnNpZz00MWYyOWNlNmU0ZTBhNGM1MzhlZTU5YTM1ZjAzOWI3NTg4NWNjYjNiMDk0MmY4Y2JiNjU3YjczNzc3OTRhODg1";
        $data = [
            "isRecord" => false
        ];
        $response = Http::withHeaders([
            'region' => 'in-mum',
            'Content-Type' => 'application/json',
            'token' => $sdktoken
        ])->post('https://api.netless.link/v5/rooms', $data);
        echo $response->body();
    }
    public function generate_task_token_agora($uuid, Request $request)
    {
        $sdktoken = "NETLESSSDK_YWs9dkMtQmIxZ1RDa0hDZGhpeCZub25jZT1iZWU3ZGRlMC1lNmY3LTExZWMtYTFhYi00ZjFmNTY1YThlMjAmcm9sZT0wJnNpZz00MWYyOWNlNmU0ZTBhNGM1MzhlZTU5YTM1ZjAzOWI3NTg4NWNjYjNiMDk0MmY4Y2JiNjU3YjczNzc3OTRhODg1";
        $data = [
            "lifespan" => 600,
            "role" => "admin"
        ];
        $response = Http::withHeaders([
            'region' => 'in-mum',
            'Content-Type' => 'application/json',
            'token' => $sdktoken
        ])->post('https://api.netless.link/v5/tokens/tasks/' . $uuid, $data);
        echo $response->body();
    }

    public function token(Request $request)
    {
        //$appID = env('AGORA_APP_ID');
        $appID = "3043582cc2e247c6a7379b77cfe2f000";
        //$appCertificate = env('AGORA_APP_CERTIFICATE');
        $appCertificate = "749c90f30cae4dceb418a6ea43c801b9";
        $channelName = $request->channelName;
        $usertype = $request->type;
        $data = [
            'template' => 'send_video_call_notification',
            'mobile_no' => "",
            'handle' => "",
            'usertype' => $usertype,
            'appointment_id' => $channelName
        ];
        $this->sendNotificationVideoCall($data);

        $uid = 0;
        $role = RtcTokenBuilder::RoleAttendee;
        $expireTimeInSeconds = 3600;
        $currentTimestamp = (new \DateTime("now", new \DateTimeZone('Asia/Kolkata')))->getTimestamp();
        $privilegeExpiredTs = $currentTimestamp + $expireTimeInSeconds;
        $token = RtcTokenBuilder::buildTokenWithUid($appID, $appCertificate, $channelName, $uid, $role, $privilegeExpiredTs);
        return response()->json(['token'=>$token,'channelName'=>$channelName,'expire'=>$privilegeExpiredTs]);
    }
}
