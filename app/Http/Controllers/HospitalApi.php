<?php

/**
 * Docexa Doctor Micro Service API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: satish.soni@globalspace.in
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

namespace App\Http\Controllers;

use App\Hospital;
use App\Ambulance;
use App\Pathlab;
use App\Nursing;
use App\Oncall;
use App\MedicineCart;
use App\Patientmaster;

use Illuminate\Http\Response;
use Illuminate\Http\Request;
use DB;
use Log;

class HospitalApi extends Controller
{

    /**
     * Constructor
     */
    public function __construct()
    {
    }
    /**
     * @OA\Post(
     * path="/hospital/login",
     * tags={"Hospitals"},
    * @OA\RequestBody(
     *  required=true,
     *  description="Pass doctor details",
     *  @OA\JsonContent(
     *      type="object",
    
     *                      @OA\Property(
     *                         property="email",
     *                         type="string",
     *                         example=""
     *                      ),
     *                      @OA\Property(
     *                         property="password",
     *                         type="string",
     *                         example=""
     *                      ),
     * ),
     * ),
     * @OA\Response(
     *         response="200",
     *         description="hospital detail master data",
     *    @OA\JsonContent(
     *       @OA\Property(property="success", type="string", example="success")
     *        )
     *     ),
     * @OA\Response(
     *         response="400",
     *         description="Error: Bad request. required parameters is not supplied.",    
     *    @OA\JsonContent(
     *       @OA\Property(property="error", type="string", example="esteblishment User Map ID not found")
     *        )
     *     ),
     * )
     */
    public function hospitallogin(Request $request)
    {

        $data = $request->all();
        $staff  = DB::table('hospital_staff')->where(array('email'=>$data['email'],'password'=>$data['password']))->first();
        if(isset($staff->id)){
            $hospital = Hospital::with('services','coverimg')->where('docexa_hospital_master.hospital_id',$staff->hospital_id)->first();
            $hospital->doctors = Hospital::where('docexa_hospital_master.hospital_id',$staff->hospital_id)->doctors()->select('docexa_doctor_master.*',DB::raw('docexa_medical_establishments_medical_user_map.id as user_map_id'),DB::raw('group_concat(docexa_speciality_master.speciality_name) as speciality_name'))->groupBy('docexa_medical_establishments_medical_user_map.id')->get();
            return response()->json(['status' => "success", 'hospital' => $hospital], 200);    
        }
        return response()->json(['status' => "fail", 'message' =>"Invalid credentials"], 200);
    } 
    /**
     * @OA\Get(
     * path="/hospital/{handle}",
     * tags={"Hospitals"},
     *    
     * @OA\Parameter(
     *         name="handle",
     *         in="path",
     *         description="handle",
     *         required=true,
     *         example="apollo-hospital",
     *         @OA\Schema(type="string")
     *     ),
     * @OA\Response(
     *         response="200",
     *         description="hospital detail master data",
     *    @OA\JsonContent(
     *       @OA\Property(property="success", type="string", example="success")
     *        )
     *     ),
     * @OA\Response(
     *         response="400",
     *         description="Error: Bad request. required parameters is not supplied.",    
     *    @OA\JsonContent(
     *       @OA\Property(property="error", type="string", example="esteblishment User Map ID not found")
     *        )
     *     ),
     * )
     */
    public function hospitaldetails($handle)
    {

        if (!isset($handle)) {
            return response()->json(['status' => 'fail', 'msg' => 'esteblishment User Map ID not found'], 400);
        }
        $hospital = Hospital::with('services','coverimg')->where('slug',$handle)->first();
        $hospital->doctors = Hospital::where('slug',$handle)->doctors()->select('docexa_doctor_master.*',DB::raw('docexa_medical_establishments_medical_user_map.id as user_map_id'),DB::raw('group_concat(docexa_speciality_master.speciality_name) as speciality_name'))->groupBy('docexa_medical_establishments_medical_user_map.id')->get();
        return response()->json(['status' => "success", 'hospital' => $hospital, 'handle' => $_ENV['APP_HANDLE'] . $handle], 200);
    } 

     /**
     * @OA\Get(
     * path="/establishments/hospital/{hospitalID}/pathlab",
     * tags={"Appointment"},
     
     * @OA\Parameter(
     *         name="hospitalID",
     *         in="path",
     *         description="hospital  id",
     *         required=true,
     *         example="65887",
     *         @OA\Schema(type="string")
     *     ),
     * @OA\Response(
     *         response="200",
     *         description="lead detail",
     *    @OA\JsonContent(
     *       @OA\Property(property="success", type="string", example="success")
     *        )
     *     ),
     * @OA\Response(
     *         response="400",
     *         description="Error: Bad request. required parameters is not supplied.",    
     *    @OA\JsonContent(
     *       @OA\Property(property="error", type="string", example="esteblishment User Map ID not found")
     *        )
     *     ),
     * )
     */
    public function gethospitalpathlabappointment($hospitalID)
    {
        if (!isset($hospitalID)) {
            return response()->json(['status' => 'fail', 'msg' => 'esteblishment User Map ID not found'], 400);
        }
        $data = Pathlab::where('hospital_id',$hospitalID)->get();
        return response()->json(['status' => "success", 'data' => $data], 200);
    }
     /**
     * @OA\Get(
     * path="/establishments/hospital/{hospitalID}/nursing",
     * tags={"Appointment"},
     
     * @OA\Parameter(
     *         name="hospitalID",
     *         in="path",
     *         description="hospital  id",
     *         required=true,
     *         example="65887",
     *         @OA\Schema(type="string")
     *     ),
     * @OA\Response(
     *         response="200",
     *         description="lead detail",
     *    @OA\JsonContent(
     *       @OA\Property(property="success", type="string", example="success")
     *        )
     *     ),
     * @OA\Response(
     *         response="400",
     *         description="Error: Bad request. required parameters is not supplied.",    
     *    @OA\JsonContent(
     *       @OA\Property(property="error", type="string", example="esteblishment User Map ID not found")
     *        )
     *     ),
     * )
     */
    public function gethospitalnursingappointment($hospitalID)
    {
        if (!isset($hospitalID)) {
            return response()->json(['status' => 'fail', 'msg' => 'esteblishment User Map ID not found'], 400);
        }
        $data = Nursing::where('hospital_id',$hospitalID)->get();
        return response()->json(['status' => "success", 'data' => $data], 200);
    }
    /**
     * @OA\Get(
     * path="/establishments/hospital/{hospitalID}/ambulance",
     * tags={"Appointment"},
     
     * @OA\Parameter(
     *         name="hospitalID",
     *         in="path",
     *         description="hospital  id",
     *         required=true,
     *         example="65887",
     *         @OA\Schema(type="string")
     *     ),
     * @OA\Response(
     *         response="200",
     *         description="lead detail",
     *    @OA\JsonContent(
     *       @OA\Property(property="success", type="string", example="success")
     *        )
     *     ),
     * @OA\Response(
     *         response="400",
     *         description="Error: Bad request. required parameters is not supplied.",    
     *    @OA\JsonContent(
     *       @OA\Property(property="error", type="string", example="esteblishment User Map ID not found")
     *        )
     *     ),
     * )
     */
    public function gethospitalambulanceappointment($hospitalID)
    {
        if (!isset($hospitalID)) {
            return response()->json(['status' => 'fail', 'msg' => 'esteblishment User Map ID not found'], 400);
        }
        $data = Ambulance::where('hospital_id',$hospitalID)->get();
        return response()->json(['status' => "success", 'data' => $data], 200);
    }
    /**
     * @OA\Get(
     * path="/establishments/hospital/{hospitalID}/patients",
     * tags={"Appointment"},
     
     * @OA\Parameter(
     *         name="hospitalID",
     *         in="path",
     *         description="hospital  id",
     *         required=true,
     *         example="65887",
     *         @OA\Schema(type="string")
     *     ),
     * @OA\Response(
     *         response="200",
     *         description="lead detail",
     *    @OA\JsonContent(
     *       @OA\Property(property="success", type="string", example="success")
     *        )
     *     ),
     * @OA\Response(
     *         response="400",
     *         description="Error: Bad request. required parameters is not supplied.",    
     *    @OA\JsonContent(
     *       @OA\Property(property="error", type="string", example="esteblishment User Map ID not found")
     *        )
     *     ),
     * )
     */
    public function gethospitalpatients($hospitalID)
    {
        if (!isset($hospitalID)) {
            return response()->json(['status' => 'fail', 'msg' => 'esteblishment User Map ID not found'], 400);
        }
        $result =  Patientmaster::join('docexa_patient_doctor_relation','docexa_patient_doctor_relation.patient_id','docexa_patient_details.patient_id')
        // ->join('docexa_medical_establishments_medical_user_map','docexa_patient_doctor_relation.user_map_id','docexa_medical_establishments_medical_user_map.id')
        // ->join('doctor_hospital_relation','docexa_medical_establishments_medical_user_map.medical_user_id','doctor_hospital_relation.pharmaclient_id')
        ->where('docexa_patient_doctor_relation.hospital_id',$hospitalID)->orderBy('docexa_patient_details.patient_name')->distinct()->get();
        //var_dump($result);die;
        $patient = [];
        foreach ($result as $r) {
            $patient[] = [
                "patient_id" => $r->patient_id,
                "patient_name" => $r->patient_name,
                "email" => $r->email_id,
                "mobile_no" => $r->mobile_no,
                "age" => $r->age,
                "gender" => $r->gender,
                "dob" => $r->dob,
                "address" => $r->address,
                "membership_no" => $r->membership_no,
                "valid_from" => $r->valid_from,
                "valid_to" => $r->valid_to,
                "last_appointment_date" => DB::table('docexa_patient_booking_details')->where(array('docexa_patient_booking_details.patient_id'=> $r->patient_id,'docexa_patient_booking_details.hospital_id'=>$hospitalID))->orderBy('date')->max('date')
            ];
        }
        return response()->json(['status' => "success", 'data' => $patient], 200);
    }
    /**
     * @OA\Get(
     * path="/establishments/hospital/{hospitalID}/doctors",
     * tags={"Appointment"},
     
     * @OA\Parameter(
     *         name="hospitalID",
     *         in="path",
     *         description="hospital  id",
     *         required=true,
     *         example="65887",
     *         @OA\Schema(type="string")
     *     ),
     * @OA\Response(
     *         response="200",
     *         description="lead detail",
     *    @OA\JsonContent(
     *       @OA\Property(property="success", type="string", example="success")
     *        )
     *     ),
     * @OA\Response(
     *         response="400",
     *         description="Error: Bad request. required parameters is not supplied.",    
     *    @OA\JsonContent(
     *       @OA\Property(property="error", type="string", example="esteblishment User Map ID not found")
     *        )
     *     ),
     * )
     */
    public function gethospitaldoctors($hospitalID)
    {
        if (!isset($hospitalID)) {
            return response()->json(['status' => 'fail', 'msg' => 'esteblishment User Map ID not found'], 400);
        }
        //$data = Ambulance::where('hospital_id',$hospitalID)->get();
        $doctors = Hospital::where('docexa_hospital_master.hospital_id',$hospitalID)->doctors()->select('docexa_doctor_master.*',DB::raw('docexa_medical_establishments_medical_user_map.id as user_map_id'),DB::raw('group_concat(docexa_speciality_master.speciality_name) as speciality_name'))->groupBy('docexa_medical_establishments_medical_user_map.id')->get();
        return response()->json(['status' => "success", 'data' => $doctors], 200);
    }
    /**
     * @OA\Get(
     * path="/establishments/hospital/{hospitalID}/oncall",
     * tags={"Appointment"},
     
     * @OA\Parameter(
     *         name="hospitalID",
     *         in="path",
     *         description="hospital  id",
     *         required=true,
     *         example="65887",
     *         @OA\Schema(type="string")
     *     ),
     * @OA\Response(
     *         response="200",
     *         description="lead detail",
     *    @OA\JsonContent(
     *       @OA\Property(property="success", type="string", example="success")
     *        )
     *     ),
     * @OA\Response(
     *         response="400",
     *         description="Error: Bad request. required parameters is not supplied.",    
     *    @OA\JsonContent(
     *       @OA\Property(property="error", type="string", example="esteblishment User Map ID not found")
     *        )
     *     ),
     * )
     */
    public function gethospitaloncallappointment($hospitalID)
    {
        if (!isset($hospitalID)) {
            return response()->json(['status' => 'fail', 'msg' => 'esteblishment User Map ID not found'], 400);
        }
        $data = Oncall::where('hospital_id',$hospitalID)->with('doctor')->get();
        return response()->json(['status' => "success", 'data' => $data], 200);
    }
    /**
     * @OA\Get(
     * path="/establishments/hospital/{hospitalID}/prescription/upload",
     * tags={"Prescription"},
     
     * @OA\Parameter(
     *         name="hospitalID",
     *         in="path",
     *         description="hospital  id",
     *         required=true,
     *         example="65887",
     *         @OA\Schema(type="string")
     *     ),
     * @OA\Response(
     *         response="200",
     *         description="lead detail",
     *    @OA\JsonContent(
     *       @OA\Property(property="success", type="string", example="success")
     *        )
     *     ),
     * @OA\Response(
     *         response="400",
     *         description="Error: Bad request. required parameters is not supplied.",    
     *    @OA\JsonContent(
     *       @OA\Property(property="error", type="string", example="esteblishment User Map ID not found")
     *        )
     *     ),
     * )
     */
    public function gethospitalprescriptionupload($hospitalID)
    {
        if (!isset($hospitalID)) {
            return response()->json(['status' => 'fail', 'msg' => 'esteblishment User Map ID not found'], 400);
        }
        $data = MedicineCart::where('hospital_id',$hospitalID)->get();
        return response()->json(['status' => "success", 'data' => $data], 200);
    }
    /**
     * @OA\Get(
     * path="/establishments/hospital/{hospitalID}/appointment",
     * tags={"Appointment"},
     
     * @OA\Parameter(
     *         name="hospitalID",
     *         in="path",
     *         description="hospital  id",
     *         required=true,
     *         example="65887",
     *         @OA\Schema(type="string")
     *     ),
     * @OA\Response(
     *         response="200",
     *         description="lead detail",
     *    @OA\JsonContent(
     *       @OA\Property(property="success", type="string", example="success")
     *        )
     *     ),
     * @OA\Response(
     *         response="400",
     *         description="Error: Bad request. required parameters is not supplied.",    
     *    @OA\JsonContent(
     *       @OA\Property(property="error", type="string", example="esteblishment User Map ID not found")
     *        )
     *     ),
     * )
     */
    public function gethospitalappointment($hospitalID)
    {
        if (!isset($hospitalID)) {
            return response()->json(['status' => 'fail', 'msg' => 'esteblishment User Map ID not found'], 400);
        }
        
            $unscheduletabdata = DB::table('docexa_patient_booking_details')
                ->Join('docexa_appointment_sku_details', 'docexa_patient_booking_details.booking_id', '=', 'docexa_appointment_sku_details.booking_id')
                ->Join('docexa_patient_details', 'docexa_patient_details.patient_id', '=', 'docexa_patient_booking_details.patient_id')
                ->Join('docexa_esteblishment_user_map_sku_details', 'docexa_esteblishment_user_map_sku_details.id', '=', 'docexa_appointment_sku_details.esteblishment_user_map_sku_id')
                ->Join('docexa_appointment_status_master', 'docexa_appointment_status_master.id', '=', 'docexa_patient_booking_details.status')
                ->Join('docexa_medical_establishments_medical_user_map', 'docexa_patient_booking_details.user_map_id', '=', 'docexa_medical_establishments_medical_user_map.id')
                ->Join('docexa_doctor_master', 'docexa_doctor_master.pharmaclient_id', '=', 'docexa_medical_establishments_medical_user_map.medical_user_id')
                ->select('docexa_patient_booking_details.user_map_id','docexa_doctor_master.*','docexa_patient_booking_details.age','docexa_patient_booking_details.gender','docexa_patient_booking_details.booking_id as appt_id','docexa_patient_booking_details.patient_id','docexa_patient_booking_details.payment_mode', 'docexa_patient_booking_details.cancellation_reason as reason', 'docexa_patient_booking_details.status', 'docexa_appointment_status_master.status_text', 'docexa_patient_booking_details.schedule_remark', 'docexa_appointment_sku_details.booking_type', 'docexa_esteblishment_user_map_sku_details.title', 'docexa_esteblishment_user_map_sku_details.description', 'docexa_patient_booking_details.bookingidmd5 as booking_id', 'docexa_patient_booking_details.created_date', 'docexa_patient_booking_details.date', 'docexa_patient_booking_details.start_time', 'docexa_patient_booking_details.patient_name', 'docexa_patient_booking_details.mobile_no', 'docexa_patient_booking_details.email_id as email', 'docexa_patient_booking_details.cost')
                ->selectRaw('+91 as country_code')
                ->selectRaw("concat('" . $_ENV['APP_HANDLE'] . "',docexa_medical_establishments_medical_user_map.handle) as handle")
                ->where('docexa_patient_booking_details.hospital_id', $hospitalID)
                ->where('docexa_patient_booking_details.date', null)
                ->whereIn('docexa_patient_booking_details.status', [1])
                ->where(function($query){
                    $query->whereNotNull('docexa_patient_booking_details.credit_history_id');
                    $query->orWhere('docexa_patient_booking_details.payment_mode','free');
                    $query->orWhere('docexa_patient_booking_details.payment_mode','direct');
            })
            ->latest('docexa_patient_booking_details.created_date')
                ->get();
                
            $todaystabdata = DB::table('docexa_patient_booking_details')
                ->Join('docexa_appointment_sku_details', 'docexa_patient_booking_details.booking_id', '=', 'docexa_appointment_sku_details.booking_id')
                ->Join('docexa_patient_details', 'docexa_patient_details.patient_id', '=', 'docexa_patient_booking_details.patient_id')
                ->Join('docexa_esteblishment_user_map_sku_details', 'docexa_esteblishment_user_map_sku_details.id', '=', 'docexa_appointment_sku_details.esteblishment_user_map_sku_id')
                ->Join('docexa_appointment_status_master', 'docexa_appointment_status_master.id', '=', 'docexa_patient_booking_details.status')
                ->Join('docexa_medical_establishments_medical_user_map', 'docexa_patient_booking_details.user_map_id', '=', 'docexa_medical_establishments_medical_user_map.id')
                ->Join('docexa_doctor_master', 'docexa_doctor_master.pharmaclient_id', '=', 'docexa_medical_establishments_medical_user_map.medical_user_id')
                ->select('docexa_patient_booking_details.user_map_id','docexa_doctor_master.*','docexa_patient_booking_details.age','docexa_patient_booking_details.gender','docexa_patient_booking_details.booking_id as appt_id','docexa_patient_booking_details.patient_id','docexa_patient_booking_details.payment_mode', 'docexa_patient_booking_details.cancellation_reason as reason', 'docexa_patient_booking_details.status', 'docexa_appointment_status_master.status_text', 'docexa_patient_booking_details.status', 'docexa_patient_booking_details.schedule_remark', 'docexa_appointment_sku_details.booking_type', 'docexa_esteblishment_user_map_sku_details.title', 'docexa_esteblishment_user_map_sku_details.description', 'docexa_patient_booking_details.bookingidmd5 as booking_id', 'docexa_patient_booking_details.created_date', 'docexa_patient_booking_details.date', 'docexa_patient_booking_details.start_time', 'docexa_patient_booking_details.patient_name', 'docexa_patient_booking_details.email_id as email', 'docexa_patient_booking_details.mobile_no', 'docexa_patient_booking_details.cost')
                ->selectRaw('+91 as country_code')
                ->selectRaw("concat('" . $_ENV['APP_HANDLE'] . "',docexa_medical_establishments_medical_user_map.handle) as handle")
                ->where('docexa_patient_booking_details.hospital_id', $hospitalID)
                ->where('docexa_patient_booking_details.date', '=', date('Y-m-d'))
                ->where('docexa_patient_booking_details.status', '!=', 3)
                ->where('docexa_patient_booking_details.status', '!=', 6)
                ->where('docexa_patient_booking_details.status', '!=', 4)
                ->where(function($query){
                        $query->whereNotNull('docexa_patient_booking_details.credit_history_id');
                        $query->orWhere('docexa_patient_booking_details.payment_mode','free');
                        $query->orWhere('docexa_patient_booking_details.payment_mode','direct');
                })->latest('docexa_patient_booking_details.created_date')   
                ->get();
                
            $pasttabdata = DB::table('docexa_patient_booking_details')
                ->Join('docexa_appointment_sku_details', 'docexa_patient_booking_details.booking_id', '=', 'docexa_appointment_sku_details.booking_id')
                ->Join('docexa_patient_details', 'docexa_patient_details.patient_id', '=', 'docexa_patient_booking_details.patient_id')
                ->Join('docexa_esteblishment_user_map_sku_details', 'docexa_esteblishment_user_map_sku_details.id', '=', 'docexa_appointment_sku_details.esteblishment_user_map_sku_id')
                ->Join('docexa_appointment_status_master', 'docexa_appointment_status_master.id', '=', 'docexa_patient_booking_details.status')
                ->Join('docexa_medical_establishments_medical_user_map', 'docexa_patient_booking_details.user_map_id', '=', 'docexa_medical_establishments_medical_user_map.id')
                ->Join('docexa_doctor_master', 'docexa_doctor_master.pharmaclient_id', '=', 'docexa_medical_establishments_medical_user_map.medical_user_id')
                ->select('docexa_patient_booking_details.user_map_id','docexa_doctor_master.*','docexa_patient_booking_details.age','docexa_patient_booking_details.gender','docexa_patient_booking_details.booking_id as appt_id','docexa_patient_booking_details.patient_id','docexa_patient_booking_details.payment_mode', 'docexa_patient_booking_details.cancellation_reason as reason', 'docexa_patient_booking_details.status', 'docexa_appointment_status_master.status_text', 'docexa_patient_booking_details.status', 'docexa_patient_booking_details.schedule_remark', 'docexa_appointment_sku_details.booking_type', 'docexa_esteblishment_user_map_sku_details.title', 'docexa_esteblishment_user_map_sku_details.description', 'docexa_patient_booking_details.bookingidmd5 as booking_id', 'docexa_patient_booking_details.created_date', 'docexa_patient_booking_details.date', 'docexa_patient_booking_details.start_time', 'docexa_patient_booking_details.patient_name', 'docexa_patient_booking_details.email_id as email', 'docexa_patient_booking_details.mobile_no', 'docexa_patient_booking_details.cost')
                ->selectRaw('+91 as country_code')
                ->selectRaw("concat('" . $_ENV['APP_HANDLE'] . "',docexa_medical_establishments_medical_user_map.handle) as handle")
                ->where('docexa_patient_booking_details.hospital_id', $hospitalID)
                // ->whereNotNull('docexa_patient_booking_details.date')
                ->whereIn('docexa_patient_booking_details.status', [4, 3, 6])
                ->where(function($query){
                    $query->whereNotNull('docexa_patient_booking_details.credit_history_id');
                    $query->orWhere('docexa_patient_booking_details.payment_mode','free');
                    $query->orWhere('docexa_patient_booking_details.payment_mode','direct');
            })->latest('docexa_patient_booking_details.created_date') 
            
                ->get();
                
            $upcomingtabdata = DB::table('docexa_patient_booking_details')
                ->Join('docexa_appointment_sku_details', 'docexa_patient_booking_details.booking_id', '=', 'docexa_appointment_sku_details.booking_id')
                ->Join('docexa_patient_details', 'docexa_patient_details.patient_id', '=', 'docexa_patient_booking_details.patient_id')
                ->Join('docexa_esteblishment_user_map_sku_details', 'docexa_esteblishment_user_map_sku_details.id', '=', 'docexa_appointment_sku_details.esteblishment_user_map_sku_id')
                ->Join('docexa_appointment_status_master', 'docexa_appointment_status_master.id', '=', 'docexa_patient_booking_details.status')
                ->Join('docexa_medical_establishments_medical_user_map', 'docexa_patient_booking_details.user_map_id', '=', 'docexa_medical_establishments_medical_user_map.id')
                ->Join('docexa_doctor_master', 'docexa_doctor_master.pharmaclient_id', '=', 'docexa_medical_establishments_medical_user_map.medical_user_id')
                ->select('docexa_patient_booking_details.user_map_id','docexa_doctor_master.*','docexa_patient_booking_details.age','docexa_patient_booking_details.gender','docexa_patient_booking_details.booking_id as appt_id','docexa_patient_booking_details.patient_id','docexa_patient_booking_details.payment_mode', 'docexa_patient_booking_details.cancellation_reason as reason', 'docexa_patient_booking_details.status', 'docexa_appointment_status_master.status_text', 'docexa_patient_booking_details.status', 'docexa_patient_booking_details.schedule_remark', 'docexa_appointment_sku_details.booking_type', 'docexa_esteblishment_user_map_sku_details.title', 'docexa_esteblishment_user_map_sku_details.description', 'docexa_patient_booking_details.bookingidmd5 as booking_id', 'docexa_patient_booking_details.created_date', 'docexa_patient_booking_details.date', 'docexa_patient_booking_details.start_time', 'docexa_patient_booking_details.patient_name', 'docexa_patient_booking_details.email_id as email', 'docexa_patient_booking_details.mobile_no', 'docexa_patient_booking_details.cost')
                ->selectRaw('+91 as country_code')
                ->selectRaw("concat('" . $_ENV['APP_HANDLE'] . "',docexa_medical_establishments_medical_user_map.handle) as handle")
                ->where('docexa_patient_booking_details.hospital_id', $hospitalID)
                ->whereNotNull('docexa_patient_booking_details.date')
                ->whereIn('docexa_patient_booking_details.status', [1,2, 5])
                ->where(function($query){
                    $query->whereNotNull('docexa_patient_booking_details.credit_history_id');
                    $query->orWhere('docexa_patient_booking_details.payment_mode','free');
                    $query->orWhere('docexa_patient_booking_details.payment_mode','direct');
            })->latest('docexa_patient_booking_details.created_date') 
            
                ->get();


            $response = [
                'unscheduleappointment' => $unscheduletabdata,
                'todayappointment' => $todaystabdata,
                'pastappointment' => $pasttabdata,
                'upcomingappointment' => $upcomingtabdata
            ];
        return response()->json(['status' => "success", 'data' => $response], 200);
    }
    
    
    
}
