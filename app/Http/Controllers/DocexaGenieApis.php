<?php

/**
 * Docexa Doctor Micro Service API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: satish.soni@globalspace.in
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

namespace App\Http\Controllers;

use App\AndroidDocexaGenieStrokes;
use App\AppointmentDetails;
use App\docexaGenieStrokesModel;
use App\GeniePrecriptionModel;
use Illuminate\Http\Response;
use Illuminate\Http\Request;
use App\Transcation;
use DB;
use App\Doctor;
use Illuminate\Support\Facades\Validator;
use Carbon\Carbon;
use Storage;
use GuzzleHttp\Client;
use Illuminate\Support\Facades\Mail;
use App\Notifications;
use Illuminate\Support\Facades\Http;
use MicrosoftAzure\Storage\Blob\BlobRestProxy;
use App\PrescriptionData;









use Log;

class DocexaGenieApis extends Controller
{

    /**
     * Constructor
     */
    public function __construct()
    {
    }

    // public function strokesSave(Request $request , $usermapId){
    //     try {
    //         $input = $request->all();

    //         $existingRecord = docexaGenieStrokesModel::where('user_map_id', $usermapId)->first();

    //         if ($existingRecord) {
    //             $st = new docexaGenieStrokesModel();
    //             $decodedExistingStrokes = json_decode($existingRecord->strokes, true);
    //             $decodedNewStrokes = json_decode($input['strokes'], true);

    //             $mergedStrokes = array_merge($decodedExistingStrokes, $decodedNewStrokes);

    //             $st->strokes = $decodedNewStrokes;
    //             $st->user_map_id = $usermapId;

    //         $save = $st->save();
    //         if($save){
    //             return response()->json(['status' => true, 'message' => "Strokes saved successfully" , 'code' => 200], 200);
    //         }else{
    //             return response()->json(['status' => false, 'message' => "Something went wrong" , 'code' => 400], 400);
    //         }
    //     }else{
    //         $input = $request->all();
    //         $st = new docexaGenieStrokesModel();
    //         $st->user_map_id = $usermapId;
    //         $st->strokes = $input['strokes'];             
    //         $save = $st->save();
    //         if($save){
    //             return response()->json(['status' => true, 'message' => "Strokes saved successfully" , 'code' => 200], 200);
    //         }else{
    //             return response()->json(['status' => false, 'message' => "Something went wrong" , 'code' => 400], 400);
    //         }
    //     }
    //     } catch (\Throwable $th) {
    //         Log::info(["error" => $th]);
    //         return response()->json(['status' => false, 'message' => "Internal server error" , 'code' => 500], 500);
    //     }        
    // }


    public function strokesSave(Request $request, $usermapId)
    {
        try {
            $input = $request->all();
            $decodedNewStrokes = json_decode($input['strokes'], true);

            Log::info(['decoded new strokes' => $decodedNewStrokes]);

            $existingRecord = docexaGenieStrokesModel::where('user_map_id', $usermapId)->where('patient_id', $input['patient_id'])->first();

            if ($existingRecord) {
                $decodedExistingStrokes = json_decode($existingRecord->strokes, true);
                $mergedStrokes = array_merge($decodedExistingStrokes, $decodedNewStrokes);
                $encodedMergedStrokes = json_encode($mergedStrokes);
                $existingRecord->strokes = $encodedMergedStrokes;
                $save = $existingRecord->save();
            } else {
                $encodedNewStrokes = json_encode($decodedNewStrokes);
                $st = new docexaGenieStrokesModel();
                $st->user_map_id = $usermapId;
                $st->strokes = $encodedNewStrokes;
                $st->patient_id = $input['patient_id'];
                $save = $st->save();
            }

            if ($save) {
                return response()->json(['status' => true, 'message' => "Strokes saved successfully", 'code' => 200], 200);
            } else {
                return response()->json(['status' => false, 'message' => "Something went wrong", 'code' => 400], 400);
            }
        } catch (\Throwable $th) {
            Log::info(["error" => $th]);
            return response()->json(['status' => false, 'message' => "Internal server error", 'code' => 500], 500);
        }
    }


    public function getSavedStrokes($usermapId, $patientId)
    {
        try {
            $result = docexaGenieStrokesModel::where('user_map_id', $usermapId)->where('patient_id', $patientId)->get();
            if ($result->count() > 0) {
                return response()->json(['status' => true, 'message' => "Strokes retrived successfully", 'data' => $result, 'code' => 200], 200);
            } else {
                return response()->json(['status' => false, 'message' => "No strokes found", 'code' => 200], 200);
            }
        } catch (\Throwable $th) {
            Log::info(["error" => $th]);
            return response()->json(['status' => false, 'message' => "Internal server error", 'code' => 500], 500);
        }
    }


    public function strokesSaveForAndroid(Request $request)
    {
        try {
            // $input = $request->all();
            $input = $request->all();
            Log::info(['ss', $input]);
            // $decodedNewStrokes = json_decode( $input['strokes']);
            $decodedNewStrokes = json_decode($input['strokes']);

            Log::info(['decoded new strokes' => $decodedNewStrokes]);

            $existingRecord = AndroidDocexaGenieStrokes::where('user_map_id', $input['usermapId'])->where('patient_id', $input['patient_id'])->first();

            // if ($existingRecord) {
            //     $decodedExistingStrokes = json_decode($existingRecord->strokes, true);    
            //     $mergedStrokes = array_merge($decodedExistingStrokes, $decodedNewStrokes);
            //     $encodedMergedStrokes = json_encode($mergedStrokes);
            //     $existingRecord->strokes = $encodedMergedStrokes;
            //     $save = $existingRecord->save();
            //     if ($save) {
            //         return response()->json(['status' => true, 'message' => "Strokes saved successfully", 'code' => 200], 200);
            //     } else {
            //         return response()->json(['status' => false, 'message' => "Something went wrong", 'code' => 400], 400);
            //     }
            // } else {
            //     $encodedNewStrokes = json_encode($decodedNewStrokes);
            //     $st = new AndroidDocexaGenieStrokes();
            //     $st->user_map_id = $input['usermapId'];
            //     $st->strokes = $encodedNewStrokes;
            //     $st->patient_id = $input['patient_id'];
            //     $save = $st->save();
            //     if ($save) {
            //         return response()->json(['status' => true, 'message' => "Strokes saved successfully", 'code' => 200], 200);
            //     } else {
            //         return response()->json(['status' => false, 'message' => "Something went wrong", 'code' => 400], 400);
            //     }
            // }
            $arrofdecodedNewStrokes = $decodedNewStrokes;
            foreach ($arrofdecodedNewStrokes as $strokee) {
                Log::info(['arrrstr', sizeof($arrofdecodedNewStrokes)]);
                $dotsInstroke = $strokee->dots;
                foreach ($dotsInstroke as $stroke) {
                    Log::info(['dotsInstroke', sizeof($dotsInstroke)]);
                    // Find if the page already exists for the user and patient
                    $pageExist = AndroidDocexaGenieStrokes::where('user_map_id', $input['usermapId'])
                        ->where('patient_id', $input['patient_id'])
                        ->where('pageId', $stroke->pageId)
                        ->first();

                    if ($pageExist) {
                        // Decode existing strokes from JSON to an array
                        $existingStrokes = json_decode($pageExist->strokes, true);

                        // Ensure $existingStrokes is an array
                        if (!is_array($existingStrokes)) {
                            $existingStrokes = [];
                        }

                        // Add the new stroke to the existing strokes
                        $existingStrokes[] = $strokee;

                        // Encode the updated strokes back to JSON and save
                        $pageExist->strokes = json_encode($existingStrokes);
                        $save = $pageExist->save();
                    } else {
                        // id, user_map_id, strokes, patient_id, created_at, updated_at, mac_address, sectionId, ownerId, bookId, pageId
                        // If the page does not exist, create a new record
                        $newRecord = new AndroidDocexaGenieStrokes();
                        $newRecord->user_map_id = $input['usermapId'];
                        $newRecord->patient_id = $input['patient_id'];
                        $newRecord->pageId = $stroke->pageId;
                        $newRecord->mac_address = $stroke->macAddress;
                        $newRecord->sectionId = $stroke->sectionId;
                        $newRecord->ownerId = $stroke->ownerId;
                        $newRecord->bookId = $stroke->noteId;

                        // Initialize strokes array with the new stroke
                        $newRecord->strokes = json_encode([$strokee]);
                        $save = $newRecord->save();
                    }
                }
            }
            if ($save) {
                return response()->json(['status' => true, 'message' => "Strokes saved successfully", 'code' => 200], 200);
            } else {
                return response()->json(['status' => false, 'message' => "Something went wrong", 'code' => 400], 400);
            }





        } catch (\Throwable $th) {
            Log::info(["error" => $th]);
            return response()->json(['status' => false, 'message' => "Internal server error", 'code' => 500], 500);
        }
    }

    public function getSavedStrokesfromAndroid($usermapId, $patientId, $pageId)
    {
        try {
            $result = AndroidDocexaGenieStrokes::where('user_map_id', $usermapId)->where('patient_id', $patientId)
                ->where('pageId', $pageId)->get();
            if ($result->count() > 0) {
                return response()->json(['status' => true, 'message' => "Strokes retrived successfully", 'data' => $result, 'code' => 200], 200);
            } else {
                return response()->json(['status' => false, 'message' => "No strokes found", 'code' => 200], 200);
            }
        } catch (\Throwable $th) {
            Log::info(["error" => $th]);
            return response()->json(['status' => false, 'message' => "Internal server error", 'code' => 500], 500);
        }
    }





    public function strokesSaveNew(Request $request, $usermapId)
    {
        try {
            $input = $request->all();
            $decodedNewStrokes = json_decode($input['strokes'], true);
            $existingRecord = docexaGenieStrokesModel::where('user_map_id', $usermapId)->where('patient_id', $input['patient_id'])->first();
            $existingStrokes = [];

            foreach ($decodedNewStrokes as $stroke) {
                // Find if the page already exists for the user and patient
                $pageExist = docexaGenieStrokesModel::where('user_map_id', $usermapId)
                    ->where('patient_id', $input['patient_id'])
                    ->where('pageId', $stroke['pageInfo']['page'])
                    ->first();

                if ($pageExist) {
                    // Decode existing strokes from JSON to an array
                    $existingStrokes = json_decode($pageExist->strokes, true);

                    // Ensure $existingStrokes is an array
                    if (!is_array($existingStrokes)) {
                        $existingStrokes = [];
                    }

                    // Add the new stroke to the existing strokes
                    $existingStrokes[] = $stroke;

                    // Encode the updated strokes back to JSON and save
                    $pageExist->strokes = json_encode($existingStrokes);
                    $save = $pageExist->save();
                } else {
                    // If the page does not exist, create a new record
                    $newRecord = new docexaGenieStrokesModel();
                    $newRecord->user_map_id = $usermapId;
                    $newRecord->patient_id = $input['patient_id'];
                    $newRecord->pageId = $stroke['pageInfo']['page'];

                    // Initialize strokes array with the new stroke
                    $newRecord->strokes = json_encode([$stroke]);
                    $save = $newRecord->save();
                }
            }



            if ($save) {
                return response()->json(['status' => true, 'message' => "Strokes saved successfully", 'code' => 200], 200);
            } else {
                return response()->json(['status' => false, 'message' => "Something went wrong", 'code' => 400], 400);
            }

        } catch (\Throwable $th) {
            Log::info(["error" => $th]);
            return response()->json(['status' => false, 'message' => "Internal server error", 'code' => 500, 'error' => $th], 500);
        }
    }

    public function getNewStrokes($usermapId, $patientId, $pageId)
    {
        try {
            $result = docexaGenieStrokesModel::where('user_map_id', $usermapId)
                ->where('patient_id', $patientId)
                ->where('pageId', $pageId)
                ->get();
            if ($result->count() > 0) {
                return response()->json(['status' => true, 'message' => "Strokes retrived successfully", 'data' => $result, 'code' => 200], 200);
            } else {
                return response()->json(['status' => false, 'message' => "No strokes found", 'code' => 200], 200);
            }
        } catch (\Throwable $th) {
            Log::info(["error" => $th]);
            return response()->json(['status' => false, 'message' => "Internal server error", 'code' => 500], 500);
        }
    }



    public function uploadPrescription(Request $request, $userMapId)
    {
        try {
            Log::info("Upload record");
            $req = $request->all();

            $file = $request->hasFile('upload_file');
            if ($file) {
                $alreadyExist = GeniePrecriptionModel::where('user_map_id', $userMapId)->where('pageId', $req['pageId'])->first();

                if ($alreadyExist) {
                    $file = $request->file('upload_file');
                    $FileName = $file->getClientOriginalName();
                    $extension = pathinfo($FileName, PATHINFO_EXTENSION);

                    $customFileName = 'genieprescription' . Carbon::now()->timestamp . '.' . $extension;
                    $filePath = 'genieprescription/' . $customFileName;
               

                    $connectionString = $_ENV['AZURE_STORAGE_CONNECTION_STRING'];
                    $containerName = '';

                    $blobClient = BlobRestProxy::createBlobService($connectionString);

                    $content = fopen($file->getRealPath(), 'r');
                    $blobClient->createBlockBlob($containerName, $filePath, $content);

                    $uploadedFileUrl = "https://docexa.blob.core.windows.net/{$filePath}";
                    if ($uploadedFileUrl) {
                        $filepathSaved = $uploadedFileUrl;
                        $alreadyExist->prescription_url = $filepathSaved;
                        $alreadyExist->prescription_image = base64_encode($uploadedFileUrl);
                        $alreadyExist->user_map_id = $userMapId;
                        $alreadyExist->pageId = $req['pageId'];
                        // $alreadyExist->is_update=1;

                        $save = $alreadyExist->save();

                        if ($save) {
                            return response()->json(['status' => true, 'message' => "Prescription  uploaded successfully", 'file' => $uploadedFileUrl], 200);
                        }
                    }

                } else {
                    $newPres = new GeniePrecriptionModel();
                    $file = $request->file('upload_file');
                    $FileName = $file->getClientOriginalName();

                    $extension = pathinfo($FileName, PATHINFO_EXTENSION);

                    $customFileName = 'genieprescription' . Carbon::now()->timestamp . '.' . $extension;
                    $filePath = 'genieprescription/' . $customFileName;              

                    $connectionString = $_ENV['AZURE_STORAGE_CONNECTION_STRING'];
                    $containerName = '';

                    $blobClient = BlobRestProxy::createBlobService($connectionString);

                    $content = fopen($file->getRealPath(), 'r');
                    $blobClient->createBlockBlob($containerName, $filePath, $content);

                    $uploadedFileUrl = "https://docexa.blob.core.windows.net/{$filePath}";


                    if ($uploadedFileUrl) {
                        $filepathSaved = $uploadedFileUrl;
                        $newPres->prescription_url = $uploadedFileUrl;
                        $newPres->prescription_image = base64_encode($uploadedFileUrl);
                        $newPres->user_map_id = $userMapId;
                        $newPres->pageId = $req['pageId'];
                        // $newPres->is_update=1;
                        $save = $newPres->save();

                        if ($save) {
                            return response()->json(['status' => true, 'message' => "Prescription  uploaded successfully", 'file' => $filepathSaved], 200);
                        }
                    }

                }
            }
            return response()->json(["status" => false, 'code' => 500, 'message' => "Somthing went wrong try again"], 500);

        } catch (\Throwable $th) {
            Log::error(['error' => $th]);
            return response()->json(['status' => false, 'message' => 'Internal server error', 'error' => $th->getMessage()], 500);
        }
    }


    public function getuploadPrescription($userMapId, $pageId)
    {
        try {
            $result = GeniePrecriptionModel::where('user_map_id', $userMapId)
                ->where('pageId', $pageId)
                ->first();
            if ($result) {
                // $base64 = base64_decode($result->prescription_image);
                $base64 = $result->prescription_url;
                return response()->json(['status' => true, 'message' => "Prescription retrived successfully", 'data' => $base64, 'code' => 200], 200);
            } else {
                return response()->json(['status' => false, 'message' => "no prescription found", 'code' => 200], 200);
            }
        } catch (\Throwable $th) {
            Log::info(["error" => $th]);
            return response()->json(['status' => false, 'message' => "Internal server error", 'code' => 500, "error" => $th->getMessage()], 500);
        }
    }

    public function getTotalPrescription($userMapId)
    {
        try {
            $results = GeniePrecriptionModel::where('user_map_id', $userMapId)->where('is_update', '1')->where('is_prescription_upload', '0')->where('is_offline_delete', 0)->get();
            $data = [];
            foreach ($results as $result) {
                $data[] = [
                    'id' => $result->id,
                    'prescription_url' => $result->prescription_url,
                    'patient_id' => $result->patient_id,
                    'pageId' => $result->pageId,
                    'date' => $result->updated_at,
                    'is_prescription_upload' => $result->is_prescription_upload,
                    'is_offline_delete' => $result->is_offline_delete
                ];

            }

            if ($results) {
                return response()->json(['status' => true, 'message' => "Total Prescription retrived", 'data' => $data, 'code' => 200], 200);
            }
        } catch (\Throwable $th) {
            Log::info(["error" => $th]);
            return response()->json(['status' => false, 'message' => "Internal server error", 'code' => 500, "error" => $th->getMessage()]);
        }
    }



    public function uploadOfflinePrescription(Request $request, $userMapId)
    {
        try {
            Log::info("Upload record");
            $req = $request->all();

            $file = $request->hasFile('upload_file');
            if ($file) {
                $alreadyExist = GeniePrecriptionModel::where('user_map_id', $userMapId)->where('pageId', $req['pageId'])->first();

                if ($alreadyExist) {
                    $file = $request->file('upload_file');
                    $FileName = $file->getClientOriginalName();
                    $extension = pathinfo($FileName, PATHINFO_EXTENSION);

                    $customFileName = 'genieprescription' . Carbon::now()->timestamp . '.' . $extension;
                    $filePath = 'genieprescription/' . $customFileName;
               

                    $connectionString = $_ENV['AZURE_STORAGE_CONNECTION_STRING'];
                    $containerName = '';

                    $blobClient = BlobRestProxy::createBlobService($connectionString);

                    $content = fopen($file->getRealPath(), 'r');
                    $blobClient->createBlockBlob($containerName, $filePath, $content);

                    $uploadedFileUrl = "https://docexa.blob.core.windows.net/{$filePath}";

              
                    // dd($imageData);
                    if ($uploadedFileUrl) {
                        $filepathSaved = $uploadedFileUrl;
                        $alreadyExist->prescription_url = $uploadedFileUrl;
                        $alreadyExist->prescription_image = base64_encode($uploadedFileUrl);
                        $alreadyExist->user_map_id = $userMapId;
                        $alreadyExist->pageId = $req['pageId'];
                        $alreadyExist->is_update = 1;

                        $save = $alreadyExist->save();

                        if ($save) {
                            return response()->json(['status' => true, 'message' => "Prescription  uploaded successfully", 'file' => $uploadedFileUrl], 200);
                        }
                    }

                } else {
                    $newPres = new GeniePrecriptionModel();
                    
                    $file = $request->file('upload_file');
                    $FileName = $file->getClientOriginalName();
                    $extension = pathinfo($FileName, PATHINFO_EXTENSION);

                    $customFileName = 'genieprescription' . Carbon::now()->timestamp . '.' . $extension;
                    $filePath = 'genieprescription/' . $customFileName;
               

                    $connectionString = $_ENV['AZURE_STORAGE_CONNECTION_STRING'];
                    $containerName = '';

                    $blobClient = BlobRestProxy::createBlobService($connectionString);

                    $content = fopen($file->getRealPath(), 'r');
                    $blobClient->createBlockBlob($containerName, $filePath, $content);

                    $uploadedFileUrl = "https://docexa.blob.core.windows.net/{$filePath}";

                    if ($uploadedFileUrl) {
                        $filepathSaved = $uploadedFileUrl;
                        $newPres->prescription_url = $filepathSaved;
                        $newPres->prescription_image = base64_encode($uploadedFileUrl);
                        $newPres->user_map_id = $userMapId;
                        $newPres->pageId = $req['pageId'];
                        $newPres->is_update = 1;
                        $save = $newPres->save();

                        if ($save) {
                            return response()->json(['status' => true, 'message' => "Prescription  uploaded successfully", 'file' => $uploadedFileUrl], 200);
                        }
                    }

                }
            }
            return response()->json(["status" => false, 'code' => 500, 'message' => "Somthing went wrong try again"], 500);

        } catch (\Throwable $th) {
            Log::error(['error' => $th]);
            return response()->json(['status' => false, 'message' => 'Internal server error', 'error' => $th->getMessage()], 500);
        }
    }
    public function deleteOfflinePrescription($id)
    {
        try {
            $prescription = GeniePrecriptionModel::find($id);
            if ($prescription) {
                $prescription->is_offline_delete = 1;
                $save = $prescription->save();
                if ($save) {
                    return response()->json(['status' => true, 'message' => 'prescription deleted successfully', 'code' => 200], 200);
                } else {
                    return resonse()->json(['status' => false, 'message' => 'something went wrong', 'code' => 400], 400);
                }
            } else {
                return response()->json(['status' => false, 'message' => 'id not found', 'code' => 200], 200);
            }

        } catch (\Throwable $th) {
            Log::error(['error' => $th]);
            return response()->json(['status' => false, 'message' => 'Internal server error', 'error' => $th->getMessage()], 500);
        }
    }

    public function deletedOfflinePrescription($user_map_id)
    {
        try {
            $offlineDeletedPrescription = GeniePrecriptionModel::Where('user_map_id', $user_map_id)->Where('is_offline_delete', 1)->get();
            if (count($offlineDeletedPrescription) > 0) {
                return response()->json(['status' => true, 'message' => 'data retrived successfully', 'data' => $offlineDeletedPrescription, 'code' => 200], 200);
            } else {
                return response()->json(['status' => false, 'message' => 'data not found', 'code' => 400], 400);
            }
        } catch (\Throwable $th) {
            Log::error(['error' => $th]);
            return response()->json(['status' => false, 'message' => 'Internal server error', 'error' => $th->getMessage()], 500);
        }
    }


    public function getOcrResult($operationLocation){
         
        $endpoint = "https://genieocr.cognitiveservices.azure.com";
        $apiKey = "6Tz8TJ3I337JN3bRLj2jDchK4tKPGLzBfoSvHX17HdXV0RapTyn3JQQJ99BAACuGH4FXJ3w3AAALACOGYgEe";
        $modelId = "prebuilt-idDocument";
        $apiVersion = "2024-11-30";

          $getUrlEndpoint = "{$endpoint}/documentintelligence/documentModels/{$modelId}/analyzeResults/{$operationLocation}?api-version={$apiVersion}";
               $responseOfGet = Http::withHeaders([
                    'Content-Type' => 'application/json',
                    'Ocp-Apim-Subscription-Key' => $apiKey,
                ])->get($getUrlEndpoint);
                
                Log::info(['getttt' , $responseOfGet]);

                if($responseOfGet->status() ===200){
                    return response()->json([
                        'status' => true , 
                        'message' => 'Request accepted',
                        'data' => $responseOfGet
                    ],202);
                }else{
                    return response()->json([
                        'error' => 'Failed to get result',
                        'code' => 400
                    ]);
                }
    }

public function analyzeDocument(Request $request)
{
    try {
        $endpoint = "https://genieocr.cognitiveservices.azure.com";
                $apiKey = "6Tz8TJ3I337JN3bRLj2jDchK4tKPGLzBfoSvHX17HdXV0RapTyn3JQQJ99BAACuGH4FXJ3w3AAALACOGYgEe";
                $modelId = "prebuilt-healthInsuranceCard.us";
                $apiVersion = "2024-11-30";

        $urlSource = $request->input('urlSource');
        if (!$urlSource) {
            return response()->json([
                'error' => 'Missing required parameter: urlSource',
            ], 400);
        }

        $url = "{$endpoint}/documentintelligence/documentModels/{$modelId}:analyze?api-version={$apiVersion}";

        $response = Http::withHeaders([
            'Content-Type' => 'application/json',
            'Ocp-Apim-Subscription-Key' => $apiKey,
        ])->post($url, [
            'urlSource' => $urlSource,
        ]);

        if ($response->status() === 202) {
            $operationLocation = $response->header('Operation-Location');
            if ($operationLocation) {
                $maxRetries = 5;
                $retryCount = 0;

                while ($retryCount < $maxRetries) {
                    sleep(2);
                    $responseOfGet = Http::withHeaders([
                        'Content-Type' => 'application/json',
                        'Ocp-Apim-Subscription-Key' => $apiKey,
                    ])->get($operationLocation);

                    $responseData = $responseOfGet->json();
                   Log::info(['responsedata', $responseData]);

                    if ($responseOfGet->status() === 200) {
                        if ($responseData['status'] === 'succeeded') {
                            return response()->json([
                                'status' => true,
                                'message' => 'Request completed successfully',
                                'data' => $responseData,
                            ]);
                        } elseif (in_array($responseData['status'], ['running', 'notStarted'])) {
                            $retryCount++;
                        } else {
                            return response()->json([
                                'status' => false,
                                'message' => 'Operation failed or incomplete',
                                'data' => $responseData,
                            ], 500);
                        }
                    } else {
                        return response()->json([
                            'error' => 'Failed to get result',
                            'statusCode' => $responseOfGet->status(),
                            'message' => $responseOfGet->body(),
                        ], $responseOfGet->status());
                    }
                }

                return response()->json([
                    'status' => false,
                    'message' => 'Max retries reached without completion',
                ], 408);
            } else {
                return response()->json([
                    'status' => false,
                    'message' => 'Failed to get operation location',
                ], 500);
            }
        } else {
            return response()->json([
                'error' => 'Failed to analyze document',
                'status_code' => $response->status(),
                'message' => $response->body(),
            ], $response->status());
        }
    } catch (\Throwable $th) {
        Log::error(['error' => $th]);
        return response()->json(['status' => false, 'message' => 'Internal server error', 'error' => $th->getMessage()], 500);
    }
}



public function analyzeDocumentForOfflinePrescription($url)
{
    try {
        $endpoint = "https://genieocr.cognitiveservices.azure.com";
                $apiKey = "6Tz8TJ3I337JN3bRLj2jDchK4tKPGLzBfoSvHX17HdXV0RapTyn3JQQJ99BAACuGH4FXJ3w3AAALACOGYgEe";
                $modelId = "prebuilt-healthInsuranceCard.us";
                $apiVersion = "2024-11-30";

        $urlSource = $url;
        if (!$urlSource) {
            return response()->json([
                'error' => 'Missing required parameter: urlSource',
            ], 400);
        }

        $url = "{$endpoint}/documentintelligence/documentModels/{$modelId}:analyze?api-version={$apiVersion}";

        $response = Http::withHeaders([
            'Content-Type' => 'application/json',
            'Ocp-Apim-Subscription-Key' => $apiKey,
        ])->post($url, [
            'urlSource' => $urlSource,
        ]);

        if ($response->status() === 202) {
            $operationLocation = $response->header('Operation-Location');
            if ($operationLocation) {
                $maxRetries = 5;
                $retryCount = 0;

                while ($retryCount < $maxRetries) {
                    sleep(2);
                    $responseOfGet = Http::withHeaders([
                        'Content-Type' => 'application/json',
                        'Ocp-Apim-Subscription-Key' => $apiKey,
                    ])->get($operationLocation);

                    $responseData = $responseOfGet->json();
                   Log::info(['responsedata', $responseData]);

                    if ($responseOfGet->status() === 200) {
                        if ($responseData['status'] === 'succeeded') {
                            return response()->json([
                                'status' => true,
                                'message' => 'Request completed successfully',
                                'data' => $responseData,
                            ]);
                        } elseif (in_array($responseData['status'], ['running', 'notStarted'])) {
                            $retryCount++;
                        } else {
                            return response()->json([
                                'status' => false,
                                'message' => 'Operation failed or incomplete',
                                'data' => $responseData,
                            ], 500);
                        }
                    } else {
                        return response()->json([
                            'error' => 'Failed to get result',
                            'statusCode' => $responseOfGet->status(),
                            'message' => $responseOfGet->body(),
                        ], $responseOfGet->status());
                    }
                }

                return response()->json([
                    'status' => false,
                    'message' => 'Max retries reached without completion',
                ], 408);
            } else {
                return response()->json([
                    'status' => false,
                    'message' => 'Failed to get operation location',
                ], 500);
            }
        } else {
            return response()->json([
                'error' => 'Failed to analyze document',
                'status_code' => $response->status(),
                'message' => $response->body(),
            ], $response->status());
        }
    } catch (\Throwable $th) {
        Log::error(['error' => $th]);
        return response()->json(['status' => false, 'message' => 'Internal server error', 'error' => $th->getMessage()], 500);
    }
}
public function uploadOfflinePrescriptionv5(Request $request, $userMapId)
{
    try {
        Log::info("Upload record");
        $req = $request->all();

        $file = $request->hasFile('upload_file');
        if ($file) {
            $alreadyExist = GeniePrecriptionModel::where('user_map_id', $userMapId)->where('pageId', $req['pageId'])->first();

            if ($alreadyExist) {
                $file = $request->file('upload_file');
                $FileName = $file->getClientOriginalName();
                $extension = pathinfo($FileName, PATHINFO_EXTENSION);

                $customFileName = 'genieprescription' . Carbon::now()->timestamp . '.' . $extension;
                $filePath = 'genieprescription/' . $customFileName;
           

                $connectionString = $_ENV['AZURE_STORAGE_CONNECTION_STRING'];
                $containerName = '';

                $blobClient = BlobRestProxy::createBlobService($connectionString);

                $content = fopen($file->getRealPath(), 'r');
                $blobClient->createBlockBlob($containerName, $filePath, $content);

                $uploadedFileUrl = "https://docexa.blob.core.windows.net/{$filePath}";

                if ($uploadedFileUrl) {
                    // $data =$this ->analyzeDocumentForOfflinePrescription($uploadedFileUrl);
                   
                    // dd($data);               
                    $filepathSaved = $uploadedFileUrl;
                    $alreadyExist->prescription_url = $uploadedFileUrl;
                    $alreadyExist->prescription_image = base64_encode($uploadedFileUrl);
                    $alreadyExist->user_map_id = $userMapId;
                    $alreadyExist->pageId = $req['pageId'];
                    $alreadyExist->is_update = 1;

                    $save = $alreadyExist->save();

                    if ($save) {
                        return response()->json(['status' => true, 'message' => "Prescription  uploaded successfully", 'file' => $uploadedFileUrl], 200);
                    }
                }

            } else {
                $newPres = new GeniePrecriptionModel();
                
                $file = $request->file('upload_file');
                $FileName = $file->getClientOriginalName();
                $extension = pathinfo($FileName, PATHINFO_EXTENSION);

                $customFileName = 'genieprescription' . Carbon::now()->timestamp . '.' . $extension;
                $filePath = 'genieprescription/' . $customFileName;
           

                $connectionString = $_ENV['AZURE_STORAGE_CONNECTION_STRING'];
                $containerName = '';

                $blobClient = BlobRestProxy::createBlobService($connectionString);

                $content = fopen($file->getRealPath(), 'r');
                $blobClient->createBlockBlob($containerName, $filePath, $content);

                $uploadedFileUrl = "https://docexa.blob.core.windows.net/{$filePath}";

                if ($uploadedFileUrl) {
                    $filepathSaved = $uploadedFileUrl;
                    $newPres->prescription_url = $filepathSaved;
                    $newPres->prescription_image = base64_encode($uploadedFileUrl);
                    $newPres->user_map_id = $userMapId;
                    $newPres->pageId = $req['pageId'];
                    $newPres->is_update = 1;
                    $save = $newPres->save();

                    if ($save) {
                        return response()->json(['status' => true, 'message' => "Prescription  uploaded successfully", 'file' => $uploadedFileUrl], 200);
                    }
                }

            }
        }
        return response()->json(["status" => false, 'code' => 500, 'message' => "Somthing went wrong try again"], 500);

    } catch (\Throwable $th) {
        Log::error(['error' => $th]);
        return response()->json(['status' => false, 'message' => 'Internal server error', 'error' => $th->getMessage()], 500);
    }
}
public function updateFlag($userMapId , Request $request){
    try {
        $input = $request -> all();
        $OfflinePrescription = GeniePrecriptionModel::where('user_map_id', $userMapId)->where('pageId', $input['pageId'])->first();
            if ($OfflinePrescription) {
                $OfflinePrescription->is_prescription_upload = 1;
                $OfflinePrescription->patient_id = $input['patient_id'];
               $save= $OfflinePrescription->save();
               Log::info(['updateeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee' , $save]);
               if ($save) {
                return response()->json(['status' => true, 'message' => "Flag updated successfully"],200);
            }else{
                return response()->json(['status' => false, 'message' => "Something went wrong" , 'code' =>400],400);
            }
            }else{
                return response()->json(['status' => false , 'message' => "Prescription not found" , 'code' => 200] , 200);
          }        
    } catch (\Throwable $th) {
        Log::error(['error' => $th]);
        return response()->json(['status' => false, 'message' => 'Internal server error', 'error' => $th->getMessage()], 500);
    }
}


public function saveDocexaGeniePrescriptionImage($usermapId, Request $request)
{
    try {
        $data = $request->all();

        DB::beginTransaction();
        $validator = Validator::make($data, [
            'patient_id' => 'required|integer',
            'prescription_image' => 'required'
        ]);


        if ($validator->fails()) {
            return response()->json([
                'status' => false,
                'message' => 'Validation failed',
                'errors' => $validator->errors()
            ], 422);
        }

        Log::info(['dataaaaaaaaaaaaaaa' => $data]);
        $prescription = new PrescriptionData();
        $prescription->user_map_id = $usermapId;
        $prescription->patient_id = $data['patient_id'];
        $prescription->booking_id = $data['booking_id'];

        $prescription->date = isset($data['date']) ? $data['date'] : null;
        $prescription->note = isset($data['note']) ? ($data['note'] ? $data['note'] : json_encode($data['note'])) : null;
        $prescription->complaints =isset( $data['complaints'] )?( $data['complaints']? $data['complaints'] : null) : null;
        $prescription->diagnosis =isset( $data['diagnosis']) ? ($data['diagnosis'] ? $data['diagnosis']  :null): null;
        $prescription->complaints_row = isset($data['complaints_row']) ? ($data['complaints_row'] ? $data['complaints_row'] : null) : null;
        $prescription->diagnosis_row = isset($data['diagnosis_row']) ? ($data['diagnosis_row'] ? $data['diagnosis_row'] : null) : null;
        $prescription->advice =   isset($data['advice'] )? $data['advice'] : null;
        $prescription->test_requested =isset( $data['test_requested'] )? $data['test_requested'] : null;
        $prescription->follow_up = isset($data['follow_up']) ? ($data['follow_up'] ? $data['follow_up'] : null) : null;
        $prescription->prescription_image = isset($data['prescription_image']) ? $data['prescription_image'] : "";
        $prescription->medical_history = isset($data['medical_history']) ? ($data['medical_history'] ? $data['medical_history'] : null) : null;
        $prescription->medical_history_row = isset($data['medical_history_row']) ? ($data['medical_history_row'] ? $data['medical_history_row'] : null) : null;
        $prescription->lifestyle = isset($data['lifestyle']) ? ($data['lifestyle'] ? $data['lifestyle'] : null) : null;
        $prescriptionSave = $prescription->save();
        Log::info(['save' => $prescriptionSave]);
        DB::commit();

        if ($prescriptionSave ) {      
            return response()->json(['status' =>'success' , 'message'=>'Prescription saved successfully' , 'code' => 200],200);
         } else {
            return response()->json(['status' => 'failed', 'message' => 'Failed to save prescription', 'code' => 200], 200);
        }

    } catch (\Throwable $th) {
        DB::rollBack();
        Log::info(["error" => $th]);
        return response()->json(['status' => false, 'message' => "Internal server error", 'error' => $th->getMessage()], 500);
    }

}
}