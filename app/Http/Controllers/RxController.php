<?php

/**
 * Docexa Doctor Micro Service API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: satish.soni@globalspace.in
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

namespace App\Http\Controllers;
use App\ConsultComplaintsUsermapModel;
use Carbon\Carbon;
use Log;



class RxController extends Controller
{

    /**
     * Constructor
     */
    public function __construct()
    {
    }

    public function getSymptomsnew4($usermapId){
        try {
            $data = ConsultComplaintsUsermapModel:: where('usemapid', $usermapId)->get();
            if (count($data)>0) {
                return response()->json([
                    'status' => true,
                    'message' => 'data retrived successfully',
                    'data' => $data,
                    'code' => 200
                ], 200);
            } else {
                return response()->json([
                    'status' => false,
                    'message' => 'data not found',
                    'data' => [],
                    'code' => 200
                ], 200);
            }

        } catch (\Throwable $th) {
            Log::error(['error' => $th]);
            return response()->json([
                'status' => false,
                'message' => 'Internal server error',
                'error' => $th->getMessage()
            ], 500);
        }
    }

    public function addSymptoms (Request $request)
    {
        try {
            $input = $request->all();
            $add = new ConsultComplaintsUsermapModel();
            $add->name = $input['name'];
            $add->usemapid =$input['usermapid'];
            $save = $add->save();
            if ($save) {
                return response()->json([
                    'status' => true,
                    'message' => 'data saved successfully',
                    'code' => 200
                ], 200);
            } else {
                return response()->json([
                    'status' => false,
                    'message' => 'Something went wrong',
                    'code' => 400
                ], 400);
            }

        } catch (\Throwable $th) {
            Log::error(['error' => $th]);
            return response()->json([
                'status' => false,
                'message' => 'Internal server error',
                'error' => $th->getMessage()
            ], 500);
        }
    }

}