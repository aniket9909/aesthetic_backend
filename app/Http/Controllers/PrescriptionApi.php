<?php

/**
 * Docexa Doctor Micro Service API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: satish.soni@globalspace.in
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

namespace App\Http\Controllers;

use App\ConsultComplaintsUsermapModel;
use App\DocexaVaccinationsChartModel;
use App\docexaVaccinationsChartUsermapidModel;
use App\brandModel;
use App\DrugUserMap;
use App\GeniePrecriptionModel;
use App\InvestigationTestsMaster;
use App\InvestigationTestsusermapModel;
use App\MedicalCertificateDocexaModel;
use App\MedicalRecord;
use App\OfflinePrescriptionDataModel;
use App\PatientInvestigationsModel;
use App\PrescriptionLayout;
use App\PrescriptionNotesModel;
use App\VaccinationBrandNameUsermapidModel;
use App\VaccinationDetailModel;
use App\AssistantVital;
use DB;
use Log;
use URL;
use Illuminate\Http\Response;
use Illuminate\Http\Request;
use App\PrescriptionData;
use App\PrescriptionDataTemplate;
use App\Patientmaster;
use App\Medication;
use App\MedicationTemplate;
use App\PrescriptionItems;
use App\PrescriptionItemsTemplate;
use App\AppointmentDetails;

use App\BillingModel;


use App\Systemic_examination;
use App\SystemicexaminationTemplate;
use App\User;
use App\Vital;
use App\VitalTemplate;
use App\Vitalusermap;
use App\Vitalconfig;
use \Mpdf\Mpdf;
use Illuminate\Support\Facades\View;
use SimpleSoftwareIO\QrCode\Facades\QrCode;
use App\Doctor;
use Carbon\Carbon;
use Illuminate\Support\Facades\Validator;

use function PHPUnit\Framework\isEmpty;

class PrescriptionApi extends Controller
{

    /**
     * Constructor
     */
    public function __construct() {}

    /**
     * Operation prescription 
     *
     * @param number $profile send patient id  (required)
     *
     * @return Http response
     */

    /**
     * @OA\Put(
     * path="/establishments/users/{esteblishmentusermapID}/prescription/{prescriptionID}",
     * tags={"Prescription"},
     * description="updateprescription",
     * @OA\Parameter(
     *         name="esteblishmentusermapID",
     *         in="path",
     *         description="user map ID",
     *         required=true,
     *         example=1,
     *         @OA\Schema(type="number")
     *     ),
     * @OA\Parameter(
     *         name="prescriptionID",
     *         in="path",
     *         description="prescription ID",
     *         required=true,
     *         example=1,
     *         @OA\Schema(type="number")
     *     ),
     * @OA\RequestBody(
     *  required=true,
     *  description="Pass doctor details",
     *  @OA\JsonContent(
     *      type="object",
     *                  @OA\Property(property="patient_id", type="string", format="text", example="1"),
     *                  @OA\Property(property="booking_id", type="string", format="text", example="1"),
     *                  @OA\Property(property="date", type="date", example="2022-05-10"),
     *                  @OA\Property(property="note", type="string", example="description"),
     *              @OA\Property(
     *                property="medication",
     *                type="array",
     *                @OA\Items(
     *                      @OA\Property(
     *                         property="medication_name",
     *                         type="string",
     *                         example=""
     *                      ),
     *                      @OA\Property(
     *                         property="quantity",
     *                         type="string",
     *                         example=""
     *                      ),
     *                      @OA\Property(
     *                         property="note",
     *                         type="string",
     *                         example=""
     *                      ),
     *                       @OA\Property(
     *                         property="duration",
     *                         type="string",
     *                         example=""
     *                      ),
     *                      @OA\Property(
     *                         property="doses",
     *                         type="string",
     *                         example=""
     *                      ),
     *                     @OA\Property(
     *                         property="timing",
     *                         type="string",
     *                         example=""
     *                      ),
     *                ),
     *              ),
     *              @OA\Property(
     *                property="vitals",
     *                type="array",
     *                @OA\Items(
     *                      @OA\Property(
     *                         property="vital_name",
     *                         type="string",
     *                         example=""
     *                      ),
     *                      @OA\Property(
     *                         property="vital_value",
     *                         type="string",
     *                         example=""
     *                      ),
     *                ),
     *              ),
     *              @OA\Property(
     *                property="systemic_examination",
     *                type="object",
     *                      @OA\Property(
     *                         property="cvc",
     *                         type="string",
     *                         example=""
     *                      ),
     *                      @OA\Property(
     *                         property="ent",
     *                         type="string",
     *                         example=""
     *                      ),
     *                      @OA\Property(
     *                         property="rs",
     *                         type="string",
     *                         example=""
     *                      ),
     *                       @OA\Property(
     *                         property="pa",
     *                         type="string",
     *                         example=""
     *                      ),
     *                      @OA\Property(
     *                         property="cns",
     *                         type="string",
     *                         example=""
     *                      ),
     *                     @OA\Property(
     *                         property="gen",
     *                         type="string",
     *                         example=""
     *                      ),
     *              ),
     *              @OA\Property(
     *                property="complaints",
     *                type="string",
     *                example=""
     *              ),
     *              @OA\Property(
     *                property="diagnosis",
     *                type="string",
     *                example=""
     *              ),
     *              @OA\Property(
     *                property="complaints_row",
     *                type="string",
     *                example="[{'name':'Vertigo','data':{'note':'e','days':'4 Days','severity':'moderate','title':'Vertigo','type':'symptoms','qty':null,'duration':null,'med_timing':null,'timing':null,'medicine_type':null}},{'name':'Pain'},{'name':'Body ache'},{'name':'Reduced appetite ','data':{'note':null,'days':null,'severity':null,'title':'Reduced appetite ','type':'symptoms','qty':null,'duration':null,'med_timing':null,'timing':null,'medicine_type':null}}]"
     *              ),
     *              @OA\Property(
     *                property="diagnosis_row",
     *                type="string",
     *                example="[{'name':'Covid positive','data':{'note':'sdas','days':'4 Days','severity':null,'title':'Covid positive','type':'diagnosis','qty':null,'duration':null,'med_timing':null,'timing':null,'medicine_type':null}}]"
     *              ),
     *              @OA\Property(
     *                property="advice",
     *                type="string",
     *                example=""
     *              ),
     *              @OA\Property(
     *                property="test_requested",
     *                type="string",
     *                example=""
     *              ),
     *              @OA\Property(
     *                property="follow_up",
     *                type="string",
     *                example=""
     *              ),
     * ),
     * ),
     * @OA\Response(
     *         response="200",
     * description="success",
     *    @OA\JsonContent(
     *       @OA\Property(property="success", type="string", example="success")
     *        )
     *     ),
     * @OA\Response(
     *         response="400",
     *         description="Error: Bad request. required parameters is not supplied.",    
     *    @OA\JsonContent(
     *       @OA\Property(property="error", type="string", example="ID not found")
     *        )
     *     ),
     * )
     */
    public function updatePrescription($esteblishmentusermapID, $prescriptionID, Request $request)
    {

        $data = $request->all();
        $prescription = PrescriptionData::find($prescriptionID);
        $prescription->user_map_id = $esteblishmentusermapID;
        $prescription->patient_id = $data['patient_id'];
        $prescription->booking_id = $data['booking_id'];
        $prescription->date = $data['date'];
        $prescription->note = $data['note'];
        $prescription->complaints = $data['complaints'];
        $prescription->diagnosis = $data['diagnosis'];
        $prescription->complaints_row = isset($data['complaints_row']) ? $data['complaints_row'] : null;
        $prescription->diagnosis_row = isset($data['diagnosis_row']) ? $data['diagnosis_row'] : null;
        $prescription->advice = $data['advice'];
        $prescription->test_requested = $data['test_requested'];
        $prescription->follow_up = $data['follow_up'];
        $prescription->save();

        $medications = $data['medication'];
        foreach ($medications as $med):

            $medication = new Medication();
            $medication->medication_name = $med['medication_name'];
            $medication->note = isset($med['note']) ? $med['note'] : null;
            $medication->durationValidity = isset($med['durationValidity']) ? $med['durationValidity'] : null;
            $medication->save();

            $pres = PrescriptionItems::where('prescription_id', $prescription->id)->first();
            $pres_item = isset($pres->id) ? $pres : (new PrescriptionItems());
            $pres_item->prescription_id = $prescription->id;
            $pres_item->medication_id = $medication->id;
            $pres_item->quantity = isset($med['quantity']) ? $med['quantity'] : null;
            $pres_item->duration = isset($med['duration']) ? $med['duration'] : null;
            $pres_item->doses = isset($med['doses']) ? $med['doses'] : null;
            $pres_item->timing = isset($med['timing']) ? $med['timing'] : null;
            $pres_item->note = isset($med['note']) ? $med['note'] : null;
            $pres_item->save();

        endforeach;
        $vitals = $data['vitals'];

        foreach ($vitals as $v):
            $vital = new Vital();
            $vital->vital_name = isset($v['vital_name']) ? $v['vital_name'] : null;
            $vital->value = isset($v['vital_value']) ? $v['vital_value'] : null;
            $vital->prescription_id = $prescription->id;
            $vital->created_by = isset($vitals['created_by']) ? $vitals['created_by'] : null;
            $vital->save();
        endforeach;


        $systemic_examinations = $data['systemic_examination'];
        $systemic = Systemic_examination::where('prescription_id', $prescriptionID)->first();
        $systemic_examination = isset($systemic->id) ? $systemic : (new Systemic_examination());
        $systemic_examination->cvc = isset($systemic_examinations['cvc']) ? $systemic_examinations['cvc'] : null;
        $systemic_examination->ent = isset($systemic_examinations['ent']) ? $systemic_examinations['ent'] : null;
        $systemic_examination->rs = isset($systemic_examinations['rs']) ? $systemic_examinations['rs'] : null;
        $systemic_examination->pa = isset($systemic_examinations['pa']) ? $systemic_examinations['pa'] : null;
        $systemic_examination->cns = isset($systemic_examinations['cns']) ? $systemic_examinations['cns'] : null;
        $systemic_examination->gen = isset($systemic_examinations['gen']) ? $systemic_examinations['gen'] : null;
        $systemic_examination->prescription_id = $prescription->id;
        $systemic_examination->save();


        return $this->getPrescription($esteblishmentusermapID, $prescription->id);
    }
    /**
     * Operation prescription 
     *
     * @param number $profile send patient id  (required)
     *
     * @return Http response
     */

    /**
     * @OA\Post(
     * path="/establishments/users/{esteblishmentusermapID}/prescription",
     * tags={"Prescription"},
     * description="prescription",
     * @OA\Parameter(
     *         name="esteblishmentusermapID",
     *         in="path",
     *         description="user map ID",
     *         required=true,
     *         example=1,
     *         @OA\Schema(type="number")
     *     ),
     * @OA\RequestBody(
     *  required=true,
     *  description="Pass doctor details",
     *  @OA\JsonContent(
     *      type="object",
     *                  @OA\Property(property="patient_id", type="string", format="text", example="1"),
     *                  @OA\Property(property="booking_id", type="string", format="text", example="1"),
     *                  @OA\Property(property="date", type="date", example="2022-05-10"),
     *                  @OA\Property(property="note", type="string", example="description"),
     *              @OA\Property(
     *                property="medication",
     *                type="array",
     *                @OA\Items(
     *                      @OA\Property(
     *                         property="medication_name",
     *                         type="string",
     *                         example=""
     *                      ),
     *                      @OA\Property(
     *                         property="quantity",
     *                         type="string",
     *                         example=""
     *                      ),
     *                      @OA\Property(
     *                         property="note",
     *                         type="string",
     *                         example=""
     *                      ),
     *                       @OA\Property(
     *                         property="duration",
     *                         type="string",
     *                         example=""
     *                      ),
     *                      @OA\Property(
     *                         property="doses",
     *                         type="string",
     *                         example=""
     *                      ),
     *                     @OA\Property(
     *                         property="timing",
     *                         type="string",
     *                         example=""
     *                      ),
     *                ),
     *              ),
     *              @OA\Property(
     *                property="vitals",
     *                type="object",
     *                      @OA\Property(
     *                         property="sugar",
     *                         type="string",
     *                         example=""
     *                      ),
     *                      @OA\Property(
     *                         property="bp",
     *                         type="string",
     *                         example=""
     *                      ),
     *                      @OA\Property(
     *                         property="insuline",
     *                         type="string",
     *                         example=""
     *                      ),
     *                      @OA\Property(
     *                         property="pulse",
     *                         type="string",
     *                         example=""
     *                      ),
     *                      @OA\Property(
     *                         property="weight",
     *                         type="string",
     *                         example=""
     *                      ),
     *                      @OA\Property(
     *                         property="height",
     *                         type="string",
     *                         example=""
     *                      ),
     *                      @OA\Property(
     *                         property="bmi",
     *                         type="string",
     *                         example=""
     *                      ),
     *                      @OA\Property(
     *                         property="rbs",
     *                         type="string",
     *                         example=""
     *                      ),
     *                      @OA\Property(
     *                         property="fbs",
     *                         type="string",
     *                         example=""
     *                      ),
     *                      @OA\Property(
     *                         property="hba1c",
     *                         type="string",
     *                         example=""
     *                      ),
     *                      @OA\Property(
     *                         property="temperature",
     *                         type="string",
     *                         example=""
     *                      ),
     *                      @OA\Property(
     *                         property="spo2",
     *                         type="string",
     *                         example=""
     *                      ),
     *                      @OA\Property(
     *                         property="sample_date",
     *                         type="string",
     *                         example=""
     *                      ),
     *                       @OA\Property(
     *                         property="description",
     *                         type="string",
     *                         example=""
     *                      ),
     *                       @OA\Property(
     *                         property="created_by",
     *                         type="string",
     *                         example="doctor"
     *                      ),
     *              ),
     *              @OA\Property(
     *                property="systemic_examination",
     *                type="object",
     *                      @OA\Property(
     *                         property="cvc",
     *                         type="string",
     *                         example=""
     *                      ),
     *                      @OA\Property(
     *                         property="ent",
     *                         type="string",
     *                         example=""
     *                      ),
     *                      @OA\Property(
     *                         property="rs",
     *                         type="string",
     *                         example=""
     *                      ),
     *                       @OA\Property(
     *                         property="pa",
     *                         type="string",
     *                         example=""
     *                      ),
     *                      @OA\Property(
     *                         property="cns",
     *                         type="string",
     *                         example=""
     *                      ),
     *                     @OA\Property(
     *                         property="gen",
     *                         type="string",
     *                         example=""
     *                      ),
     *              ),
     *              @OA\Property(
     *                property="complaints",
     *                type="string",
     *                example=""
     *              ),
     *              @OA\Property(
     *                property="diagnosis",
     *                type="string",
     *                example=""
     *              ),
     * 
     *              @OA\Property(
     *                property="complaints_row",
     *                type="string",
     *                example="[{'name':'Vertigo','data':{'note':'e','days':'4 Days','severity':'moderate','title':'Vertigo','type':'symptoms','qty':null,'duration':null,'med_timing':null,'timing':null,'medicine_type':null}},{'name':'Pain'},{'name':'Body ache'},{'name':'Reduced appetite ','data':{'note':null,'days':null,'severity':null,'title':'Reduced appetite ','type':'symptoms','qty':null,'duration':null,'med_timing':null,'timing':null,'medicine_type':null}}]"
     *              ),
     *              @OA\Property(
     *                property="diagnosis_row",
     *                type="string",
     *                example="[{'name':'Covid positive','data':{'note':'sdas','days':'4 Days','severity':null,'title':'Covid positive','type':'diagnosis','qty':null,'duration':null,'med_timing':null,'timing':null,'medicine_type':null}}]"
     *              ),
     *              @OA\Property(
     *                property="advice",
     *                type="string",
     *                example=""
     *              ),
     *              @OA\Property(
     *                property="test_requested",
     *                type="string",
     *                example=""
     *              ),
     *              @OA\Property(
     *                property="follow_up",
     *                type="string",
     *                example=""
     *              ),
     *              @OA\Property(
     *                property="prescription_image",
     *                type="string",
     *                example=""
     *              ),
     * ),
     * ),
     * @OA\Response(
     *         response="200",
     * description="success",
     *    @OA\JsonContent(
     *       @OA\Property(property="success", type="string", example="success")
     *        )
     *     ),
     * @OA\Response(
     *         response="400",
     *         description="Error: Bad request. required parameters is not supplied.",    
     *    @OA\JsonContent(
     *       @OA\Property(property="error", type="string", example="ID not found")
     *        )
     *     ),
     * )
     */
    public function savePrescription($esteblishmentusermapID, Request $request)
    {
        try {

            $data = $request->all();
            Log::info(['dataaaaaaaaaaaaaaa' => $data]);
            $vitals = $data['vitals'];
            // Log::info(['vitalssssss' => $vitals , 'npote' =>  $data['note'] , 'image' => json_encode($data['prescription_image'])]);
            $prescription = new PrescriptionData();
            $prescription->user_map_id = $esteblishmentusermapID;
            $prescription->patient_id = $data['patient_id'];
            $prescription->booking_id = $data['booking_id'];
            $prescription->date = $data['date'];
            $prescription->note = isset($data['note']) ? ($data['note']) : null;
            $prescription->complaints = $data['complaints'];
            $prescription->diagnosis = $data['diagnosis'];
            $prescription->complaints_row = isset($data['complaints_row']) ? ($data['complaints_row']) : null;
            $prescription->diagnosis_row = isset($data['diagnosis_row']) ? ($data['diagnosis_row']) : null;
            $prescription->advice = $data['advice'];
            $prescription->test_requested = $data['test_requested'];
            $prescription->follow_up = isset($data['follow_up']) ? ($data['follow_up']) : null;
            $prescription->prescription_image = isset($data['prescription_image']) ? $data['prescription_image'] : "";

            $prescription->medical_history = isset($data['medical_history']) ? ($data['medical_history']) : null;
            $prescription->lifestyle = isset($data['lifestyle']) ? ($data['lifestyle']) : null;
            $save = $prescription->save();
            Log::info(['save' => $save]);
            $medications = $data['medication'];
            if ($medications) {
                foreach ($medications as $med):

                    $medication = new Medication();
                    $medication->medication_name = $med['medication_name'];
                    $medication->note = isset($med['note']) ? $med['note'] : null;
                    $medication->durationValidity = isset($med['durationValidity']) ? $med['durationValidity'] : null;
                    $medication->save();

                    $pres_item = new PrescriptionItems();
                    $pres_item->prescription_id = $prescription->id;
                    $pres_item->medication_id = $medication->id;
                    $pres_item->quantity = isset($med['quantity']) ? $med['quantity'] : null;
                    $pres_item->duration = isset($med['duration']) ? $med['duration'] : null;
                    $pres_item->doses = isset($med['doses']) ? $med['doses'] : null;
                    $pres_item->timing = isset($med['timing']) ? $med['timing'] : null;
                    $pres_item->note = isset($med['note']) ? $med['note'] : null;
                    $pres_item->save();

                endforeach;
            }

            $vitals = $data['vitals'];
            Log::info(['vitalssssss' => $vitals]);
            if ($vitals) {
                foreach ($vitals as $value) {

                    $vital = new Vital();
                    Log::info(['value[name]' => $value['name']]);
                    $vital->sugar = isset($value['sugar']) ? $value['sugar'] : null;
                    $vital->bp = isset($value['bp']) ? $value['bp'] : null;
                    $vital->insuline = isset($value['insuline']) ? $value['insuline'] : null;
                    $vital->pulse = isset($value['pulse']) ? $value['pulse'] : null;
                    $vital->weight = isset($value['weight']) ? $value['weight'] : null;
                    $vital->height = isset($value['height']) ? $value['height'] : null;
                    $vital->bmi = isset($value['bmi']) ? $value['bmi'] : null;
                    $vital->rbs = isset($value['fbs']) ? $value['fbs'] : null;
                    $vital->fbs = isset($value['fbs']) ? $value['fbs'] : null;
                    $vital->hba1c = isset($value['hba1c']) ? $value['hba1c'] : null;
                    $vital->sugar = isset($value['sugar']) ? $value['sugar'] : null;
                    $vital->temperature = isset($value['temperature']) ? $value['temperature'] : null;
                    $vital->spo2 = isset($value['spo2']) ? $value['spo2'] : null;
                    $vital->sample_date = isset($value['sample_date']) ? $value['sample_date'] : null;
                    $vital->description = isset($value['description']) ? $value['description'] : null;
                    $vital->prescription_id = $prescription->id;
                    $vital->vital_name = isset($value['name']) ? $value['name'] : null;

                    $vital->value = isset($value['data']['vitals']) . $value['unit'] ? $value['data']['vitals'] . " " . $value['unit'] : null;
                    $vital->created_by = isset($value['created_by']) ? $value['created_by'] : null;
                    $valuesave = $vital->save();
                    Log::info(['valueave' => $valuesave]);
                }
            }


            $systemic_examinations = $data['systemic_examination'];
            $systemic_examination = new Systemic_examination();
            $systemic_examination->cvc = isset($systemic_examinations['cvc']) ? $systemic_examinations['cvc'] : null;
            $systemic_examination->ent = isset($systemic_examinations['ent']) ? $systemic_examinations['ent'] : null;
            $systemic_examination->rs = isset($systemic_examinations['rs']) ? $systemic_examinations['rs'] : null;
            $systemic_examination->pa = isset($systemic_examinations['pa']) ? $systemic_examinations['pa'] : null;
            $systemic_examination->cns = isset($systemic_examinations['cns']) ? $systemic_examinations['cns'] : null;
            $systemic_examination->gen = isset($systemic_examinations['gen']) ? $systemic_examinations['gen'] : null;
            $systemic_examination->prescription_id = $prescription->id;
            $systemic_examination->save();


            return $this->getPrescription($esteblishmentusermapID, $prescription->id);
        } catch (\Throwable $th) {
            Log::error(['errorr' => $th]);
        }
    }




    public function savePrescriptionV4($esteblishmentusermapID, Request $request)
    {
        try {
            $data = $request->all();

            DB::beginTransaction();
            // $validator = Validator::make($data, [
            //     'patient_id' => 'required|integer',
            //     'medication' => 'required|array|min:1',
            // ]);


            // if ($validator->fails()) {
            //     return response()->json([
            //         'status' => false,
            //         'message' => 'Validation failed',
            //         'errors' => $validator->errors()
            //     ], 422);
            // }

            Log::info(['dataaaaaaaaaaaaaaa' => $data]);
            $vitals = $data['vitals'];
            $prescription = new PrescriptionData();
            $prescription->user_map_id = $esteblishmentusermapID;
            $prescription->patient_id = $data['patient_id'];
            $prescription->booking_id = $data['booking_id'];

            $prescription->date = Carbon::parse($data['date'])->toDateTimeString();
            $prescription->note = isset($data['note']) ? ($data['note'] ? $data['note'] : json_encode($data['note'])) : null;
            $prescription->complaints = isset($data['complaints']) ? ($data['complaints'] ? $data['complaints'] : null) : null;
            $prescription->diagnosis = isset($data['diagnosis']) ? ($data['diagnosis'] ? $data['diagnosis'] : null) : null;
            $prescription->complaints_row = isset($data['complaints_row']) ? ($data['complaints_row'] ? $data['complaints_row'] : null) : null;
            $prescription->diagnosis_row = isset($data['diagnosis_row']) ? ($data['diagnosis_row'] ? $data['diagnosis_row'] : null) : null;
            $prescription->advice = $data['advice'] ? $data['advice'] : null;
            $prescription->test_requested = $data['test_requested'] ? $data['test_requested'] : null;
            $prescription->follow_up = isset($data['follow_up']) ? ($data['follow_up'] ? $data['follow_up'] : null) : null;
            $prescription->prescription_image = isset($data['prescription_image']) ? $data['prescription_image'] : "";
            $prescription->medical_history = isset($data['medical_history']) ? ($data['medical_history'] ? $data['medical_history'] : null) : null;
            $prescription->medical_history_row = isset($data['medical_history_row']) ? ($data['medical_history_row'] ? $data['medical_history_row'] : null) : null;
            $prescription->lifestyle = isset($data['lifestyle']) ? ($data['lifestyle'] ? $data['lifestyle'] : null) : null;
            $prescriptionSave = $prescription->save();
            Log::info(['save' => $prescriptionSave]);

            $medications = $data['medication'];

            if ($medications) {
                foreach ($medications as $med):
                    $medication = new Medication();
                    $existmedicineinmaster = Medication::where('medication_name', $med['medication_name'])->first();
                    if ($existmedicineinmaster) {
                        $medicationId = $existmedicineinmaster->id;
                        $medication->note = isset($med['note']) ? $med['note'] : null;
                        $medication->durationValidity = isset($med['durationValidity']) ? $med['durationValidity'] : null;
                        $existmedicineinmaster->medication_type = isset($med['medication_type']) ? $med['medication_type'] : null;
                        $existmedicineinmaster->save();
                    } else {
                        $medication->medication_name = $med['medication_name'];
                        $medication->note = isset($med['note']) ? $med['note'] : null;
                        $medication->durationValidity = isset($med['durationValidity']) ? $med['durationValidity'] : null;
                        $medication->medication_type = isset($med['medication_type']) ? $med['medication_type'] : null;
                        $medication->save();
                        $medicationId = $medication->id;
                    }

                    Log::info('addddd usermap drug list');
                    // id, user_map_id, medicine_name, medicine_type, content, manufacturer_name, created_at, updated_at
                    if (isset($med['isMasterData'])) {
                        if ($med['isMasterData']) {
                            $medicationWRTusermap = new DrugUserMap();
                            $medicationWRTusermap->user_map_id = $esteblishmentusermapID;
                            $medicationWRTusermap->medicine_name = $med['medication_name'];
                            $medicationWRTusermap->medicine_type = isset($med['medication_type']) ? $med['medication_type'] : null;
                            $save = $medicationWRTusermap->save();
                            Log::info(['saveeeeeeeeeeeeeeee', $save]);
                        }
                    }

                    $pres_item = new PrescriptionItems();
                    $pres_item->prescription_id = $prescription->id;
                    // $pres_item->medication_id = $medication->id;
                    $pres_item->medication_id = $medicationId;
                    $pres_item->quantity = isset($med['quantity']) ? $med['quantity'] : null;
                    $pres_item->duration = isset($med['duration']) ? $med['duration'] : null;
                    $pres_item->doses = isset($med['doses']) ? $med['doses'] : null;
                    $pres_item->timing = isset($med['timing']) ? $med['timing'] : null;
                    $pres_item->note = isset($med['note']) ? $med['note'] : null;
                    $medicationsave = $pres_item->save();

                endforeach;
            }
            // id, vaccine_name, vaccine_date, due_date, flag, brand_name, given_date, created_at, updated_at, prescription_id




            $vaccination_details = $data['vaccination_details'];
            Log::info(['vaccination_deatails' => $vaccination_details]);
            if ($vaccination_details) {
                foreach ($vaccination_details as $vaccine_detail) {
                    $vaccine_exist = VaccinationDetailModel::where('patient_id', $data['patient_id'])->where('vaccine_name', $vaccine_detail['vaccine_name'])->first();
                    Log::Info(['vaccine_existgiv', $vaccine_exist]);
                    if ($vaccine_exist) {
                        $vaccine_exist->prescription_id = $prescription->id;
                        $vaccinationGivenSave = $vaccine_exist->save();
                        Log::info(['vaccine_save', $vaccinationGivenSave]);

                        // $time = DB::table('docexa_vaccinations_chart')->where('types', $vaccine_detail['vaccine_name'])->first()->time;
                        // $groupedVaccines = DB::table('vaccine_brand_groups')
                        //     ->where('brand_name', $vaccine_exist->brand_name)
                        //     // ->where('vaccine_name' , $data['vaccine_name'])
                        //     ->where('time_slot', $time)
                        //     ->get(['vaccine_name', 'vaccine_category']);
                        // Log::info(['count($groupedVaccines)>0', count($groupedVaccines)]);
                        // if (count($groupedVaccines) > 0) {
                        //     foreach ($groupedVaccines as $grouped) {
                        //         $vaccineName = $grouped->vaccine_name;
                        //         $vaccineCategory = $grouped->vaccine_category;

                        //         $vaccine_group_exist = VaccinationDetailModel::where('patient_id', $data['patient_id'])->where('vaccine_name', $vaccineName)->first();
                        //         Log::Info(['vaccine_existgiv', $vaccine_exist]);
                        //         $vaccine_group_exist->prescription_id = $prescription->id;
                        //         $vaccinationGivenSave = $vaccine_group_exist->save();
                        //     }
                        // }

                    }
                }
            }

            $vaccination_due = isset($data['vaccination_due']) ? $data['vaccination_due'] : null;
            if ($vaccination_due) {
                foreach ($vaccination_due as $vaccine_detail) {
                    $vaccine_exist = VaccinationDetailModel::where('patient_id', $data['patient_id'])->where('vaccine_name', $vaccine_detail['due_vaccine_name'])->first();
                    Log::Info(['vaccine_existdue', $vaccine_exist]);
                    if ($vaccine_exist) {
                        $vaccine_exist->prescription_id = $prescription->id;
                        $vaccinationdueSave = $vaccine_exist->save();
                        Log::info(['vaccine_due_save', $vaccinationdueSave]);
                    }
                }
            }

            $billingCreation = isset($data['billing_data']) ? $data['billing_data'] : null;
            Log::info(['billingCreation', $billingCreation]);
            if ($billingCreation) {
                $Invoice = new BillingModel();
                $Invoice->clinic_id = isset($billingCreation['clinic_id']) ? $billingCreation['clinic_id'] : null;
                $Invoice->patient_id = isset($data['patient_id']) ? $data['patient_id'] : null;
                $Invoice->usermap_id = $esteblishmentusermapID;
                $Invoice->appointment_id = isset($billingCreation['appointment_id']) ? $billingCreation['appointment_id'] : null;
                $Invoice->mode_of_payment = isset($billingCreation['mode_of_payment']) ? $billingCreation['mode_of_payment'] : null;
                $Invoice->paid_amount = isset($billingCreation['paid_amount']) ? $billingCreation['paid_amount'] : null;
                $Invoice->total_price = isset($billingCreation['total_price']) ? $billingCreation['total_price'] : null;
                $Invoice->bill_no = isset($billingCreation['bill_no']) ? $billingCreation['bill_no'] : null;
                $Invoice->receipt_no = isset($billingCreation['receipt_no']) ? $billingCreation['receipt_no'] : null;;
                $Invoice->prescription_id = $prescription->id;
                $Invoice->items = json_encode($billingCreation['items']);
                $totalPrice = 0;
                foreach ($billingCreation['items'] as $item) {
                    $totalPrice += $item['item_price'];
                }
                $Invoice->balanced_amount = $billingCreation['total_price'] - $billingCreation['paid_amount'];
                $billingSave = $Invoice->save();
                Log::info(['billingsave' => $billingSave]);
            }

            $vitals = $data['vitals'];
            Log::info(['vitalssssss' => $vitals]);
            if ($vitals) {
                foreach ($vitals as $value) {
                    $vital = new Vital();
                    $vitaldata = isset($value['data']['vitals']);
                    if ($vitaldata) {
                        // Log::info(['value[name]' => $value['name']]);
                        $vital->sugar = isset($value['sugar']) ? $value['sugar'] : null;
                        $vital->bp = isset($value['bp']) ? $value['bp'] : null;
                        $vital->insuline = isset($value['insuline']) ? $value['insuline'] : null;
                        $vital->pulse = isset($value['pulse']) ? $value['pulse'] : null;
                        $vital->weight = isset($value['weight']) ? $value['weight'] : null;
                        $vital->height = isset($value['height']) ? $value['height'] : null;
                        $vital->bmi = isset($value['bmi']) ? $value['bmi'] : null;
                        $vital->rbs = isset($value['fbs']) ? $value['fbs'] : null;
                        $vital->fbs = isset($value['fbs']) ? $value['fbs'] : null;
                        $vital->hba1c = isset($value['hba1c']) ? $value['hba1c'] : null;
                        $vital->sugar = isset($value['sugar']) ? $value['sugar'] : null;
                        $vital->temperature = isset($value['temperature']) ? $value['temperature'] : null;
                        $vital->spo2 = isset($value['spo2']) ? $value['spo2'] : null;
                        $vital->sample_date = isset($value['sample_date']) ? $value['sample_date'] : null;
                        $vital->description = isset($value['description']) ? $value['description'] : null;
                        $vital->prescription_id = $prescription->id;
                        $vital->vital_name = isset($value['name']) ? $value['name'] : null;
                        $vital->value = isset($value['data']['vitals']) ? $value['data']['vitals'] . " " . $value['unit'] : null;
                        $vital->created_by = isset($value['created_by']) ? $value['created_by'] : null;
                        $valuesave = $vital->save();
                        Log::info(['valueave' => $valuesave]);
                    }
                }
            }


            $systemic_examinations = isset($data['systemic_examination']) ? $data['systemic_examination'] : null;
            $systemic_examination = new Systemic_examination();
            $systemic_examination->cvc = isset($systemic_examinations['cvc']) ? $systemic_examinations['cvc'] : null;
            $systemic_examination->ent = isset($systemic_examinations['ent']) ? $systemic_examinations['ent'] : null;
            $systemic_examination->rs = isset($systemic_examinations['rs']) ? $systemic_examinations['rs'] : null;
            $systemic_examination->pa = isset($systemic_examinations['pa']) ? $systemic_examinations['pa'] : null;
            $systemic_examination->cns = isset($systemic_examinations['cns']) ? $systemic_examinations['cns'] : null;
            $systemic_examination->gen = isset($systemic_examinations['gen']) ? $systemic_examinations['gen'] : null;
            $systemic_examination->prescription_id = $prescription->id;
            $save = $systemic_examination->save();


            //start service store 
            if (!isEmpty($data['services']) && count($data['services']) > 0) {
                
            } else {
            }

            DB::commit();

            if ($prescriptionSave) {
                return $this->getPrescription($esteblishmentusermapID, $prescription->id);
            } else {
                return response()->json(['status' => 'failed', 'message' => 'Failed to save prescription', 'code' => 200], 200);
            }
        } catch (\Throwable $th) {
            DB::rollBack();
            Log::info(["error" => $th]);
            return response()->json(['status' => false, 'message' => "Internal server error", 'error' => $th->getMessage()], 500);
        }
    }

    /**
     * @OA\Post(
     * path="/establishments/users/{esteblishmentusermapID}/prescriptionTemplate",
     * tags={"Prescription"},
     * description="prescription",
     * @OA\Parameter(
     *         name="esteblishmentusermapID",
     *         in="path",
     *         description="user map ID",
     *         required=true,
     *         example=1,
     *         @OA\Schema(type="number")
     *     ),
     * @OA\RequestBody(
     *  required=true,
     *  description="Pass doctor details",
     *  @OA\JsonContent(
     *      type="object",
     *                  @OA\Property(property="template_name", type="string", format="text", example="for x drug"),
     *                  @OA\Property(property="patient_id", type="string", format="text", example="1"),
     *                  @OA\Property(property="booking_id", type="string", format="text", example="1"),
     *                  @OA\Property(property="date", type="date", example="2022-05-10"),
     *                  @OA\Property(property="note", type="string", example="description"),
     *              @OA\Property(
     *                property="medication",
     *                type="array",
     *                @OA\Items(
     *                      @OA\Property(
     *                         property="medication_name",
     *                         type="string",
     *                         example=""
     *                      ),
     *                      @OA\Property(
     *                         property="quantity",
     *                         type="string",
     *                         example=""
     *                      ),
     *                      @OA\Property(
     *                         property="note",
     *                         type="string",
     *                         example=""
     *                      ),
     *                       @OA\Property(
     *                         property="duration",
     *                         type="string",
     *                         example=""
     *                      ),
     *                      @OA\Property(
     *                         property="doses",
     *                         type="string",
     *                         example=""
     *                      ),
     *                     @OA\Property(
     *                         property="timing",
     *                         type="string",
     *                         example=""
     *                      ),
     *                ),
     *              ),
     *               @OA\Property(
     *                property="vitals",
     *                type="array",
     *                @OA\Items(
     *                      @OA\Property(
     *                         property="vital_name",
     *                         type="string",
     *                         example=""
     *                      ),
     *                      @OA\Property(
     *                         property="vital_value",
     *                         type="string",
     *                         example=""
     *                      ),
     *                ),
     *              ),
     *              @OA\Property(
     *                property="systemic_examination",
     *                type="object",
     *                      @OA\Property(
     *                         property="cvc",
     *                         type="string",
     *                         example=""
     *                      ),
     *                      @OA\Property(
     *                         property="ent",
     *                         type="string",
     *                         example=""
     *                      ),
     *                      @OA\Property(
     *                         property="rs",
     *                         type="string",
     *                         example=""
     *                      ),
     *                       @OA\Property(
     *                         property="pa",
     *                         type="string",
     *                         example=""
     *                      ),
     *                      @OA\Property(
     *                         property="cns",
     *                         type="string",
     *                         example=""
     *                      ),
     *                     @OA\Property(
     *                         property="gen",
     *                         type="string",
     *                         example=""
     *                      ),
     *              ),
     *              @OA\Property(
     *                property="complaints",
     *                type="string",
     *                example=""
     *              ),
     *              @OA\Property(
     *                property="diagnosis",
     *                type="string",
     *                example=""
     *              ),
     * 
     *              @OA\Property(
     *                property="complaints_row",
     *                type="string",
     *                example="[{'name':'Vertigo','data':{'note':'e','days':'4 Days','severity':'moderate','title':'Vertigo','type':'symptoms','qty':null,'duration':null,'med_timing':null,'timing':null,'medicine_type':null}},{'name':'Pain'},{'name':'Body ache'},{'name':'Reduced appetite ','data':{'note':null,'days':null,'severity':null,'title':'Reduced appetite ','type':'symptoms','qty':null,'duration':null,'med_timing':null,'timing':null,'medicine_type':null}}]"
     *              ),
     *              @OA\Property(
     *                property="diagnosis_row",
     *                type="string",
     *                example="[{'name':'Covid positive','data':{'note':'sdas','days':'4 Days','severity':null,'title':'Covid positive','type':'diagnosis','qty':null,'duration':null,'med_timing':null,'timing':null,'medicine_type':null}}]"
     *              ),
     *              @OA\Property(
     *                property="advice",
     *                type="string",
     *                example=""
     *              ),
     *              @OA\Property(
     *                property="test_requested",
     *                type="string",
     *                example=""
     *              ),
     *              @OA\Property(
     *                property="follow_up",
     *                type="string",
     *                example=""
     *              ),
     * ),
     * ),
     * @OA\Response(
     *         response="200",
     * description="success",
     *    @OA\JsonContent(
     *       @OA\Property(property="success", type="string", example="success")
     *        )
     *     ),
     * @OA\Response(
     *         response="400",
     *         description="Error: Bad request. required parameters is not supplied.",    
     *    @OA\JsonContent(
     *       @OA\Property(property="error", type="string", example="ID not found")
     *        )
     *     ),
     * )
     */
    public function savePrescriptionTemplate($esteblishmentusermapID, Request $request)
    {

        $data = $request->all();
        Log::info([$data]);
        $prescription = new PrescriptionDataTemplate();
        $prescription->user_map_id = $esteblishmentusermapID;
        $prescription->template_name = $data['template_name'];
        $prescription->patient_id = $data['patient_id'];
        $prescription->booking_id = $data['booking_id'];
        $prescription->date = $data['date'];
        $prescription->note = $data['note'];
        $prescription->complaints = $data['complaints'];
        $prescription->diagnosis = $data['diagnosis'];
        $prescription->complaints_row = isset($data['complaints_row']) ? $data['complaints_row'] : null;
        $prescription->diagnosis_row = isset($data['diagnosis_row']) ? $data['diagnosis_row'] : null;
        $prescription->advice = $data['advice'];
        $prescription->test_requested = $data['test_requested'];
        $prescription->follow_up = $data['follow_up'];
        $prescription->save();

        $medications = $data['medication'];
        foreach ($medications as $med):

            $medication = new MedicationTemplate();
            $medication->medication_name = $med['medication_name'];
            $medication->note = isset($med['note']) ? $med['note'] : null;
            $medication->durationValidity = isset($med['durationValidity']) ? $med['durationValidity'] : null;
            $medication->food = isset($med['food']) ? $med['food'] : null;
            $medication->save();

            $pres_item = new PrescriptionItemsTemplate();
            $pres_item->prescription_id = $prescription->id;
            $pres_item->medication_id = $medication->id;
            $pres_item->quantity = isset($med['quantity']) ? $med['quantity'] : null;
            $pres_item->duration = isset($med['duration']) ? $med['duration'] : null;
            $pres_item->doses = isset($med['doses']) ? $med['doses'] : null;
            $pres_item->timing = isset($med['timing']) ? $med['timing'] : null;
            $pres_item->note = isset($med['note']) ? $med['note'] : null;
            $pres_item->save();

        endforeach;

        $vitals = $data['vitals'];
        if ($vitals != null) {
            foreach ($vitals as $v):
                $vital = new VitalTemplate();
                $vital->vital_name = isset($v['vital_name']) ? $v['vital_name'] : null;
                $vital->value = isset($v['vital_value']) ? $v['vital_value'] : null;
                $vital->prescription_id = $prescription->id;
                $vital->created_by = isset($vitals['created_by']) ? $vitals['created_by'] : null;
                $vital->save();
            endforeach;
        }

        // $vitals = $data['vitals'];
        // $vital = new Vital();

        // $vital->sugar = isset($vitals['sugar']) ? $vitals['sugar'] : null;
        // $vital->bp = isset($vitals['bp']) ? $vitals['bp'] : null;
        // $vital->insuline = isset($vitals['insuline']) ? $vitals['insuline'] : null;
        // $vital->pulse = isset($vitals['pulse']) ? $vitals['pulse'] : null;
        // $vital->weight = isset($vitals['weight']) ? $vitals['weight'] : null;
        // $vital->height = isset($vitals['height']) ? $vitals['height'] : null;
        // $vital->bmi = isset($vitals['bmi']) ? $vitals['bmi'] : null;
        // $vital->rbs = isset($vitals['fbs']) ? $vitals['fbs'] : null;
        // $vital->fbs = isset($vitals['fbs']) ? $vitals['fbs'] : null;
        // $vital->hba1c = isset($vitals['hba1c']) ? $vitals['hba1c'] : null;
        // $vital->sugar = isset($vitals['sugar']) ? $vitals['sugar'] : null;
        // $vital->temperature = isset($vitals['temperature']) ? $vitals['temperature'] : null;
        // $vital->spo2 = isset($vitals['spo2']) ? $vitals['spo2'] : null;
        // $vital->sample_date = isset($vitals['sample_date']) ? $vitals['sample_date'] : null;
        // $vital->description = isset($vitals['description']) ? $vitals['description'] : null;
        // $vital->prescription_id = $prescription->id;
        // $vital->created_by = isset($vitals['created_by']) ? $vitals['created_by'] : null;
        // $vital->save();

        $systemic_examinations = $data['systemic_examination'];
        $systemic_examination = new SystemicexaminationTemplate();
        $systemic_examination->cvc = isset($systemic_examinations['cvc']) ? $systemic_examinations['cvc'] : null;
        $systemic_examination->ent = isset($systemic_examinations['ent']) ? $systemic_examinations['ent'] : null;
        $systemic_examination->rs = isset($systemic_examinations['rs']) ? $systemic_examinations['rs'] : null;
        $systemic_examination->pa = isset($systemic_examinations['pa']) ? $systemic_examinations['pa'] : null;
        $systemic_examination->cns = isset($systemic_examinations['cns']) ? $systemic_examinations['cns'] : null;
        $systemic_examination->gen = isset($systemic_examinations['gen']) ? $systemic_examinations['gen'] : null;
        $systemic_examination->prescription_id = $prescription->id;
        $systemic_examination->save();


        return $this->getPrescriptionTemplate($esteblishmentusermapID, $prescription->id);
    }

    /**
     * @OA\Get(
     * path="/establishments/users/{esteblishmentusermapID}/prescription/{prescriptionID}",
     * tags={"Prescription"},
     * description="prescription",
     * @OA\Parameter(
     *         name="esteblishmentusermapID",
     *         in="path",
     *         description="user map ID",
     *         required=true,
     *         example=1,
     *         @OA\Schema(type="number")
     *     ),
     * @OA\Parameter(
     *         name="prescriptionID",
     *         in="path",
     *         description="prescriptionID",
     *         required=true,
     *         example=11,
     *         @OA\Schema(type="number")
     *     ),
     * @OA\Response(
     *         response="200",
     * description="success",
     *    @OA\JsonContent(
     *       @OA\Property(property="success", type="string", example="success")
     *        )
     *     ),
     * @OA\Response(
     *         response="400",
     *         description="Error: Bad request. required parameters is not supplied.",    
     *    @OA\JsonContent(
     *       @OA\Property(property="error", type="string", example="ID not found")
     *        )
     *     ),
     * )
     */

    public function getPrescription($esteblishmentusermapID, $prescriptionID)
    {
        $data = [];
        $data = PrescriptionData::find($prescriptionID);

        $data->vitals = Vital::where('prescription_id', $prescriptionID)->get();
        $data->medication = PrescriptionItems::where('prescription_id', $prescriptionID)->join('medication', 'medication.id', 'prescription_items.medication_id')->get();
        $data->systemic_examination = Systemic_examination::where('prescription_id', $prescriptionID)->get();
        $data->vaccination_deatails = VaccinationDetailModel::where('prescription_id', $prescriptionID)->get();
        $data->vaccination_due = VaccinationDetailModel::where('prescription_id', $prescriptionID)->where('flag', 2)
            ->where('deleted_by', 0)
            ->get();
        $data->vaccination_given = VaccinationDetailModel::where('prescription_id', $prescriptionID)->where('flag', 1)
            ->where('deleted_by', 0)
            ->get();

        $data->perscription_url = URL::to('/v1/generatepdf/' . $prescriptionID);

        Log::info(['dataaaaaaaa' => $data]);

        return response()->json(['status' => 'success', 'data' => $data], 200);
    }
    /**
     * @OA\Get(
     * path="/establishments/users/{esteblishmentusermapID}/prescriptionTemplateList",
     * tags={"Prescription"},
     * description="prescription",
     * @OA\Parameter(
     *         name="esteblishmentusermapID",
     *         in="path",
     *         description="user map ID",
     *         required=true,
     *         example=1,
     *         @OA\Schema(type="number")
     *     ),
     * @OA\Response(
     *         response="200",
     * description="success",
     *    @OA\JsonContent(
     *       @OA\Property(property="success", type="string", example="success")
     *        )
     *     ),
     * @OA\Response(
     *         response="400",
     *         description="Error: Bad request. required parameters is not supplied.",    
     *    @OA\JsonContent(
     *       @OA\Property(property="error", type="string", example="ID not found")
     *        )
     *     ),
     * )
     */

    public function getPrescriptionTemplateList($esteblishmentusermapID)
    {
        $data = [];
        $data = PrescriptionDataTemplate::where('user_map_id', $esteblishmentusermapID)->select('id', 'template_name')->get();
        return response()->json(['status' => 'success', 'data' => $data], 200);
    }
    /**
     * @OA\Get(
     * path="/establishments/users/{esteblishmentusermapID}/prescriptionTemplate/{prescriptionID}",
     * tags={"Prescription"},
     * description="prescription",
     * @OA\Parameter(
     *         name="esteblishmentusermapID",
     *         in="path",
     *         description="user map ID",
     *         required=true,
     *         example=1,
     *         @OA\Schema(type="number")
     *     ),
     * @OA\Parameter(
     *         name="prescriptionID",
     *         in="path",
     *         description="prescriptionID",
     *         required=true,
     *         example=11,
     *         @OA\Schema(type="number")
     *     ),
     * @OA\Response(
     *         response="200",
     * description="success",
     *    @OA\JsonContent(
     *       @OA\Property(property="success", type="string", example="success")
     *        )
     *     ),
     * @OA\Response(
     *         response="400",
     *         description="Error: Bad request. required parameters is not supplied.",    
     *    @OA\JsonContent(
     *       @OA\Property(property="error", type="string", example="ID not found")
     *        )
     *     ),
     * )
     */

    public function getPrescriptionTemplate($esteblishmentusermapID, $prescriptionID)
    {
        $data = [];
        $data = PrescriptionDataTemplate::find($prescriptionID);
        $data->vitals = VitalTemplate::where('prescription_id', $prescriptionID)->get();
        $data->medication = PrescriptionItemsTemplate::where('prescription_id', $prescriptionID)->join('medication_template', 'medication_template.id', 'prescription_items_template.medication_id')->get();
        $data->systemic_examination = SystemicexaminationTemplate::where('prescription_id', $prescriptionID)->get();
        $data->perscription_url = URL::to('/v1/generatepdf/' . $prescriptionID);
        return response()->json(['status' => 'success', 'data' => $data], 200);
    }
    /**
     * @OA\Get(
     * path="/establishments/users/{esteblishmentusermapID}/prescriptionbyappointment/{appointmentID}",
     * tags={"Prescription"},
     * description="prescription",
     * @OA\Parameter(
     *         name="esteblishmentusermapID",
     *         in="path",
     *         description="user map ID",
     *         required=true,
     *         example=1,
     *         @OA\Schema(type="number")
     *     ),
     * @OA\Parameter(
     *         name="appointmentID",
     *         in="path",
     *         description="appointmentID",
     *         required=true,
     *         example=11,
     *         @OA\Schema(type="number")
     *     ),
     * @OA\Response(
     *         response="200",
     * description="success",
     *    @OA\JsonContent(
     *       @OA\Property(property="success", type="string", example="success")
     *        )
     *     ),
     * @OA\Response(
     *         response="400",
     *         description="Error: Bad request. required parameters is not supplied.",    
     *    @OA\JsonContent(
     *       @OA\Property(property="error", type="string", example="ID not found")
     *        )
     *     ),
     * )
     */
    public function getPrescriptionByAppointmentID($esteblishmentusermapID, $appointmentID)
    {
        $data = [];
        $data = PrescriptionData::where("booking_id", $appointmentID)->first();
        if (isset($data->id)) {
            $data->vitals = Vital::where('prescription_id', $data->id)->get();
            $data->medication = PrescriptionItems::where('prescription_id', $data->id)->join('medication', 'medication.id', 'prescription_items.medication_id')->get();
            $data->systemic_examination = Systemic_examination::where('prescription_id', $data->id)->get();
            $data->perscription_url = URL::to('/v1/generatepdf/' . $data->id);
            return response()->json(['status' => 'success', 'data' => $data], 200);
        } else {
            return response()->json(['status' => 'fail', 'message' => "didn't found any record"], 400);
        }
    }
    public function deletePrescriptionByAppointmentID($appointmentID)
    {
        $data = PrescriptionData::where("booking_id", $appointmentID)->first();
        if (isset($data->id)) {
            Vital::where('prescription_id', $data->id)->delete();
            PrescriptionItems::where('prescription_id', $data->id)->delete();
            Systemic_examination::where('prescription_id', $data->id)->delete();
            PrescriptionData::where("booking_id", $appointmentID)->delete();
        }
    }
    /**
     * @OA\Get(
     * path="/establishments/users/{esteblishmentusermapID}/prescriptionbypatient/{patientID}",
     * tags={"Prescription"},
     * description="prescription",
     * @OA\Parameter(
     *         name="esteblishmentusermapID",
     *         in="path",
     *         description="user map ID",
     *         required=true,
     *         example=1,
     *         @OA\Schema(type="number")
     *     ),
     * @OA\Parameter(
     *         name="patientID", 
     *         in="path",
     *         description="patientID",
     *         required=true,
     *         example=2,
     *         @OA\Schema(type="number")
     *     ),
     * @OA\Response(
     *         response="200",
     * description="success",
     *    @OA\JsonContent(
     *       @OA\Property(property="success", type="string", example="success")
     *        )
     *     ),
     * @OA\Response(
     *         response="400",
     *         description="Error: Bad request. required parameters is not supplied.",    
     *    @OA\JsonContent(
     *       @OA\Property(property="error", type="string", example="ID not found")
     *        )
     *     ),
     * )
     */
    public function getPrescriptionById($esteblishmentusermapID, $patientID)
    {

        $isPatientDostor = DB::table('docexa_patient_doctor_relation')->where('user_map_id', $esteblishmentusermapID)->where('patient_id', $patientID)->first();
        if ($isPatientDostor) {
            $response = [];
            $data = PrescriptionData::where(array("patient_id" => $patientID, 'user_map_id' => $esteblishmentusermapID))->orderBy('created_at', 'DESC')->get();
            foreach ($data as $row) {
                $usersapi = new UsersApi();
                $row->doctor = $usersapi->autologin($row->user_map_id);
                $row->vitals = Vital::where('prescription_id', $row->id)->get();

                // $response = Vitalconfig::leftJoin('doc_vital_user_map', function($join) use ($esteblishmentusermapID)
                // {
                //     $join->on('doc_vital_user_map.config_id','doc_vital_signs_config.id');
                //     $join->on('doc_vital_user_map.user_map_id','=', DB::raw($esteblishmentusermapID));
                // })->select('doc_vital_signs_config.*','doc_vital_user_map.config_id',DB::raw('if(isnull(doc_vital_user_map.config_id),0,1) as flag'))->get();

                // $row->vitals = $response;
                // $row->medication = PrescriptionItems::where('prescription_id', $row->id)->join('medication', 'medication.id', 'prescription_items.medication_id')->get();

                $row->medication = PrescriptionItems::where('prescription_id', $row->id)
                    ->join('medication', 'medication.id', '=', 'prescription_items.medication_id')
                    ->get()
                    ->map(function ($item) {
                        // Transform the attributes of the item, converting null values to empty strings
                        foreach ($item->getAttributes() as $key => $value) {
                            if (is_null($value)) {
                                $item->$key = '';
                            }
                        }
                        return $item;
                    });



                $row->systemic_examination = Systemic_examination::where('prescription_id', $row->id)->first();
                $row->perscription_url = URL::to('/v1/generatepdf/' . $row->id);
                $row->vaccination_deatails = VaccinationDetailModel::where('prescription_id', $row->id)->get();
                $row->vaccination_due = VaccinationDetailModel::where('prescription_id', $$row->id)->where('flag', 2)
                    ->get();
                $row->vaccination_given = VaccinationDetailModel::where('prescription_id', $$row->id)->where('flag', 1);
            }
            return response()->json(['status' => 'success', 'data' => $data], 200);
        } else {
            return response()->json(['status' => 'failed', 'message' => 'doctor patient relation not exist'], 200);
        }
    }
    /**
     * @OA\Get(
     * path="/prescriptionbypatient/{patientID}",
     * tags={"Prescription"},
     * description="prescription",
     * @OA\Parameter(
     *         name="patientID", 
     *         in="path",
     *         description="patientID",
     *         required=true,
     *         example=2,
     *         @OA\Schema(type="number")
     *     ),
     * @OA\Response(
     *         response="200",
     * description="success",
     *    @OA\JsonContent(
     *       @OA\Property(property="success", type="string", example="success")
     *        )
     *     ),
     * @OA\Response(
     *         response="400",
     *         description="Error: Bad request. required parameters is not supplied.",    
     *    @OA\JsonContent(
     *       @OA\Property(property="error", type="string", example="ID not found")
     *        )
     *     ),
     * )
     */
    public function getAllPrescription($patientID)
    {
        $response = [];
        $data = PrescriptionData::where(array("patient_id" => $patientID))->orderBy('created_at', 'DESC')->get();
        foreach ($data as $row) {
            $usersapi = new UsersApi();
            $row->doctor = $usersapi->autologin($row->user_map_id);
            $row->vitals = Vital::where('prescription_id', $row->id)->first();
            $row->medication = PrescriptionItems::where('prescription_id', $row->id)->join('medication', 'medication.id', 'prescription_items.medication_id')->get();
            $row->systemic_examination = Systemic_examination::where('prescription_id', $row->id)->first();
            $row->perscription_url = URL::to('/v1/generatepdf/' . $row->id);
        }
        return response()->json(['status' => 'success', 'data' => $data], 200);
    }
    public function getsymptoms($esteblishmentusermapID = null)
    {
        if ($esteblishmentusermapID == null) {
            $data['symptoms'] = DB::table('consult_complaints')->pluck('name');
            $data['diagnosis'] = DB::table('consult_diagnosis')->get();
            $data['advices'] = DB::table('consult_advice')->get();
            $data['medicaltests'] = DB::table('consult_tests')->get();
            $data['lifestyle'] = DB::table('lifestyle_master')->get();
            $data['medical'] = DB::table('medical_history')->get();
            $data['medicine_type'] = DB::table('docexa_medicine_types')->get();

            return response()->json(['status' => 'success', 'data' => $data], 200);
        } else {
            $symptoms1 = DB::table('consult_complaints')->select('name')->get();
            $symptoms2 = DB::table('prescription')->distinct()->where(array('user_map_id' => $esteblishmentusermapID))->where('complaints', '!=', '')->select('complaints as name')->get();
            $symptoms3 = DB::table('consult_complaints_usermap')->select('name')->get();
            $prescribesymtoms = [];
            $data['symptoms'] = [];

            foreach ($symptoms2 as $sym) {
                $exploadeddata = explode(",", $sym->name);
                foreach ($exploadeddata as $exdata) {
                    $prescribesymtoms[] = ['name' => trim($exdata)];
                }
            }
            foreach ($symptoms1 as $sym) {
                $prescribesymtoms[] = ['name' => trim($sym->name)];
            }
            foreach ($symptoms3 as $sym) {
                $prescribesymtoms[] = ['name' => trim($sym->name)];
            }
            $prescribesymtoms = array_unique($prescribesymtoms, SORT_REGULAR);
            foreach ($prescribesymtoms as $val) {
                $data['symptoms'][] = $val;
            }



            $diagnosis1 = DB::table('consult_diagnosis')->select('name')->get();
            $diagnosis2 = DB::table('prescription')->distinct()->where(array('user_map_id' => $esteblishmentusermapID))->where('diagnosis', '!=', '')->select('diagnosis as name')->get();
            //$data['diagnosis'] = $diagnosis2->union($diagnosis1)->get();
            $prescribesymtoms = [];
            $data['diagnosis'] = [];

            foreach ($diagnosis2 as $sym) {
                $exploadeddata = explode(",", $sym->name);
                foreach ($exploadeddata as $exdata) {
                    $prescribesymtoms[] = ['name' => trim($exdata)];
                }
            }
            foreach ($diagnosis1 as $sym) {
                $prescribesymtoms[] = ['name' => trim($sym->name)];
            }
            $prescribesymtoms = array_unique($prescribesymtoms, SORT_REGULAR);
            foreach ($prescribesymtoms as $val) {
                $data['diagnosis'][] = $val;
            }

            $advices1 = DB::table('consult_advice')->select('name')->get();
            $advices2 = DB::table('prescription')->distinct()->where(array('user_map_id' => $esteblishmentusermapID))->where('advice', '!=', '')->select('advice as name')->get();
            //$data['advices'] = $advices2->union($advices1)->get();
            $prescribesymtoms = [];
            $data['advices'] = [];

            foreach ($advices2 as $sym) {
                $exploadeddata = explode(",", $sym->name);
                foreach ($exploadeddata as $exdata) {
                    if (trim($exdata) != "")
                        $prescribesymtoms[] = ['name' => trim($exdata)];
                }
            }
            foreach ($advices1 as $sym) {
                if (trim($sym->name) != "")
                    $prescribesymtoms[] = ['name' => trim($sym->name)];
            }
            $prescribesymtoms = array_unique($prescribesymtoms, SORT_REGULAR);
            foreach ($prescribesymtoms as $val) {
                $data['advices'][] = $val;
            }

            $medicaltests1 = DB::table('consult_tests')->select('name')->get();
            $medicaltests2 = DB::table('prescription')->distinct()->where(array('user_map_id' => $esteblishmentusermapID))->where('test_requested', '!=', '')->select('test_requested as name')->get();
            //$data['medicaltests'] = $medicaltests2->union($medicaltests1)->get();
            $prescribesymtoms = [];
            $data['medicaltests'] = [];

            foreach ($medicaltests2 as $sym) {
                $exploadeddata = explode(",", $sym->name);
                foreach ($exploadeddata as $exdata) {
                    if (trim($exdata) != "")
                        $prescribesymtoms[] = ['name' => trim($exdata)];
                }
            }
            foreach ($medicaltests1 as $sym) {
                if (trim($sym->name) != "")
                    $prescribesymtoms[] = ['name' => trim($sym->name)];
            }
            $prescribesymtoms = array_unique($prescribesymtoms, SORT_REGULAR);
            foreach ($prescribesymtoms as $val) {
                $data['medicaltests'][] = $val;
            }


            // medical_history
            $mediacalhistory1 = DB::table('medical_history')->select('name')->get();
            $medicalhistory2 = DB::table('prescription')->distinct()->where(array('user_map_id' => $esteblishmentusermapID))->where('medical_history', '!=', '')->select('medical_history as name')->get();

            $prescribesymtoms = [];
            $data['medical_history'] = [];

            foreach ($medicalhistory2 as $medi) {
                $exploadeddata = explode(",", $medi->name);
                foreach ($exploadeddata as $exdata) {
                    $prescribesymtoms[] = ['name' => trim($exdata)];
                }
            }
            foreach ($mediacalhistory1 as $medi) {
                $prescribesymtoms[] = ['name' => trim($medi->name)];
            }
            $prescribesymtoms = array_unique($prescribesymtoms, SORT_REGULAR);
            foreach ($prescribesymtoms as $val) {
                $data['medical_history'][] = $val;
            }

            // lifestyle
            $lifestyle1 = DB::table('lifestyle_master')->get();
            $lifestyle2 = DB::table('prescription')->distinct()->where(array('user_map_id' => $esteblishmentusermapID))->where('lifestyle', '!=', '')->select('lifestyle as name')->get();

            $prescribesymtoms = [];
            $data['lifestyle'] = [];

            foreach ($lifestyle2 as $li) {
                $exploadeddata = explode(",", $li->name);
                foreach ($exploadeddata as $exdata) {
                    $prescribesymtoms[] = ['name' => trim($exdata)];
                }
            }
            foreach ($lifestyle1 as $li) {
                $prescribesymtoms[] = ['name' => trim($li->name)];
            }
            $prescribesymtoms = array_unique($prescribesymtoms, SORT_REGULAR);
            foreach ($prescribesymtoms as $val) {
                $data['lifestyle'][] = $val;
            }
            // medicine types
            $medicineType1 = DB::table('docexa_medicine_types')->get();
            //  $medicineType2 = DB::table('prescription')->distinct()->where(array('user_map_id'=>$esteblishmentusermapID))->where('lifestyle','!=','')->select('lifestyle as name')->get();

            $prescribesymtoms = [];
            $data['medicine_type'] = [];

            //  foreach($medicineType2 as $li){
            //      $exploadeddata = explode("," ,$li->name);
            //      foreach($exploadeddata as $exdata){
            //          $prescribesymtoms[] = ['name' => trim($exdata)]; 
            //      }
            //  }
            foreach ($medicineType1 as $li) {
                $prescribesymtoms[] = [
                    'id' => trim($li->id),
                    'name' => trim($li->name)
                ];
            }
            $prescribesymtoms = array_unique($prescribesymtoms, SORT_REGULAR);
            foreach ($prescribesymtoms as $val) {
                $data['medicine_type'][] = $val;
            }


            return response()->json(['status' => 'success', 'data' => $data], 200);
        }
    }
    /**
     * Operation masterdata
     *
     * masterdata
     *
     * @return Http response
     */
    public function createPdf($prescriptionID, Request $request)
    {

        //create PDF
        $mpdf = new Mpdf();

        $header = trim($request->get('header', ''));
        $footer = trim($request->get('footer', ''));

        if (strlen($header)) {
            $mpdf->SetHTMLHeader($header);
        }

        if (strlen($footer)) {
            $mpdf->SetHTMLFooter($footer);
        }

        if ($request->get('show_toc')) {
            $mpdf->h2toc = array(
                'H1' => 0,
                'H2' => 1,
                'H3' => 2,
                'H4' => 3,
                'H5' => 4,
                'H6' => 5
            );
            $mpdf->TOCpagebreak();
        }

        $user = new User();
        $data = PrescriptionData::find($prescriptionID);
        //$data->user_map_id = 2;
        $data->vitals = Vital::where('prescription_id', $prescriptionID)->get();
        $data->doctors = $user->autologin($data->user_map_id);
        $data->patients = Patientmaster::find($data->patient_id);
        $data->medication = PrescriptionItems::where('prescription_id', $prescriptionID)->join('medication', 'medication.id', 'prescription_items.medication_id')->get();
        $data->systemic_examination = Systemic_examination::where('prescription_id', $prescriptionID)->get();
        $data->qrcode = QrCode::encoding('UTF-8')->size(30)->format('svg')->generate('http://apidev.docexa.com/v1/generatepdf/' . $prescriptionID);
        $data->qrcode = str_replace('<?xml version="1.0" encoding="UTF-8"?>', '', $data->qrcode);
        //dd($data);die;
        return View('prescription.index', ['data' => $data]);

        $view = View::make('prescription.index', ['data' => $data, 'link' => '/prescription/generate/pdf'])->render();
        //var_dump($view);die;
        $mpdf->SetTitle("Prescription - #00" . $prescriptionID);
        $mpdf->WriteHTML($view);
        return $mpdf->output("Prescription - #00" . $prescriptionID . "pdf", 'I');
    }
    /**
     * @OA\Get(
     * path="/vitals",
     * tags={"Prescription"},
     * description="prescription",
     * @OA\Response(
     *         response="200",
     * description="success",
     *    @OA\JsonContent(
     *       @OA\Property(property="success", type="string", example="success")
     *        )
     *     ),
     * @OA\Response(
     *         response="400",
     *         description="Error: Bad request. required parameters is not supplied.",    
     *    @OA\JsonContent(
     *       @OA\Property(property="error", type="string", example="ID not found")
     *        )
     *     ),
     * )
     */
    public function getvitalsAll()
    {
        $response = Vitalconfig::all();
        return response()->json(['status' => 'success', 'data' => $response], 200);
    }
    /**
     * @OA\Get(
     * path="/establishments/users/{esteblishmentusermapID}/vital",
     * tags={"Prescription"},
     * description="prescription",
     * @OA\Parameter(
     *         name="esteblishmentusermapID", 
     *         in="path",
     *         description="esteblishmentusermapID",
     *         required=true,
     *         example=2,
     *         @OA\Schema(type="number")
     *     ),
     * @OA\Response(
     *         response="200",
     * description="success",
     *    @OA\JsonContent(
     *       @OA\Property(property="success", type="string", example="success")
     *        )
     *     ),
     * @OA\Response(
     *         response="400",
     *         description="Error: Bad request. required parameters is not supplied.",    
     *    @OA\JsonContent(
     *       @OA\Property(property="error", type="string", example="ID not found")
     *        )
     *     ),
     * )
     */
    public function getvitals($esteblishmentusermapID)
    {
        $response = Vitalconfig::leftJoin('doc_vital_user_map', function ($join) use ($esteblishmentusermapID) {
            $join->on('doc_vital_user_map.config_id', 'doc_vital_signs_config.id');
            $join->on('doc_vital_user_map.user_map_id', '=', DB::raw($esteblishmentusermapID));
        })->select('doc_vital_signs_config.*', 'doc_vital_user_map.config_id', DB::raw('if(isnull(doc_vital_user_map.config_id),0,1) as flag'))->get();

        return response()->json(['status' => 'success', 'data' => $response], 200);
    }
    /**
     * @OA\Post(
     * path="/establishments/users/{esteblishmentusermapID}/vital",
     * tags={"Prescription"},
     * description="prescription",
     * @OA\Parameter(
     *         name="esteblishmentusermapID", 
     *         in="path",
     *         description="esteblishmentusermapID",
     *         required=true,
     *         example=2,
     *         @OA\Schema(type="number")
     *     ),
     * @OA\RequestBody(
     *  required=true,
     *  description="Pass doctor details",
     *  @OA\JsonContent(
     *      type="object",
     *      @OA\Property(
     *                property="vital",
     *                type="array",
     *                @OA\Items(
     *                      @OA\Property(
     *                         property="vital_name",
     *                         type="string",
     *                         example=""
     *                      ),
     *                      @OA\Property(
     *                         property="config_id",
     *                         type="int",
     *                         example=""
     *                      ),
     *                      @OA\Property(
     *                         property="type",
     *                         type="string",
     *                         example=""
     *                      ),
     *                      @OA\Property(
     *                         property="option",
     *                         type="string",
     *                         example=""
     *                      ),
     * ),
     * ),
     * ),
     * ),
     * @OA\Response(
     *         response="200",
     * description="success",
     *    @OA\JsonContent(
     *       @OA\Property(property="success", type="string", example="success")
     *        )
     *     ),
     * @OA\Response(
     *         response="400",
     *         description="Error: Bad request. required parameters is not supplied.",    
     *    @OA\JsonContent(
     *       @OA\Property(property="error", type="string", example="ID not found")
     *        )
     *     ),
     * )
     */
    public function addvitals($esteblishmentusermapID, Request $request)
    {

        $insertarray = [];
        $deletearray = [];
        $data = $request->all();

        foreach ($data['vital'] as $val) {
            if ($val['flag'] == 1) {
                $row = [
                    "user_map_id" => $esteblishmentusermapID,
                    "vital_name" => $val['vital_name'],
                    "type" => $val['type'],
                    "config_id" => $val['config_id'],
                    "created_at" => date('Y-m-d H:i:s'),
                    "updated_at" => date('Y-m-d H:i:s')
                ];
                if ($val['option'] != null)
                    $row['options'] = $val['option'];
                $insertarray[] = $row;
                Vitalusermap::where(array('config_id' => $val['config_id'], 'user_map_id' => $esteblishmentusermapID))->delete();
            } else {
                Vitalusermap::where(array('config_id' => $val['config_id'], 'user_map_id' => $esteblishmentusermapID))->delete();
            }
        }
        //Vitalusermap::insert($array);

        Log::info(['data' => Vitalusermap::insert($insertarray)]);

        $response = Vitalconfig::leftJoin('doc_vital_user_map', function ($join) use ($esteblishmentusermapID) {
            $join->on('doc_vital_user_map.config_id', 'doc_vital_signs_config.id');
            $join->on('doc_vital_user_map.user_map_id', '=', DB::raw($esteblishmentusermapID));
        })->select('doc_vital_signs_config.*', 'doc_vital_user_map.config_id', DB::raw('if(isnull(doc_vital_user_map.config_id),0,1) as flag'))->get();
        return response()->json(['status' => 'success', 'data' => $response], 200);
    }
    /**
     * @OA\Put(
     * path="/establishments/users/{esteblishmentusermapID}/vital/{vitalID}",
     * tags={"Prescription"},
     * description="prescription",
     * @OA\Parameter(
     *         name="esteblishmentusermapID", 
     *         in="path",
     *         description="esteblishmentusermapID",
     *         required=true,
     *         example=2,
     *         @OA\Schema(type="number")
     *     ),
     * @OA\Parameter(
     *         name="vitalID", 
     *         in="path",
     *         description="vitalID",
     *         required=true,
     *         example=2,
     *         @OA\Schema(type="number")
     *     ),
     * @OA\RequestBody(
     *  required=true,
     *  description="Pass doctor details",
     *  @OA\JsonContent(
     *      type="object",
    
     *                      @OA\Property(
     *                         property="vital_name",
     *                         type="string",
     *                         example=""
     *                      ),
     *                      @OA\Property(
     *                         property="type",
     *                         type="string",
     *                         example=""
     *                      ),
     *                      @OA\Property(
     *                         property="option",
     *                         type="string",
     *                         example=""
     *                      ),
     * ),
     * ),
     * @OA\Response(
     *         response="200",
     * description="success",
     *    @OA\JsonContent(
     *       @OA\Property(property="success", type="string", example="success")
     *        )
     *     ),
     * @OA\Response(
     *         response="400",
     *         description="Error: Bad request. required parameters is not supplied.",    
     *    @OA\JsonContent(
     *       @OA\Property(property="error", type="string", example="ID not found")
     *        )
     *     ),
     * )
     */
    public function updatevitals($esteblishmentusermapID, $vitalID, Request $request)
    {
        $data = $request->all();
        $array = [
            "user_map_id" => $esteblishmentusermapID,
            "vital_name" => $data['vital_name'],
            "type" => $data['type'],
            "options" => $data['option'],
            "created_at" => date('Y-m-d H:i:s'),
            "updated_at" => date('Y-m-d H:i:s')
        ];
        Vitalusermap::find($vitalID)->update($array);
        $response = Vitalconfig::leftJoin('doc_vital_user_map', function ($join) use ($esteblishmentusermapID) {
            $join->on('doc_vital_user_map.config_id', 'doc_vital_signs_config.id');
            $join->on('doc_vital_user_map.user_map_id', '=', DB::raw($esteblishmentusermapID));
        })->select('doc_vital_signs_config.*', 'doc_vital_user_map.config_id', DB::raw('if(isnull(doc_vital_user_map.config_id),0,1) as flag'))->get();
        return response()->json(['status' => 'success', 'data' => $response], 200);
    }
    /**
     * @OA\Delete(
     * path="/establishments/users/{esteblishmentusermapID}/vital/{vitalID}",
     * tags={"Prescription"},
     * description="prescription",
     * @OA\Parameter(
     *         name="esteblishmentusermapID", 
     *         in="path",
     *         description="esteblishmentusermapID",
     *         required=true,
     *         example=2,
     *         @OA\Schema(type="number")
     *     ),
     * @OA\Parameter(
     *         name="vitalID", 
     *         in="path",
     *         description="vitalID",
     *         required=true,
     *         example=2,
     *         @OA\Schema(type="number")
     *     ),
     * @OA\Response(
     *         response="200",
     * description="success",
     *    @OA\JsonContent(
     *       @OA\Property(property="success", type="string", example="success")
     *        )
     *     ),
     * @OA\Response(
     *         response="400",
     *         description="Error: Bad request. required parameters is not supplied.",    
     *    @OA\JsonContent(
     *       @OA\Property(property="error", type="string", example="ID not found")
     *        )
     *     ),
     * )
     */
    public function deletevitals($esteblishmentusermapID, $vitalID)
    {

        Vitalusermap::find($vitalID)->delete();
        $response = Vitalconfig::leftJoin('doc_vital_user_map', function ($join) use ($esteblishmentusermapID) {
            $join->on('doc_vital_user_map.config_id', 'doc_vital_signs_config.id');
            $join->on('doc_vital_user_map.user_map_id', '=', DB::raw($esteblishmentusermapID));
        })->select('doc_vital_signs_config.*', 'doc_vital_user_map.config_id', DB::raw('if(isnull(doc_vital_user_map.config_id),0,1) as flag'))->get();
        return response()->json(['status' => 'success', 'data' => $response], 200);
    }
    /**
     * @OA\Post(
     * path="/establishments/users/{esteblishmentusermapID}/patient/{patientID}/prescription/create",
     * tags={"Prescription"},
     * description="prescription",
     * @OA\Parameter(
     *         name="esteblishmentusermapID", 
     *         in="path",
     *         description="esteblishmentusermapID",
     *         required=true,
     *         example=2,
     *         @OA\Schema(type="number")
     *     ),
     * * @OA\Parameter(
     *         name="patientID", 
     *         in="path",
     *         description="patientID",
     *         required=true,
     *         example=2,
     *         @OA\Schema(type="number")
     *     ),
     * @OA\RequestBody(
     *  required=true,
     *  description="Pass doctor details",
     *  @OA\JsonContent(
     *      type="object",
     *                  @OA\Property(property="booking_id", type="string", format="text", example="1"),
     *                  @OA\Property(property="date", type="date", example="2022-05-10"),
     *      @OA\Property(
     *                property="vitals",
     *                type="array",
     *                @OA\Items(
     *                      @OA\Property(
     *                         property="vital_name",
     *                         type="string",
     *                         example=""
     *                      ),
     *                      @OA\Property(
     *                         property="vital_value",
     *                         type="int",
     *                         example=""
     *                      ),
     * ),
     * ),
     * ),
     * ),
     * @OA\Response(
     *         response="200",
     * description="success",
     *    @OA\JsonContent(
     *       @OA\Property(property="success", type="string", example="success")
     *        )
     *     ),
     * @OA\Response(
     *         response="400",
     *         description="Error: Bad request. required parameters is not supplied.",    
     *    @OA\JsonContent(
     *       @OA\Property(property="error", type="string", example="ID not found")
     *        )
     *     ),
     * )
     */

    public function createprecription($esteblishmentusermapID, $patientID, Request $request)
    {
        $data = $request->all();
        Log::info([$data]);
        $prescription = new PrescriptionData();
        $prescription->user_map_id = $esteblishmentusermapID;
        $prescription->patient_id = $patientID;
        $prescription->booking_id = $data['booking_id'];
        $prescription->date = $data['date'];
        $prescription->save();


        $vitals = $data['vitals'];

        foreach ($vitals as $v):
            $vital = new Vital();
            $vital->vital_name = isset($v['vital_name']) ? $v['vital_name'] : null;
            $vital->value = isset($v['vital_value']) ? $v['vital_value'] : null;
            $vital->prescription_id = $prescription->id;
            $vital->created_by = isset($v['created_by']) ? $v['created_by'] : null;
            $vital->save();
        endforeach;
        return $this->getPrescription($esteblishmentusermapID, $prescription->id);
    }




    public function getsymptomss($esteblishmentusermapID = null)
    {
        if ($esteblishmentusermapID == null) {
            $data['symptoms'] = DB::table('consult_complaints')->pluck('name');
            $data['diagnosis'] = DB::table('consult_diagnosis')->get();
            $data['advices'] = DB::table('consult_advice')->get();
            $data['medicaltests'] = DB::table('consult_tests')->get();
            $data['lifestyle'] = DB::table('lifestyle_master')->get();
            $data['medical'] = DB::table('medical_history')->get();


            return response()->json(['status' => 'success', 'data' => $data], 200);
        } else {
            $symptoms1 = DB::table('consult_complaints')->select('name')->get();
            $symptoms2 = DB::table('prescription')->distinct()->where(array('user_map_id' => $esteblishmentusermapID))->where('complaints', '!=', '')->select('complaints as name')->get();
            $prescribesymtoms = [];
            $data['symptoms'] = [];

            foreach ($symptoms2 as $sym) {
                $exploadeddata = explode(",", $sym->name);
                foreach ($exploadeddata as $exdata) {
                    $prescribesymtoms[] = ['name' => trim($exdata)];
                }
            }
            foreach ($symptoms1 as $sym) {
                $prescribesymtoms[] = ['name' => trim($sym->name)];
            }
            $prescribesymtoms = array_unique($prescribesymtoms, SORT_REGULAR);
            foreach ($prescribesymtoms as $val) {
                $data['symptoms'][] = $val;
            }



            $diagnosis1 = DB::table('consult_diagnosis')->select('name')->get();
            $diagnosis2 = DB::table('prescription')->distinct()->where(array('user_map_id' => $esteblishmentusermapID))->where('diagnosis', '!=', '')->select('diagnosis as name')->get();
            //$data['diagnosis'] = $diagnosis2->union($diagnosis1)->get();
            $prescribesymtoms = [];
            $data['diagnosis'] = [];

            foreach ($diagnosis2 as $sym) {
                $exploadeddata = explode(",", $sym->name);
                foreach ($exploadeddata as $exdata) {
                    $prescribesymtoms[] = ['name' => trim($exdata)];
                }
            }
            foreach ($diagnosis1 as $sym) {
                $prescribesymtoms[] = ['name' => trim($sym->name)];
            }
            $prescribesymtoms = array_unique($prescribesymtoms, SORT_REGULAR);
            foreach ($prescribesymtoms as $val) {
                $data['diagnosis'][] = $val;
            }

            $advices1 = DB::table('consult_advice')->select('name')->get();
            $advices2 = DB::table('prescription')->distinct()->where(array('user_map_id' => $esteblishmentusermapID))->where('advice', '!=', '')->select('advice as name')->get();
            //$data['advices'] = $advices2->union($advices1)->get();
            $prescribesymtoms = [];
            $data['advices'] = [];

            foreach ($advices2 as $sym) {
                $exploadeddata = explode(",", $sym->name);
                foreach ($exploadeddata as $exdata) {
                    $prescribesymtoms[] = ['name' => trim($exdata)];
                }
            }
            foreach ($advices1 as $sym) {
                $prescribesymtoms[] = ['name' => trim($sym->name)];
            }
            $prescribesymtoms = array_unique($prescribesymtoms, SORT_REGULAR);
            foreach ($prescribesymtoms as $val) {
                $data['advices'][] = $val;
            }

            $medicaltests1 = DB::table('consult_tests')->select('name')->get();
            $medicaltests2 = DB::table('prescription')->distinct()->where(array('user_map_id' => $esteblishmentusermapID))->where('test_requested', '!=', '')->select('test_requested as name')->get();
            //$data['medicaltests'] = $medicaltests2->union($medicaltests1)->get();
            $prescribesymtoms = [];
            $data['medicaltests'] = [];

            foreach ($medicaltests2 as $sym) {
                $exploadeddata = explode(",", $sym->name);
                foreach ($exploadeddata as $exdata) {
                    $prescribesymtoms[] = ['name' => trim($exdata)];
                }
            }
            foreach ($medicaltests1 as $sym) {
                $prescribesymtoms[] = ['name' => trim($sym->name)];
            }
            $prescribesymtoms = array_unique($prescribesymtoms, SORT_REGULAR);
            foreach ($prescribesymtoms as $val) {
                $data['medicaltests'][] = $val;
            }

            // medical_history
            $mediacalhistory1 = DB::table('medical_history')->select('name')->get();
            $medicalhistory2 = DB::table('prescription')->distinct()->where(array('user_map_id' => $esteblishmentusermapID))->where('medical_history', '!=', '')->select('medical_history as name')->get();

            $prescribesymtoms = [];
            $data['medical_history'] = [];

            foreach ($medicalhistory2 as $medi) {
                $exploadeddata = explode(",", $medi->name);
                foreach ($exploadeddata as $exdata) {
                    $prescribesymtoms[] = ['name' => trim($exdata)];
                }
            }
            foreach ($mediacalhistory1 as $medi) {
                $prescribesymtoms[] = ['name' => trim($medi->name)];
            }
            $prescribesymtoms = array_unique($prescribesymtoms, SORT_REGULAR);
            foreach ($prescribesymtoms as $val) {
                $data['medical_history'][] = $val;
            }

            // lifestyle
            $lifestyle1 = DB::table('lifestyle_master')->get();
            $lifestyle2 = DB::table('prescription')->distinct()->where(array('user_map_id' => $esteblishmentusermapID))->where('lifestyle', '!=', '')->select('lifestyle as name')->get();

            $prescribesymtoms = [];
            $data['lifestyle'] = [];

            foreach ($lifestyle2 as $li) {
                $exploadeddata = explode(",", $li->name);
                foreach ($exploadeddata as $exdata) {
                    $prescribesymtoms[] = ['name' => trim($exdata)];
                }
            }
            foreach ($lifestyle1 as $li) {
                $prescribesymtoms[] = ['name' => trim($li->name)];
            }
            $prescribesymtoms = array_unique($prescribesymtoms, SORT_REGULAR);
            foreach ($prescribesymtoms as $val) {
                $data['lifestyle'][] = $val;
            }
            return response()->json(['status' => 'success', 'data' => $data], 200);
        }
    }
    public function prescriptionLayoutSave(Request $request, $id)
    {
        try {
            Log::info(['prescriptionLaiout', $request]);
            $input = $request->all();
            $doctorUserMap = DB::table('docexa_medical_establishments_medical_user_map')->where('id', $id)->first()->medical_user_id;
            $doctorData = Doctor::where('pharmaclient_id', $doctorUserMap)->first();

            // id, user_map_id, font_family, font_size, footer_alignment, prescription_template, medicine_template, investigation_template, letter_head, signuture, top_margin, bottom_margin, left_margin, right_margin, language, created_at
            if ($doctorData) {
                $alreadyExist = PrescriptionLayout::where('user_map_id', $id)->first();
                if ($alreadyExist) {
                    $alreadyExist->user_map_id = $id;
                    $alreadyExist->language = array_key_exists('language', $input) ? $input['language'] : 'language';
                    $alreadyExist->font_family = array_key_exists('font_family', $input) ? $input['font_family'] : 'Times New Roman';
                    $alreadyExist->font_size = array_key_exists('font_size', $input) ? $input['font_size'] : '11';
                    $alreadyExist->footer_alignment = array_key_exists('footer_alignment', $input) ? $input['footer_alignment'] : 'right';
                    $alreadyExist->prescription_template = array_key_exists('prescription_template', $input) ? $input['prescription_template'] : 'double';
                    $alreadyExist->medicine_template = array_key_exists('medicine_template', $input) ? $input['medicine_template'] : 'single';
                    $alreadyExist->investigation_template = array_key_exists('investigation_template', $input) ? $input['investigation_template'] : null;
                    $alreadyExist->letter_head = array_key_exists('letter_head', $input) ? $input['letter_head'] : 1;
                    $alreadyExist->signuture = array_key_exists('signuture', $input) ? $input['signuture'] : 0;
                    $alreadyExist->top_margin = $input['top_margin'] ? $input['top_margin'] : 1;
                    $alreadyExist->bottom_margin = $input['bottom_margin'] ? $input['bottom_margin'] : 1;
                    $alreadyExist->left_margin = $input['left_margin'] ? $input['left_margin'] : 1;
                    $alreadyExist->right_margin = $input['right_margin'] ? $input['right_margin'] : 1;
                    $alreadyExist->dose_mandatory = array_key_exists('dose_mandatory', $input) ? $input['dose_mandatory'] : null;
                    $alreadyExist->dose_type = array_key_exists('dose_type', $input) ? $input['dose_type'] : null;
                    $alreadyExist->is_load_last_prescription = array_key_exists('is_load_last_prescription', $input) ? $input['is_load_last_prescription'] : null;



                    $save = $alreadyExist->save();
                } else {
                    $presLayout = new PrescriptionLayout();
                    $presLayout->user_map_id = $id;
                    $presLayout->language = array_key_exists('language', $input) ? $input['language'] : 'language';
                    $presLayout->font_family = array_key_exists('font_family', $input) ? $input['font_family'] : 'Times New Roman';
                    $presLayout->font_size = array_key_exists('font_size', $input) ? $input['font_size'] : '11';
                    $presLayout->footer_alignment = array_key_exists('footer_alignment', $input) ? $input['footer_alignment'] : 'right';
                    $presLayout->prescription_template = array_key_exists('prescription_template', $input) ? $input['prescription_template'] : 'double';
                    $presLayout->medicine_template = array_key_exists('medicine_template', $input) ? $input['medicine_template'] : 'single';
                    $presLayout->investigation_template = array_key_exists('investigation_template', $input) ? $input['investigation_template'] : null;
                    $presLayout->letter_head = array_key_exists('letter_head', $input) ? $input['letter_head'] : 1;
                    $presLayout->signuture = array_key_exists('signuture', $input) ? $input['signuture'] : 0;
                    $presLayout->top_margin = $input['top_margin'] ? $input['top_margin'] : 1;
                    $presLayout->bottom_margin = $input['bottom_margin'] ? $input['bottom_margin'] : 1;
                    $presLayout->left_margin = $input['left_margin'] ? $input['left_margin'] : 1;
                    $presLayout->right_margin = $input['right_margin'] ? $input['right_margin'] : 1;
                    $presLayout->dose_mandatory = array_key_exists('dose_mandatory', $input) ? $input['dose_mandatory'] : null;
                    $presLayout->dose_type = array_key_exists('dose_type', $input) ? $input['dose_type'] : null;
                    $presLayout->is_load_last_prescription = array_key_exists('is_load_last_prescription', $input) ? $input['is_load_last_prescription'] : null;


                    $save = $presLayout->save();
                }
            } else {
                return response()->json(['status' => false, "message" => "Doctor is not found with this user map id"], 401);
            }

            if ($save) {
                $data = PrescriptionLayout::where('user_map_id', $id)->first();
                return response()->json(['staus' => true, "message" => "Data submitted successfully", "data" => $data], 200);
            } else {
                return response()->json(['staus' => false, "message" => "something went wrong"], 400);
            }
        } catch (\Throwable $th) {
            Log::error(['error' => $th]);
            return response()->json(['status' => false, 'message' => $th->getMessage()], 500);
        }
    }

    public function getPrescriptionLayoutData($id)
    {
        try {
            Log::info(['prescriptionLaiout' => $id]);
            $doctorUserMap = DB::table('docexa_medical_establishments_medical_user_map')->where('id', $id)->first()->medical_user_id;
            $doctorData = Doctor::where('pharmaclient_id', $doctorUserMap)->first();
            if ($doctorData) {
                $data = PrescriptionLayout::where('user_map_id', $id)->first();
                if ($data) {
                    return response()->json(['status' => true, 'message' => 'Retrived data successfully', 'data' => $data], 200);
                } else {
                    return response()->json(['status' => false, 'message' => 'Data not found'], 200);
                }
            } else {
                return response()->json(['status' => false, 'message' => 'Doctor is not found with this user map id'], 400);
            }
        } catch (\Throwable $th) {
            Log::error(['error' => $th]);
            return response()->json(['status' => false, 'message' => 'Internal server error'], 500);
        }
    }

    public function getvaccinationDetails($patientId)
    {
        try {
            // $data = VaccinationDetailModel :: Where('patient_id',$patientId)->get();
            $data = VaccinationDetailModel::where('patient_id', $patientId)
                ->where('deleted_by', 0)
                ->orderBy('vaccine_date', 'desc')
                ->get()
                ->unique('vaccine_name')
                ->values();

            if (count($data) > 0) {
                return response()->json(['status' => true, 'message' => 'data retrived successfully', 'data' => $data], 200);
            } else {
                return response()->json(['status' => false, 'message' => 'data not found', 'data' => []], 200);
            }
        } catch (\Throwable $th) {
            Log::error(['error' => $th]);
            return response()->json(['status' => false, 'message' => 'Internal server error'], 500);
        }
    }

    public function getPrecriptionChart()
    {
        try {
            $chart = new DocexaVaccinationsChartModel();
            $data = $chart->getPrecriptionChartOf();
            if ($data) {
                $vaccineBrandGroups = DB::table('vaccine_brand_groups')->get();

                return response()->json(['status' => true, 'message' => 'data retrived successfully', 'code' => 200, 'data' => $data, 'vaccineBrandGroups' => $vaccineBrandGroups], 200);
            } else {
                return response()->json(['status' => true, 'message' => 'data not found', 'code' => 200, 'data' => []], 200);
            }
        } catch (\Throwable $th) {
            Log::error(['error' => $th]);
            return response()->json(['status' => false, 'message' => 'Internal server error'], 500);
        }
    }

    public function addBrandName(Request $request)
    {
        try {
            $input = $request->all();
            $vaccineType = DocexaVaccinationsChartModel::where('id', $input['vaccine_id'])->value('types');

            if ($vaccineType) {
                $newBrand = new brandModel();
                $newBrand->vaccination_name = $vaccineType;
                $newBrand->brand_name = $input['brand_name'];
                $save = $newBrand->save();

                if ($save) {
                    return response()->json(['status' => true, 'message' => 'brand added successfully', 'code' => 200], 200);
                } else {
                    return response()->json(['status' => false, 'message' => 'data not found', 'code' => 200], 200);
                }
            } else {
                return response()->json(['status' => false, 'message' => 'vaccine type not found', 'code' => 200]);
            }
        } catch (\Throwable $th) {
            return response()->json(['status' => false, 'message' => "Internal server error", 'error' => $th->getMessage()], 500);
        }
    }

    public function getVaccinationChartByUserMapId($usermapid)
    {
        try {
            $chart = new DocexaVaccinationsChartModel();
            $data = $chart->getPrecriptionChartOfWrtoUserMapId($usermapid);
            if ($data) {
                return response()->json(['status' => true, 'message' => 'data retrived successfully', 'code' => 200, 'data' => $data], 200);
            } else {
                return response()->json(['status' => true, 'message' => 'data not found', 'code' => 200, 'data' => []], 200);
            }
        } catch (\Throwable $th) {
            Log::error(['error' => $th]);
            return response()->json(['status' => false, 'message' => 'Internal server error'], 500);
        }
    }

    public function saveVaccinationDetails(Request $request)
    {
        try {
            $input = $request->all();
            $vaccine = new VaccinationDetailModel();
            // id, vaccine_name, vaccine_date, due_date, flag, brand_name, given_date, created_at, updated_at, prescription_id, notes, patient_id, user_map_id
            $vaccine->vaccine_name = $input['vaccine_name'];
            $vaccine->vaccine_date = $input['vaccine_date'];
            $vaccine->due_date = $input['due_date'];
            $vaccine->brand_name = $input['brand_name'];
            $vaccine->notes = $input['notes'];
            $vaccine->patient_id = $input['patient_id'];
            $vaccine->user_map_id = $input['user_map_id'];
            $vaccine->vaccine_category = $input['vaccine_category'];
            $vaccine->flag = $input['flag'];


            $save = $vaccine->save();

            $data = VaccinationDetailModel::Where('patient_id', $input['patient_id'])->get();

            if ($save) {
                return response()->json(['status' => true, 'message' => 'data saved successfully', 'data' => $data, 'code' => 200], 200);
            } else {
                return response()->json(['status' => false, 'message' => 'something went wrong', 'data' => [], 'code' => 400], 200);
            }
        } catch (\Throwable $th) {
            Log::error(['error' => $th]);
            return response()->json(['status' => false, 'message' => 'Internal server error', 'error' => $th->getMessage()], 500);
        }
    }


    public function saveVaccinationDetailsv1(Request $request)
    {
        try {
            $input = $request->all();
            // $vaccine = new VaccinationDetailModel();
            // id, vaccine_name, vaccine_date, due_date, flag, brand_name, given_date, created_at, updated_at, prescription_id, notes, patient_id, user_map_id
            foreach ($input as $data) {
                $vaccineExistForDue = VaccinationDetailModel::where('vaccine_name', $data['vaccine_name'])->where('patient_id', $data['patient_id'])->where('user_map_id', $data['user_map_id'])->first();

                if ($vaccineExistForDue) {
                    $vaccineExistForDue->vaccine_name = isset($data['vaccine_name']) ? $data['vaccine_name'] : null;
                    $vaccineExistForDue->vaccine_date = isset($data['vaccine_date']) ? $data['vaccine_date'] : null;
                    $vaccineExistForDue->due_date = isset($data['due_date']) ? $data['due_date'] : null;
                    $vaccineExistForDue->flag = 2;
                    $vaccineExistForDue->brand_name = isset($data['brand_name']) ? $data['brand_name'] : null;
                    $vaccineExistForDue->given_date = isset($data['given_date']) ? $data['given_date'] : null;
                    $vaccineExistForDue->prescription_id = isset($data['prescription_id']) ? $data['prescription_id'] : null;
                    $vaccineExistForDue->notes = isset($data['notes']) ? $data['notes'] : null;
                    $vaccineExistForDue->patient_id = $data['patient_id'];
                    $vaccineExistForDue->user_map_id = $data['user_map_id'];
                    $vaccineExistForDue->vaccine_category = isset($data['vaccine_category']) ? $data['vaccine_category'] : null;
                    $save = $vaccineExistForDue->save();
                } else {
                    $vaccine = new VaccinationDetailModel();
                    $vaccine->vaccine_name = isset($data['vaccine_name']) ? $data['vaccine_name'] : null;
                    $vaccine->vaccine_date = isset($data['vaccine_date']) ? $data['vaccine_date'] : null;
                    $vaccine->due_date = isset($data['due_date']) ? $data['due_date'] : null;
                    $vaccine->flag = 2;
                    $vaccine->brand_name = isset($data['brand_name']) ? $data['brand_name'] : null;
                    $vaccine->given_date = isset($data['given_date']) ? $data['given_date'] : null;
                    $vaccine->prescription_id = isset($data['prescription_id']) ? $data['prescription_id'] : null;
                    $vaccine->notes = isset($data['notes']) ? $data['notes'] : null;
                    $vaccine->patient_id = $data['patient_id'];
                    $vaccine->user_map_id = $data['user_map_id'];
                    $vaccine->vaccine_category = isset($data['vaccine_category']) ? $data['vaccine_category'] : null;
                    $save = $vaccine->save();
                }
            }
            $data = VaccinationDetailModel::Where('patient_id', $input[0]['patient_id'])->get();

            if ($save) {
                return response()->json(['status' => true, 'message' => 'data saved successfully', 'data' => $data, 'code' => 200], 200);
            } else {
                return response()->json(['status' => false, 'message' => 'something went wrong', 'data' => [], 'code' => 400], 200);
            }
        } catch (\Throwable $th) {
            Log::error(['error' => $th]);
            return response()->json(['status' => false, 'message' => 'Internal server error', 'error' => $th->getMessage()], 500);
        }
    }



    public function saveGivenVaccinationDetails(Request $request)
    {
        try {
            $input = $request->all();
            foreach ($input as $data) {
                $vaccine = new VaccinationDetailModel();
                $vaccine->vaccine_name = $data['vaccine_name'];
                $vaccine->vaccine_date = $data['vaccine_date'];
                $vaccine->brand_name = $data['brand_name'];
                $vaccine->given_date = $data['given_date'];
                $vaccine->notes = $data['notes'];
                $vaccine->patient_id = $data['patient_id'];
                $vaccine->user_map_id = $data['user_map_id'];
                $vaccine->vaccine_category = $data['vaccine_category'];
                $vaccine->flag = 1;
                $save = $vaccine->save();
            }
            $data = VaccinationDetailModel::Where('patient_id', $input[0]['patient_id'])->get();
            if ($save) {
                return response()->json(['status' => true, 'message' => 'data saved successfully', 'data' => $data, 'code' => 200], 200);
            } else {
                return response()->json(['status' => false, 'message' => 'something went wrong', 'data' => [], 'code' => 400], 200);
            }
        } catch (\Throwable $th) {
            Log::error(['error' => $th]);
            return response()->json(['status' => false, 'message' => 'Internal server error', 'error' => $th->getMessage()], 500);
        }
    }

    public function saveGivenVaccinationDetailsV1(Request $request)
    {
        try {
            $input = $request->all();


            foreach ($input as $data) {
                $time = DB::table('docexa_vaccinations_chart')->where('types', $data['vaccine_name'])->first()->time;
                $groupedVaccines = DB::table('vaccine_brand_groups')
                    ->where('brand_name', $data['brand_name'])
                    // ->where('vaccine_name' , $data['vaccine_name'])
                    ->where('time_slot', $time)
                    ->get(['vaccine_name', 'vaccine_category']);
                Log::info(['count($groupedVaccines)>0', count($groupedVaccines)]);
                if (count($groupedVaccines) > 0) {
                    foreach ($groupedVaccines as $grouped) {
                        $vaccineName = $grouped->vaccine_name;
                        $vaccineCategory = $grouped->vaccine_category;

                        $vaccineExistForDue = VaccinationDetailModel::where('vaccine_name', $vaccineName)->where('patient_id', $data['patient_id'])->where('user_map_id', $data['user_map_id'])->first();
                        Log::info(['vaccineExistForDue', $vaccineExistForDue]);
                        if ($vaccineExistForDue) {
                            $vaccineExistForDue->vaccine_name = $vaccineName;
                            $vaccineExistForDue->vaccine_date = $data['vaccine_date'];
                            $vaccineExistForDue->brand_name = $data['brand_name'];
                            $vaccineExistForDue->given_date = $data['given_date'];
                            $vaccineExistForDue->notes = $data['notes'];
                            $vaccineExistForDue->patient_id = $data['patient_id'];
                            $vaccineExistForDue->user_map_id = $data['user_map_id'];
                            $vaccineExistForDue->vaccine_category = $vaccineCategory;
                            $vaccineExistForDue->prescription_id = $data['prescription_id'];
                            $vaccineExistForDue->flag = 1;
                            $vaccineExistForDue->deleted_by = 0;
                            $save = $vaccineExistForDue->save();
                        } else {
                            $vaccine = new VaccinationDetailModel();
                            $vaccine->vaccine_name = $vaccineName;
                            $vaccine->vaccine_date = $data['vaccine_date'];
                            $vaccine->brand_name = $data['brand_name'];
                            $vaccine->given_date = $data['given_date'];
                            $vaccine->notes = $data['notes'];
                            $vaccine->patient_id = $data['patient_id'];
                            $vaccine->user_map_id = $data['user_map_id'];
                            $vaccine->vaccine_category = $vaccineCategory;
                            $vaccine->prescription_id = $data['prescription_id'];
                            $vaccine->flag = 1;
                            $vaccine->deleted_by = 0;
                            $save = $vaccine->save();
                        }
                    }
                } else {
                    $vaccineExistForDue = VaccinationDetailModel::where('vaccine_name', $data['vaccine_name'])->where('patient_id', $data['patient_id'])->where('user_map_id', $data['user_map_id'])->first();
                    Log::info(['vaccineExistForDue', $vaccineExistForDue]);
                    if ($vaccineExistForDue) {
                        $vaccineExistForDue->vaccine_name = $data['vaccine_name'];
                        $vaccineExistForDue->vaccine_date = $data['vaccine_date'];
                        $vaccineExistForDue->brand_name = $data['brand_name'];
                        $vaccineExistForDue->given_date = $data['given_date'];
                        $vaccineExistForDue->notes = $data['notes'];
                        $vaccineExistForDue->patient_id = $data['patient_id'];
                        $vaccineExistForDue->user_map_id = $data['user_map_id'];
                        $vaccineExistForDue->vaccine_category = $data['vaccine_category'];
                        $vaccineExistForDue->prescription_id = $data['prescription_id'];
                        $vaccineExistForDue->flag = 1;
                        $vaccineExistForDue->deleted_by = 0;
                        $save = $vaccineExistForDue->save();
                    } else {
                        $vaccine = new VaccinationDetailModel();
                        $vaccine->vaccine_name = $data['vaccine_name'];
                        $vaccine->vaccine_date = $data['vaccine_date'];
                        $vaccine->brand_name = $data['brand_name'];
                        $vaccine->given_date = $data['given_date'];
                        $vaccine->notes = $data['notes'];
                        $vaccine->patient_id = $data['patient_id'];
                        $vaccine->user_map_id = $data['user_map_id'];
                        $vaccine->vaccine_category = $data['vaccine_category'];
                        $vaccine->prescription_id = $data['prescription_id'];
                        $vaccine->flag = 1;
                        $vaccine->deleted_by = 0;
                        $save = $vaccine->save();
                    }
                }
            }
            $data = VaccinationDetailModel::Where('patient_id', $input[0]['patient_id'])->get();
            if ($save) {
                return response()->json(['status' => true, 'message' => 'data saved successfully', 'data' => $data, 'code' => 200], 200);
            } else {
                return response()->json(['status' => false, 'message' => 'something went wrong', 'data' => [], 'code' => 400], 200);
            }
        } catch (\Throwable $th) {
            Log::error(['error' => $th]);
            return response()->json(['status' => false, 'message' => 'Internal server error', 'error' => $th->getMessage()], 500);
        }
    }





    public function getPatientDetailsOfThetodaysPrecription(Request $request)
    {

        try {
            $input = $request->all();
            $doctorUserMap = DB::table('docexa_medical_establishments_medical_user_map')->where('id', $input['user_map_id'])->first()->medical_user_id;
            $doctorData = Doctor::where('pharmaclient_id', $doctorUserMap)->first();
            if ($doctorData) {
                $res = new AppointmentDetails();
                $data = $res->getTodaysPrescriptionSave($request);

                if (count($data) > 0) {
                    return response()->json(['status' => true, 'message' => 'Data fetched successfully', 'data' => $data], 200);
                } else {
                    return response()->json(['status' => false, 'message' => 'Data not found', 'data' => []], 200);
                }
            } else {
                return response()->json(['status' => false, 'message' => 'Doctor not found with this Id'], 401);
            }
        } catch (\Throwable $th) {
            Log::error(['error' => $th]);
            return response()->json(['status' => false, 'message' => 'Internal server error'], 500);
        }
    }

    public function offlineSyncedDataSave(Request $request, $usermapId, $patientId)
    {
        try {
            $input = $request->all();
            $isDoctorPatientRelationexist = Db::table('docexa_patient_doctor_relation')->where('user_map_id', $usermapId)->where('patient_id', $patientId)->first();
            if ($isDoctorPatientRelationexist) {
                $patientDetails = DB::table('docexa_patient_details')->where('patient_id', $patientId)->first();

                if ($patientDetails) {
                    $of = new OfflinePrescriptionDataModel();
                    $of->patient_name = $patientDetails->patient_name;
                    $of->age = $patientDetails->age;
                    $of->mobile_no = $patientDetails->mobile_no;
                    $of->prescription_image = $input['prescription_image'];
                    $of->patient_id = $patientId;
                    $of->user_map_id = $usermapId;
                    $save = $of->save();
                    if ($save) {
                        return response()->json(['status' => true, 'message' => 'Offline synced data saved', 'code' => 200], 200);
                    } else {
                        return response()->json(['status' => false, 'message' => 'something went wrong', 'code' => 400], 400);
                    }
                } else {
                    return response()->json(['status' => false, 'message' => 'patientdetail not found', 'code' => 200], 200);
                }
            }
        } catch (\Throwable $th) {
            Log::error(['error' => $th]);
            return response()->json(['status' => false, 'message' => 'Internal server error', 'code' => 500], 500);
        }
    }

    public function getofflineSyncedDataSave(Request $request, $usermapId, $patientId)
    {
        try {
            $isDoctorPatientRelationexist = Db::table('docexa_patient_doctor_relation')->where('user_map_id', $usermapId)->where('patient_id', $patientId)->first();
            if ($isDoctorPatientRelationexist) {
                $data = OfflinePrescriptionDataModel::where('patient_id', $patientId)->get();
                if (count($data) > 0) {
                    return response()->json(['status' => true, 'message' => 'data retrived successfully', 'data' => $data], 200);
                } else {
                    return response()->json(['status' => false, 'message' => 'data not found'], 200);
                }
            } else {
                return response()->json(['status' => false, 'message' => 'Patient doctor relation not exist', 'code'], 200);
            }
        } catch (\Throwable $th) {
            Log::error(['error' => $th]);
            return response()->json(['status' => false, 'message' => 'Internal server error', 'code' => 500], 500);
        }
    }



    public function getPrescriptionByPatientId($esteblishmentusermapID, $patientID, $page, $limit)
    {

        // Calculate the offset
        $offset = ($page - 1) * $limit;


        $isPatientDostor = DB::table('docexa_patient_doctor_relation')->where('user_map_id', $esteblishmentusermapID)->where('patient_id', $patientID)->first();
        if ($isPatientDostor) {
            $response = [];
            $data = PrescriptionData::where(array("patient_id" => $patientID, 'user_map_id' => $esteblishmentusermapID))->orderBy('created_at', 'DESC')
                ->offset($offset)
                ->limit($limit)
                ->get();

            $totalCount = PrescriptionData::where([
                'patient_id' => $patientID,
                'user_map_id' => $esteblishmentusermapID
            ])->count();

            foreach ($data as $row) {
                $usersapi = new UsersApi();
                $row->doctor = $usersapi->autologin($row->user_map_id);
                $row->vitals = Vital::where('prescription_id', $row->id)->get();

                // $response = Vitalconfig::leftJoin('doc_vital_user_map', function($join) use ($esteblishmentusermapID)
                // {
                //     $join->on('doc_vital_user_map.config_id','doc_vital_signs_config.id');
                //     $join->on('doc_vital_user_map.user_map_id','=', DB::raw($esteblishmentusermapID));
                // })->select('doc_vital_signs_config.*','doc_vital_user_map.config_id',DB::raw('if(isnull(doc_vital_user_map.config_id),0,1) as flag'))->get();

                // $row->vitals = $response;
                // $row->medication = PrescriptionItems::where('prescription_id', $row->id)->join('medication', 'medication.id', 'prescription_items.medication_id')->get();

                $row->medication = PrescriptionItems::select('prescription_items.*', 'medication.*', 'prescription_items.note as prescription_notes')
                    ->where('prescription_id', $row->id)
                    ->join('medication', 'medication.id', '=', 'prescription_items.medication_id')
                    ->get()
                    ->map(function ($item) {
                        // Transform the attributes of the item, converting null values to empty strings
                        foreach ($item->getAttributes() as $key => $value) {
                            if (is_null($value)) {
                                $item->$key = '';
                            }
                        }
                        return $item;
                    });



                $row->systemic_examination = Systemic_examination::where('prescription_id', $row->id)->first();
                $row->perscription_url = URL::to('/v1/generatepdf/' . $row->id);
                $row->vaccination_deatails = VaccinationDetailModel::where('prescription_id', $row->id)->get();
                $row->vaccination_due = VaccinationDetailModel::where('prescription_id', $row->id)->where('flag', 2)
                    ->where('deleted_by', 0)
                    ->get();
                $row->vaccination_given = VaccinationDetailModel::where('prescription_id', $row->id)->where('flag', 1)
                    ->where('deleted_by', 0)
                    ->get();
            }
            return response()->json(['status' => 'success', 'data' => $data, 'total_prescription' => $totalCount], 200);
        } else {
            return response()->json(['status' => 'failed', 'message' => 'doctor patient relation not exist'], 200);
        }
    }

    public function saveOfflineSynckedPrescription(Request $request, $esteblishmentusermapID, $patientId)
    {
        try {
            $input = $request->all();
            $prescription = new PrescriptionData();
            $prescription->patient_id = $patientId;
            $prescription->user_map_id = $esteblishmentusermapID;
            $prescription->prescription_image = isset($input['prescription_image']) ? $input['prescription_image'] : "";
            $prescription->date = $input['date'];
            $prescription->follow_up = isset($input['follow_up']) ? ($input['follow_up']) : null;
            $prescription->is_offline_add = 1;
            $prescription->pageId = isset($input['pageId']) ? $input['pageId'] : "";


            $save = $prescription->save();

            $OfflinePrescription = GeniePrecriptionModel::where('pageId', $input['pageId'])->where('user_map_id', $esteblishmentusermapID)->first();
            if ($OfflinePrescription) {
                $OfflinePrescription->is_prescription_upload = 1;
                $OfflinePrescription->patient_id = $patientId;
                $OfflinePrescription->save();
            }

            if ($save) {
                return response()->json(['status' => true, "message" => 'prescription saved successfully', 'code' => 200], 200);
            } else {
                return response()->json(['status' => false, "message" => 'something went wrong', 'code' => 400], 400);
            }
        } catch (\Throwable $th) {
            Log::error(['error' => $th]);
            return response()->json(['status' => false, 'message' => 'Internal server error', 'code' => 500, 'error' => $th->getMessage()], 500);
        }
    }
    public function deleteOfflineSynckedPrescription(Request $request, $prescriptionId, $pageId)
    {
        try {
            $prescription = PrescriptionData::find($prescriptionId);
            if ($prescription) {
                $delete = $prescription->delete();
                $OfflinePrescription = GeniePrecriptionModel::where('pageId', $pageId)->first();
                if ($OfflinePrescription) {
                    $OfflinePrescription->is_prescription_upload = 0;
                    $OfflinePrescription->save();
                }
                if ($delete) {
                    return response()->json(['status' => true, "message" => 'prescription delete successfully', 'code' => 200], 200);
                }
            } else {
                return response()->json(['status' => false, "message" => 'prescription not found', 'code' => 200], 200);
            }
        } catch (\Throwable $th) {
            Log::error(['error' => $th]);
            return response()->json(['status' => false, 'message' => 'Internal server error', 'code' => 500, 'error' => $th->getMessage()], 500);
        }
    }

    public function getPrescriptionSaved($usermapId, $patientId)
    {
        try {
            $prescriptionData = DB::table('prescription')->where('user_map_id', $usermapId)->where('patient_id', $patientId)->whereNotNull('prescription_image')->where('prescription_image', '!=', "")->orderby('created_at', 'desc')->get();
            if (count($prescriptionData) > 0) {
                return response()->json(['status' => true, "message" => 'Data retrived successfully', 'data' => $prescriptionData, 'code' => 200], 200);
            } else {
                return response()->json(['status' => false, 'message' => 'Data not found', 'data' => [], 'code' => 200], 200);
            }
        } catch (\Throwable $th) {
            Log::error(['error' => $th]);
            return response()->json(['status' => false, 'message' => 'Internal server error', 'code' => 500, 'error' => $th->getMessage()], 500);
        }
    }


    public function add_vital_assistant(Request $request)
    {
        $vitals = $request->all();

        foreach ($vitals as $v):
            $vital = new AssistantVital();
            $vital->vital_name = isset($v['name']) ? $v['name'] : null;
            $vital->value = isset($v['data']['vitals']) ? $v['data']['vitals'] : null;
            $vital->unit = isset($v['unit']) ? $v['unit'] : null;
            $vital->patient_id = $v['patient_id'];
            $vital->user_map_id = $v['user_map_id'];
            $vital->appointment_id = $v['appointment_id'];
            $vital->save();
        endforeach;
        $vitals = AssistantVital::where("appointment_id", $v['appointment_id'])->orderBy('created_at', 'desc')->get();
        return response()->json(['status' => true, "data" => $vitals, 'code' => 200], 200);
    }
    public function fetch_vital_assistant($appointment_id)
    {
        $vitals = AssistantVital::where("appointment_id", $appointment_id)->orderBy('created_at', 'desc')->get();
        return response()->json(['status' => true, "data" => $vitals, 'code' => 200], 200);
    }



    public function savePrescriptionV5($esteblishmentusermapID, Request $request)
    {
        try {

            $data = $request->all();
            Log::info(['dataaaaaaaaaaaaaaa' => $data]);
            $vitals = $data['vitals'];
            // Log::info(['vitalssssss' => $vitals , 'npote' =>  $data['note'] , 'image' => json_encode($data['prescription_image'])]);
            $prescription = new PrescriptionData();
            $prescription->user_map_id = $esteblishmentusermapID;
            $prescription->patient_id = $data['patient_id'];
            $prescription->booking_id = $data['booking_id'];
            //create appointment
            // if($prescription->booking_id == null || $prescription->booking_id == ""){
            //     $patient_data = Patientmaster::find($data['patient_id']);
            //     $arr = [
            //         "user_map_id"=>$esteblishmentusermapID,
            //         "patient_name"=>$patient_data->patient_name,
            //         "age"=>$patient_data->patient_name,
            //         "gender"=>$patient_data->gender,
            //         "patient_mobile_no"=>$patient_data->mobile_no,
            //         "email"=>$patient_data->email_id,
            //         "schedule_remark"=>"",
            //         "sku_id"=>0,
            //         "payment_mode"=>"direct",
            //         "payment_amount"=>0,
            //         "schedule_date"=>date('Y-m-d'),
            //         "schedule_time"=>date('HH:ii:ss'),
            //         "clinic_id"=>0
            //     ];
            //     $appt = new AppointmentDetails();
            //     $appt_response = $appt->createappointmentforprescription($arr);

            //     $prescription->booking_id = $appt_response["appointment_id"];
            // }
            $prescription->date = $data['date'];
            $prescription->note = isset($data['note']) ? ($data['note'] ? $data['note'] : json_encode($data['note'])) : null;
            $prescription->complaints = $data['complaints'] ? $data['complaints'] : null;
            $prescription->diagnosis = $data['diagnosis'] ? $data['diagnosis'] : null;
            $prescription->complaints_row = isset($data['complaints_row']) ? ($data['complaints_row'] ? $data['complaints_row'] : null) : null;
            $prescription->diagnosis_row = isset($data['diagnosis_row']) ? ($data['diagnosis_row'] ? $data['diagnosis_row'] : null) : null;
            $prescription->advice = $data['advice'] ? $data['advice'] : null;
            $prescription->test_requested = $data['test_requested'] ? $data['test_requested'] : null;
            $prescription->follow_up = isset($data['follow_up']) ? ($data['follow_up'] ? $data['follow_up'] : null) : null;
            $prescription->prescription_image = isset($data['prescription_image']) ? $data['prescription_image'] : "";

            $prescription->medical_history = isset($data['medical_history']) ? ($data['medical_history'] ? $data['medical_history'] : null) : null;


            $prescription->medical_history_row = isset($data['medical_history_row']) ? ($data['medical_history_row'] ? $data['medical_history_row'] : null) : null;


            $prescription->lifestyle = isset($data['lifestyle']) ? ($data['lifestyle'] ? $data['lifestyle'] : null) : null;
            $save = $prescription->save();
            Log::info(['save' => $save]);
            $medications = $data['medication'];
            if ($medications) {
                foreach ($medications as $med):

                    $medication = new Medication();
                    $medication->medication_name = $med['medication_name'];
                    $medication->note = isset($med['note']) ? $med['note'] : null;
                    $medication->durationValidity = isset($med['durationValidity']) ? $med['durationValidity'] : null;
                    $medication->save();

                    Log::info('addddd usermap drug list');
                    // id, user_map_id, medicine_name, medicine_type, content, manufacturer_name, created_at, updated_at
                    if (isset($med['isMasterData']) == true) {
                        Log::info(['isMasterData']);
                        $medicationWRTusermap = new DrugUserMap();
                        $medicationWRTusermap->user_map_id = $esteblishmentusermapID;
                        $medicationWRTusermap->medicine_name = $med['medication_name'];
                        $save = $medicationWRTusermap->save();
                        Log::info(['saveeeeeeeeeeeeeeee', $save]);
                    }

                    $pres_item = new PrescriptionItems();
                    $pres_item->prescription_id = $prescription->id;
                    $pres_item->medication_id = $medication->id;
                    $pres_item->quantity = isset($med['quantity']) ? $med['quantity'] : null;
                    $pres_item->duration = isset($med['duration']) ? $med['duration'] : null;
                    $pres_item->doses = isset($med['doses']) ? $med['doses'] : null;
                    $pres_item->timing = isset($med['timing']) ? $med['timing'] : null;
                    $pres_item->note = isset($med['note']) ? $med['note'] : null;
                    $pres_item->save();

                endforeach;
            }
            // id, vaccine_name, vaccine_date, due_date, flag, brand_name, given_date, created_at, updated_at, prescription_id

            $vaccination_details = $data['vaccination_details'];
            Log::info(['vaccination_deatails' => $vaccination_details]);
            if ($vaccination_details) {

                foreach ($vaccination_details as $vaccine_detail) {
                    $vaccine = new VaccinationDetailModel();
                    // Log::info(['vaccinationdetails' => $vaccine_detail['vaccine_date'],$vaccine_detail['due_date'] ,$vaccine_detail['given_date']]);
                    $vaccine->vaccine_name = isset($vaccine_detail['vaccine_name']) ? $vaccine_detail['vaccine_name'] : null;
                    $vaccine->vaccine_date = isset($vaccine_detail['vaccine_date']) ? $vaccine_detail['vaccine_date'] : null;
                    $vaccine->due_date = isset($vaccine_detail['due_date']) ? $vaccine_detail['due_date'] : null;
                    $vaccine->flag = isset($vaccine_detail['flag']) ? $vaccine_detail['flag'] : null;
                    $vaccine->brand_name = isset($vaccine_detail['brand_name']) ? $vaccine_detail['brand_name'] : null;
                    $vaccine->given_date = isset($vaccine_detail['given_date']) ? $vaccine_detail['given_date'] : null;
                    $vaccine->prescription_id = $prescription->id;
                    $vaccine->notes = isset($vaccine_detail['notes']) ? $vaccine_detail['notes'] : null;
                    $vaccine->patient_id = $data['patient_id'];

                    $vaccine->user_map_id = $esteblishmentusermapID;
                    $vaccine->vaccine_category = isset($vaccine_detail['vaccine_category']) ? $vaccine_detail['vaccine_category'] : null;

                    $vaccinationDetailSave = $vaccine->save();

                    Log::info(['vaccinationsave' => $vaccinationDetailSave]);
                }
            }
            $vitals = $data['vitals'];
            Log::info(['vitalssssss' => $vitals]);
            if ($vitals) {
                foreach ($vitals as $value) {
                    $vital = new Vital();
                    // Log::info(['value[name]' => $value['name']]);
                    $vital->sugar = isset($value['sugar']) ? $value['sugar'] : null;
                    $vital->bp = isset($value['bp']) ? $value['bp'] : null;
                    $vital->insuline = isset($value['insuline']) ? $value['insuline'] : null;
                    $vital->pulse = isset($value['pulse']) ? $value['pulse'] : null;
                    $vital->weight = isset($value['weight']) ? $value['weight'] : null;
                    $vital->height = isset($value['height']) ? $value['height'] : null;
                    $vital->bmi = isset($value['bmi']) ? $value['bmi'] : null;
                    $vital->rbs = isset($value['fbs']) ? $value['fbs'] : null;
                    $vital->fbs = isset($value['fbs']) ? $value['fbs'] : null;
                    $vital->hba1c = isset($value['hba1c']) ? $value['hba1c'] : null;
                    $vital->sugar = isset($value['sugar']) ? $value['sugar'] : null;
                    $vital->temperature = isset($value['temperature']) ? $value['temperature'] : null;
                    $vital->spo2 = isset($value['spo2']) ? $value['spo2'] : null;
                    $vital->sample_date = isset($value['sample_date']) ? $value['sample_date'] : null;
                    $vital->description = isset($value['description']) ? $value['description'] : null;
                    $vital->prescription_id = $prescription->id;
                    $vital->vital_name = isset($value['name']) ? $value['name'] : null;
                    $vital->value = isset($value['data']['vitals']) . $value['unit'] ? $value['data']['vitals'] . " " . $value['unit'] : null;
                    $vital->created_by = isset($value['created_by']) ? $value['created_by'] : null;
                    $valuesave = $vital->save();
                    Log::info(['valueave' => $valuesave]);
                }
            }


            $systemic_examinations = $data['systemic_examination'];
            $systemic_examination = new Systemic_examination();
            $systemic_examination->cvc = isset($systemic_examinations['cvc']) ? $systemic_examinations['cvc'] : null;
            $systemic_examination->ent = isset($systemic_examinations['ent']) ? $systemic_examinations['ent'] : null;
            $systemic_examination->rs = isset($systemic_examinations['rs']) ? $systemic_examinations['rs'] : null;
            $systemic_examination->pa = isset($systemic_examinations['pa']) ? $systemic_examinations['pa'] : null;
            $systemic_examination->cns = isset($systemic_examinations['cns']) ? $systemic_examinations['cns'] : null;
            $systemic_examination->gen = isset($systemic_examinations['gen']) ? $systemic_examinations['gen'] : null;
            $systemic_examination->prescription_id = $prescription->id;
            $systemic_examination->save();


            return $this->getPrescription($esteblishmentusermapID, $prescription->id);
        } catch (\Throwable $th) {
            Log::error(['errorr' => $th]);
        }
    }

    public function addVaccination(Request $request)
    {
        try {
            $input = $request->all();
            $add = new docexaVaccinationsChartUsermapidModel();
            // id, user_map_id, time, types, category, created_at
            $add->user_map_id = $input['user_map_id'];
            $add->time = $input['time'];
            $add->types = $input['types'];
            $add->category = $input['category'];
            $save = $add->save();

            $addBrand = new VaccinationBrandNameUsermapidModel();
            // id, user_map_id, vaccination_name, brand_name, created_at, updated_at
            $addBrand->vaccination_name = $input['types'];
            $addBrand->brand_name = $input['brand_name'];
            $addBrand->user_map_id = $input['user_map_id'];
            $saveBrand = $addBrand->save();

            if ($save && $saveBrand) {
                return response()->json(['success' => true, 'message' => 'Vaccination added', 'code' => 200], 200);
            } else {
                return response()->json(['success' => false, 'message' => 'something went wrong', 'code' => 400], 400);
            }
        } catch (\Throwable $th) {
            Log::error(['error' => $th]);
            return response()->json(['status' => false, 'message' => 'Internal server error', 'code' => 500, 'error' => $th->getMessage()], 500);
        }
    }


    public function getVaccinationDueList($usermapid, $patientId)
    {
        try {
            $daysNear = 6;
            $today = Carbon::today();

            $dueVaccination = VaccinationDetailModel::where('user_map_id', $usermapid)->where('patient_id', $patientId)
                ->whereNull('given_date')
                ->whereBetween('due_date', [$today, $today->copy()->addDays($daysNear)])
                ->orderBy('due_date', 'asc')
                ->get();

            $overdueVaccinations = VaccinationDetailModel::where('user_map_id', $usermapid)
                ->where('patient_id', $patientId)
                ->whereNull('given_date')
                ->where('due_date', '<', $today)
                ->get();

            $givenVaccination = VaccinationDetailModel::where('user_map_id', $usermapid)
                ->where('patient_id', $patientId)
                ->whereNotNull('given_date')
                ->orderBy('given_date', 'desc')
                ->get();

            $data = [
                "dueVaccination" => $dueVaccination,
                "overdueVaccination" => $overdueVaccinations,
                "givenVaccination" => $givenVaccination
            ];
            if (count($dueVaccination) > 0 || count($overdueVaccinations) > 0 || count($givenVaccination) > 0) {
                return response()->json(['status' => true, 'message' => ' data retrived successfully', 'data' => $data, 'code' => 200], 200);
            } else {
                return response()->json(['status' => false, 'message' => 'data not found', 'code' => 200], 200);
            }
        } catch (\Throwable $th) {
            Log::error(['error' => $th]);
            return response()->json(['status' => false, 'message' => 'Internal server error', 'code' => 500, 'error' => $th->getMessage()], 500);
        }
    }


    public function getVaccinationDueListByUserMap($usermapid, $patientId)
    {
        try {
            $daysNear = 6;
            $today = Carbon::today();

            $dueVaccinations = VaccinationDetailModel::where('user_map_id', $usermapid)
                ->where('patient_id', $patientId)
                ->where('deleted_by', 0)
                ->whereNull('given_date')
                ->whereBetween('due_date', [$today, $today->copy()->addDays($daysNear)])
                ->orderBy('due_date', 'asc')
                ->get();


            $overdueVaccinations = VaccinationDetailModel::where('user_map_id', $usermapid)
                ->where('patient_id', $patientId)
                ->where('deleted_by', 0)
                ->whereNull('given_date')
                ->where('due_date', '<', $today)
                ->orderBy('due_date', 'asc')
                ->get();

            $givenVaccinations = VaccinationDetailModel::where('user_map_id', $usermapid)
                ->where('patient_id', $patientId)
                ->where('deleted_by', 0)
                ->whereNotNull('given_date')
                ->orderBy('given_date', 'desc')
                ->get();

            $data = [
                'due' => $dueVaccinations,
                'dueLength' => $dueVaccinations->count(),
                'overdue' => $overdueVaccinations,
                'overdueLength' => $overdueVaccinations->count(),
                'given' => $givenVaccinations,
                'givenLength' => $givenVaccinations->count()
            ];


            if (
                count($dueVaccinations) > 0 || count($overdueVaccinations) > 0 || count($givenVaccinations) > 0
            ) {
                return response()->json(['status' => true, 'message' => 'data retrived successfully', 'data' => $data, 'code' => 200], 200);
            } else {
                return response()->json(['status' => false, 'message' => 'data not found', 'code' => 400], 400);
            }
        } catch (\Throwable $th) {
            Log::error(['error' => $th]);
            return response()->json(['status' => false, 'message' => 'Internal server error', 'code' => 500, 'error' => $th->getMessage()], 500);
        }
    }

    public function prescriptionNotesSave(Request $request, $usermapId, $patientId)
    {

        try {
            $input = $request->all();
            $pres = new PrescriptionNotesModel();
            //  id, user_map_id, patient_id, notes, private_notes, created_at, updated_at
            $pres->user_map_id = $usermapId;
            $pres->patient_id = $patientId;
            $pres->private_notes = $input['private_notes'];
            $save = $pres->save();
            if ($save) {
                return response()->json(['status' => true, 'message' => 'data saved successfully', 'code' => 200], 200);
            } else {
                return response()->json(['status' => false, 'message' => 'something went wrong', 'code' => 400], 400);
            }
        } catch (\Throwable $th) {
            Log::error(['error' => $th]);
            return response()->json(['status' => false, 'message' => 'Internal server error', 'code' => 500, 'error' => $th->getMessage()], 500);
        }
    }

    public function getprescriptionNotesSave($usermapId, $patientId)
    {
        try {
            $data = PrescriptionNotesModel::where('user_map_id', $usermapId)->where('patient_id', $patientId)->get();
            if (count($data) > 0) {
                return response()->json(['status' => true, 'message' => 'data retrived successfully', 'data' => $data, 'code' => 200], 200);
            } else {
                return response()->json(['status' => false, 'message' => 'data not found', 'code' => 400], 400);
            }
        } catch (\Throwable $th) {
            Log::error(['error' => $th]);
            return response()->json(['status' => false, 'message' => 'Internal server error', 'code' => 500, 'error' => $th->getMessage()], 500);
        }
    }

    public function setFlagForPatient(Request $request)
    {
        try {
            $input = $request->all();
            $patient = DB::table('docexa_patient_doctor_relation')->where('user_map_id', $input['user_map_id'])->where('patient_id', $input['patient_id'])->first();
            if ($patient) {
                $update = DB::table('docexa_patient_doctor_relation')
                    ->where('user_map_id', $input['user_map_id'])
                    ->where('patient_id', $input['patient_id'])
                    ->update(['flag_for_patient_type' => $input['flag_for_patient_type']]);
                if ($update) {
                    return response()->json(['status' => true, 'message' => 'Flag update successfully', 'code' => 200], 200);
                } else {
                    return response()->json(['status' => false, 'message' => 'something went wrong', 'code' => 400], 400);
                }
            } else {
                return response()->json(['status' => false, 'message' => 'patient not found', 'code' => 400], 400);
            }
        } catch (\Throwable $th) {
            Log::error(['error' => $th]);
            return response()->json(['status' => false, 'message' => 'Internal server error', 'code' => 500, 'error' => $th->getMessage()], 500);
        }
    }
    public function getflagStatusOfPatient($usermapId, $patientId)
    {
        try {
            $data = DB::table('docexa_patient_doctor_relation')->where('user_map_id', $usermapId)->where('patient_id', $patientId)->first();
            if ($data) {
                $status[] = [
                    "patient_id" => $data->patient_id,
                    "user_map_id" => $data->user_map_id,
                    "flag_for_patient_type" => $data->flag_for_patient_type
                ];

                return response()->json(['status' => true, 'message' => 'data retrived successfully', 'data' => $status, 'code' => 200], 200);
            } else {
                return response()->json(['status' => false, 'message' => 'data not found', 'code' => 400], 400);
            }
        } catch (\Throwable $th) {
            Log::error(['error' => $th]);
            return response()->json(['status' => false, 'message' => 'Internal server error', 'code' => 500, 'error' => $th->getMessage()], 500);
        }
    }
    public function getVaccinationGiven($usermapid, $patientId)
    {
        try {
            $givenVaccinations = DB::table('vaccination_details AS vd')
                ->select([
                    'vd.id AS vaccination_id',
                    'vd.vaccine_name AS vaccination_name',
                    'vd.vaccine_date',
                    'vd.due_date',
                    'vd.flag',
                    'vd.brand_name',
                    'vd.given_date',
                    'vd.created_at AS vaccination_created_at',
                    'vd.updated_at AS vaccination_updated_at',
                    'vd.prescription_id',
                    'vd.notes',
                    'vd.patient_id',
                    'vd.user_map_id',
                    'vd.vaccine_category',
                ])
                ->where('vd.user_map_id', $usermapid)
                ->where('vd.patient_id', $patientId)
                ->get()
                ->keyBy('vaccination_name');

            Log::info(['givenVaccinations', $givenVaccinations]);

            $ungivenVaccinations = DB::table('docexa_vaccinations_chart AS dvc')
                ->whereNotIn('dvc.types', function ($query) use ($usermapid, $patientId) {
                    $query->select('vd.vaccine_name')
                        ->from('vaccination_details AS vd')
                        ->where('vd.user_map_id', $usermapid)
                        ->where('vd.patient_id', $patientId);
                })
                ->select('dvc.*')
                ->get();

            Log::info(['ungivenVaccinations', $ungivenVaccinations]);

            $docexaVaccinationRows = DB::table('docexa_vaccinations_chart')->get();


            $combinedVaccinations = $docexaVaccinationRows->map(function ($chartRow) use ($givenVaccinations, $ungivenVaccinations) {
                $vaccinationName = $chartRow->types;
                return $givenVaccinations->get($vaccinationName) ?? $ungivenVaccinations->firstWhere(
                    'types',
                    $vaccinationName
                );
            });


            $allVaccinations = $combinedVaccinations->values();


            if (
                count(
                    $ungivenVaccinations
                ) > 0
            ) {
                return response()->json([
                    'status' => true,
                    'message' => 'data retrived successfully',
                    'code' => 200,
                    'data' => $allVaccinations,
                    'lenth' => sizeof($givenVaccinations)
                ], 200);
            } else {
                return response()->json(['status' => true, 'message' => 'data not found', 'code' => 200, 'data' => []], 200);
            }
        } catch (\Throwable $th) {
            Log::error(['error' => $th]);
            return response()->json(['status' => false, 'message' => 'Internal server error'], 500);
        }
    }

    public function UpdateGivenVaccinationDetails(Request $request)
    {
        try {
            $input = $request->all();
            foreach ($input as $data) {
                $time = DB::table('docexa_vaccinations_chart')->where('types', $data['vaccine_name'])->first()->time;
                $groupedVaccines = DB::table('vaccine_brand_groups')
                    ->where('brand_name', $data['brand_name'])
                    ->where('time_slot', $time)
                    ->get(['vaccine_name', 'vaccine_category']);
                Log::info(['count(groupedVaccines)', count($groupedVaccines)]);
                if (count($groupedVaccines) > 0) {
                    foreach ($groupedVaccines as $grouped) {
                        $vaccineName = $grouped->vaccine_name;
                        $vaccineCategory = $grouped->vaccine_category;

                        $vaccinefind = VaccinationDetailModel::where('patient_id', $data['patient_id'])->where('user_map_id', $data['user_map_id'])->where('vaccine_name', $vaccineName)->first();

                        if ($vaccinefind) {
                            $vaccinefind->vaccine_name = $vaccineName;
                            $vaccinefind->vaccine_date = isset($data['vaccine_date']) ? $data['vaccine_date'] : null;
                            $vaccinefind->brand_name = isset($data['brand_name']) ? $data['brand_name'] : null;
                            $vaccinefind->given_date = isset($data['given_date']) ? $data['given_date'] : null;
                            // $vaccine->prescription_id = isset($data['prescription_id']) ? $data['prescription_id'] : null;
                            $vaccinefind->notes = isset($data['notes']) ? $data['notes'] : null;
                            $vaccinefind->patient_id = $data['patient_id'];
                            $vaccinefind->user_map_id = $data['user_map_id'];
                            $vaccinefind->flag = 1;
                            $vaccinefind->deleted_by = 0;
                            $vaccinefind->vaccine_category = $vaccineCategory;
                            $save = $vaccinefind->save();
                        }
                    }
                } else {
                    $vaccine = VaccinationDetailModel::find($data['id']);
                    if ($vaccine) {
                        $vaccine = VaccinationDetailModel::find($data['id']);
                        $vaccine->vaccine_name = isset($data['vaccine_name']) ? $data['vaccine_name'] : null;
                        $vaccine->vaccine_date = isset($data['vaccine_date']) ? $data['vaccine_date'] : null;
                        $vaccine->brand_name = isset($data['brand_name']) ? $data['brand_name'] : null;
                        $vaccine->given_date = isset($data['given_date']) ? $data['given_date'] : null;
                        // $vaccine->prescription_id = isset($data['prescription_id']) ? $data['prescription_id'] : null;
                        $vaccine->notes = isset($data['notes']) ? $data['notes'] : null;
                        $vaccine->patient_id = $data['patient_id'];
                        $vaccine->user_map_id = $data['user_map_id'];
                        $vaccine->flag = 1;
                        $vaccine->deleted_by = 0;
                        $vaccine->vaccine_category = isset($data['vaccine_category']) ? $data['vaccine_category'] : null;
                        $save = $vaccine->save();
                    }
                }
            }
            if ($save) {
                return response()->json(['status' => true, 'message' => 'data update successfully', 'code' => 200], 200);
            } else {
                return response()->json(['status' => false, 'message' => 'something went wrong', 'data' => [], 'code' => 400], 200);
            }
        } catch (\Throwable $th) {
            Log::error(['error' => $th]);
            return response()->json(['status' => false, 'message' => 'Internal server error', 'error' => $th->getMessage()], 500);
        }
    }
    public function UpdateDueVaccinationDetails(Request $request)
    {
        try {
            $input = $request->all();
            // $vaccine = new VaccinationDetailModel();
            // id, vaccine_name, vaccine_date, due_date, flag, brand_name, given_date, created_at, updated_at, prescription_id, notes, patient_id, user_map_id
            foreach ($input as $data) {
                $vaccine = VaccinationDetailModel::find($data['id']);
                $vaccine->vaccine_name = isset($data['vaccine_name']) ? $data['vaccine_name'] : null;
                $vaccine->vaccine_date = isset($data['vaccine_date']) ? $data['vaccine_date'] : null;
                $vaccine->due_date = isset($data['due_date']) ? $data['due_date'] : null;
                $vaccine->brand_name = isset($data['brand_name']) ? $data['brand_name'] : null;
                $vaccine->given_date = isset($data['given_date']) ? $data['given_date'] : null;
                $vaccine->prescription_id = isset($data['prescription_id']) ? $data['prescription_id'] : null;
                $vaccine->notes = isset($data['notes']) ? $data['notes'] : null;
                $vaccine->patient_id = $data['patient_id'];
                $vaccine->user_map_id = $data['user_map_id'];
                $vaccine->flag = 2;
                $vaccine->deleted_by = 0;
                $vaccine->vaccine_category = isset($data['vaccine_category']) ? $data['vaccine_category'] : null;
                $save = $vaccine->save();
            }
            // $data = VaccinationDetailModel::Where('patient_id', $input[0]['patient_id'])->get();

            if ($save) {
                return response()->json(['status' => true, 'message' => 'data saved successfully', 'code' => 200], 200);
            } else {
                return response()->json(['status' => false, 'message' => 'something went wrong', 'code' => 400], 400);
            }
        } catch (\Throwable $th) {
            Log::error(['error' => $th]);
            return response()->json(['status' => false, 'message' => 'Internal server error', 'error' => $th->getMessage()], 500);
        }
    }

    public function VaccinationPrescriptionUpdate(Request $request)
    {
        try {
            $input = $request->all();
            $vaccine = VaccinationDetailModel::find($input['vaccination_id']);

            if ($vaccine) {
                $vaccine->prescription_id = $input['prescription_id'];
                $save = $vaccine->save();

                if ($save) {
                    return response()->json(['status' => true, 'message' => 'data update successfully', 'code' => 200], 200);
                } else {
                    return response()->json(['status' => false, 'message' => 'Something went wrong', 'code' => 400], 400);
                }
            } else {
                return response()->json(['status' => false, 'message' => 'data not found', 'code' => 200], 200);
            }
        } catch (\Throwable $th) {
            Log::innfo(['error' => $th]);
            return response()->json(['status' => false, 'message' => 'Internal server error', 'error' => $th->getMessage(), 'code' => 500], 500);
        }
    }

    public function VaccinationBrandUpdate(Request $request)
    {
        try {
            $input = $request->all();
            $vaccine = VaccinationDetailModel::find($input['vaccination_id']);
            if ($vaccine) {
                // id, vaccine_name, vaccine_date, due_date, flag, brand_name, given_date, created_at, updated_at, prescription_id, notes, patient_id, user_map_id, vaccine_category
                $vaccine->brand_name = isset($input['brand_name']) ? $input['brand_name'] : $vaccine['brand_name'];
                $vaccine->prescription_id = isset($input['prescription_id']) ? $input['prescription_id'] : $vaccine['prescription_id'];
                $vaccine->due_date = isset($input['due_date']) ? $input['due_date'] : $vaccine['due_date'];
                $vaccine->given_date = isset(($input['given_date'])) ? $input['given_date'] : $vaccine['given_date'];
                $vaccine->vaccine_name = isset($inputp['vaccine_name']) ? $input['vaccine_name'] : $vaccine['vaccine_name'];
                $vaccine->notes = isset($input['notes']) ? $input['notes'] : $vaccine['notes'];

                $save = $vaccine->save();
                if ($save) {
                    return response()->json(['status' => true, 'message' => 'data update successfully', 'code' => 200], 200);
                } else {
                    return response()->json(['status' => false, 'message' => 'something went wrong', 'code' => 400], 400);
                }
            } else {
                return response()->json(['status' => false, 'message' => 'Data not found', 'code' => 200], 200);
            }
        } catch (\Throwable $th) {
            Log::info(['error' => $th]);
            return resonse()->json(['status' => false, 'message' => 'Internal server error', 'error' => $th->getMessage(), 'code', 500], 500);
        }
    }
    public function updatePrescriptionV1(Request $request)
    {
        try {
            // id, patient_id, user_map_id, payment_method_id, booking_id, date, note, created_at, updated_at, complaints, diagnosis, advice, test_requested, follow_up, diagnosis_row, complaints_row, prescription_image, medical_history, lifestyle, medical_history_row, is_offline_add, pageId
            $input = $request->all();
            $prescriptionData = PrescriptionData::find($input['id']);
            $prescriptionData->prescription_image = $input['prescription_image'];
            $save = $prescriptionData->save();
            if ($save) {
                return response()->json(['status' => true, 'message' => 'Prescription update successfully', 'code' => 200], 200);
            } else {
                return response()->json(['status' => false, 'message' => 'Something went wrong', 'code' => 400], 400);
            }
        } catch (\Throwable $th) {
            Log::info(['error' => $th]);
            dd($th);
            return resonse()->json(['status' => false, 'message' => 'Internal server error', 'error' => $th->getMessage(), 'code', 500], 500);
        }
    }
    public function savePrescriptionV6($esteblishmentusermapID, Request $request)
    {
        try {

            $data = $request->all();
            Log::info(['dataaaaaaaaaaaaaaa' => $data]);

            $prescriptionExist = PrescriptionData::find($data['prescription_id']);
            if ($prescriptionExist) {
                $prescriptionExist->prescription_image = isset($data['prescription_image']) ? $data['prescription_image'] : "";
                $save = $prescriptionExist->save();
            } else {
                $prescription = new PrescriptionData();
                $prescription->user_map_id = $esteblishmentusermapID;
                $prescription->patient_id = $data['patient_id'];
                $prescription->prescription_image = isset($data['prescription_image']) ? $data['prescription_image'] : "";
                $save = $prescription->save();
            }

            Log::info(['save' => $save]);

            if ($save) {
                return response()->json(['status' => true, 'message' => 'Prescription saved successfully', 'prescription-id' => $prescription->id, 'code' => 200], 200);
            } else {
                return response()->json(['status' => false, 'message' => 'Something went wrong', 'code' => 400], 400);
            }

            // return $this->getPrescription($esteblishmentusermapID, $prescription->id);
        } catch (\Throwable $th) {
            Log::error(['errorr' => $th]);
        }
    }


    public function saveVaccinationDetailsv1w(Request $request)
    {
        try {
            $input = $request->all();
            Log::info(['inputttt' => $input]);
            // $vaccine = new VaccinationDetailModel();
            // id, vaccine_name, vaccine_date, due_date, flag, brand_name, given_date, created_at, updated_at, prescription_id, notes, patient_id, user_map_id
            foreach ($input as $data) {
                $vaccineExistForDue = VaccinationDetailModel::where('user_map_id', $data['user_map_id'])->where('patient_id', $data['patient_id'])->where('vaccine_name', $data['vaccine_name'])->first();

                if ($vaccineExistForDue) {
                    $vaccineExistForDue->vaccine_name = isset($data['vaccine_name']) ? $data['vaccine_name'] : null;
                    $vaccineExistForDue->vaccine_date = isset($data['vaccine_date']) ? $data['vaccine_date'] : null;
                    $vaccineExistForDue->due_date = isset($data['due_date']) ? $data['due_date'] : null;
                    $vaccineExistForDue->flag = 2;
                    $vaccineExistForDue->deleted_by = 0;
                    $vaccineExistForDue->brand_name = isset($data['brand_name']) ? $data['brand_name'] : null;
                    $vaccineExistForDue->given_date = isset($data['given_date']) ? $data['given_date'] : null;
                    $vaccineExistForDue->prescription_id = isset($data['prescription_id']) ? $data['prescription_id'] : null;
                    $vaccineExistForDue->notes = isset($data['notes']) ? $data['notes'] : null;
                    $vaccineExistForDue->patient_id = $data['patient_id'];
                    $vaccineExistForDue->user_map_id = $data['user_map_id'];
                    $vaccineExistForDue->vaccine_category = isset($data['vaccine_category']) ? $data['vaccine_category'] : null;
                    $save = $vaccineExistForDue->save();

                    $patientData = Patientmaster::find($data['patient_id']);
                    // [patient_name] is due for [vaccine_name] vaccine on ([date]). For more details Visit Dr - Team GSTDOC Globalspace Technologies Ltd
                    if ($save) {
                        $ctrl = new Controller();
                        $notificationdata = [
                            'template' => 'patient_vaccination_due',
                            'vaccine_name' => isset($data['vaccine_name']) ? $data['vaccine_name'] : null,
                            'due_date' => isset($data['due_date']) ? Carbon::parse($data['due_date'])->format('Y-m-d') : null,
                            'patientdata' => $patientData,

                        ];
                        Log::info(['send1']);
                        $ctrl->sendNotificationOfVaccination($notificationdata);
                    }
                } else {
                    $patientData = Patientmaster::find($data['patient_id']);
                    $vaccine = new VaccinationDetailModel();
                    $vaccine->vaccine_name = isset($data['vaccine_name']) ? $data['vaccine_name'] : null;
                    $vaccine->vaccine_date = isset($data['vaccine_date']) ? $data['vaccine_date'] : null;
                    $vaccine->due_date = isset($data['due_date']) ? $data['due_date'] : null;
                    $vaccine->flag = 2;
                    $vaccine->deleted_by = 0;
                    $vaccine->brand_name = isset($data['brand_name']) ? $data['brand_name'] : null;
                    $vaccine->given_date = isset($data['given_date']) ? $data['given_date'] : null;
                    $vaccine->prescription_id = isset($data['prescription_id']) ? $data['prescription_id'] : null;
                    $vaccine->notes = isset($data['notes']) ? $data['notes'] : null;
                    $vaccine->patient_id = $data['patient_id'];
                    $vaccine->user_map_id = $data['user_map_id'];
                    $vaccine->vaccine_category = isset($data['vaccine_category']) ? $data['vaccine_category'] : null;
                    $save = $vaccine->save();
                    if ($save) {
                        $ctrl = new Controller();
                        $notificationdata = [
                            'template' => 'patient_vaccination_due',
                            'vaccine_name' => isset($data['vaccine_name']) ? $data['vaccine_name'] : null,
                            'due_date' => isset($data['due_date']) ? Carbon::parse($data['due_date'])->format('Y-m-d') : null,
                            'patientdata' => $patientData
                        ];
                        Log::info(['send1']);
                        $ctrl->sendNotificationOfVaccination($notificationdata);
                    }
                }
            }
            $data = VaccinationDetailModel::Where('patient_id', $input[0]['patient_id'])->get();

            if ($save) {
                return response()->json(['status' => true, 'message' => 'data saved successfully', 'data' => $data, 'code' => 200], 200);
            } else {
                return response()->json(['status' => false, 'message' => 'something went wrong', 'data' => [], 'code' => 400], 200);
            }
        } catch (\Throwable $th) {
            Log::error(['error' => $th]);
            return response()->json(['status' => false, 'message' => 'Internal server error', 'error' => $th->getMessage()], 500);
        }
    }

    public function getsymptomsv5($esteblishmentusermapID = null)
    {
        if ($esteblishmentusermapID == null) {
            $data['symptoms'] = DB::table('consult_complaints')->pluck('name');
            $data['diagnosis'] = DB::table('consult_diagnosis')->get();
            $data['advices'] = DB::table('consult_advice')->get();
            $data['medicaltests'] = DB::table('consult_tests')->get();
            $data['lifestyle'] = DB::table('lifestyle_master')->get();
            $data['medical'] = DB::table('medical_history')->get();
            $data['medicine_type'] = DB::table('docexa_medicine_types')->get();

            return response()->json(['status' => 'success', 'data' => $data], 200);
        } else {
            $symptoms1 = DB::table('consult_complaints')->select('name')->get();
            $symptoms2 = DB::table('prescription')->distinct()->where(array('user_map_id' => $esteblishmentusermapID))->where('complaints', '!=', '')->select('complaints as name')->get();
            $prescribesymtoms = [];
            $data['symptoms'] = [];

            foreach ($symptoms2 as $sym) {
                $exploadeddata = explode(",", $sym->name);
                foreach ($exploadeddata as $exdata) {
                    $prescribesymtoms[] = ['name' => trim($exdata)];
                }
            }
            foreach ($symptoms1 as $sym) {
                $prescribesymtoms[] = ['name' => trim($sym->name)];
            }
            $prescribesymtoms = array_unique($prescribesymtoms, SORT_REGULAR);
            foreach ($prescribesymtoms as $val) {
                $data['symptoms'][] = $val;
            }



            $diagnosis1 = DB::table('consult_diagnosis')->select('name')->get();
            $diagnosis2 = DB::table('prescription')->distinct()->where(array('user_map_id' => $esteblishmentusermapID))->where('diagnosis', '!=', '')->select('diagnosis as name')->get();
            //$data['diagnosis'] = $diagnosis2->union($diagnosis1)->get();
            $prescribesymtoms = [];
            $data['diagnosis'] = [];

            foreach ($diagnosis2 as $sym) {
                $exploadeddata = explode(",", $sym->name);
                foreach ($exploadeddata as $exdata) {
                    $prescribesymtoms[] = ['name' => trim($exdata)];
                }
            }
            foreach ($diagnosis1 as $sym) {
                $prescribesymtoms[] = ['name' => trim($sym->name)];
            }
            $prescribesymtoms = array_unique($prescribesymtoms, SORT_REGULAR);
            foreach ($prescribesymtoms as $val) {
                $data['diagnosis'][] = $val;
            }

            $advices1 = DB::table('consult_advice')->select('name')->get();
            $advices2 = DB::table('prescription')->distinct()->where(array('user_map_id' => $esteblishmentusermapID))->where('advice', '!=', '')->select('advice as name')->get();
            //$data['advices'] = $advices2->union($advices1)->get();
            $prescribesymtoms = [];
            $data['advices'] = [];

            foreach ($advices2 as $sym) {
                $exploadeddata = explode(",", $sym->name);
                foreach ($exploadeddata as $exdata) {
                    if (trim($exdata) != "")
                        $prescribesymtoms[] = ['name' => trim($exdata)];
                }
            }
            foreach ($advices1 as $sym) {
                if (trim($sym->name) != "")
                    $prescribesymtoms[] = ['name' => trim($sym->name)];
            }
            $prescribesymtoms = array_unique($prescribesymtoms, SORT_REGULAR);
            foreach ($prescribesymtoms as $val) {
                $data['advices'][] = $val;
            }

            $medicaltests1 = DB::table('consult_tests')->select('name')->get();
            $medicaltests2 = DB::table('prescription')->distinct()->where(array('user_map_id' => $esteblishmentusermapID))->where('test_requested', '!=', '')->select('test_requested as name')->get();
            //$data['medicaltests'] = $medicaltests2->union($medicaltests1)->get();
            $prescribesymtoms = [];
            $data['medicaltests'] = [];

            foreach ($medicaltests2 as $sym) {
                $exploadeddata = explode(",", $sym->name);
                foreach ($exploadeddata as $exdata) {
                    if (trim($exdata) != "")
                        $prescribesymtoms[] = ['name' => trim($exdata)];
                }
            }
            foreach ($medicaltests1 as $sym) {
                if (trim($sym->name) != "")
                    $prescribesymtoms[] = ['name' => trim($sym->name)];
            }
            $prescribesymtoms = array_unique($prescribesymtoms, SORT_REGULAR);
            foreach ($prescribesymtoms as $val) {
                $data['medicaltests'][] = $val;
            }


            // medical_history
            $mediacalhistory1 = DB::table('medical_history')->select('name')->get();
            $medicalhistory2 = DB::table('prescription')->distinct()->where(array('user_map_id' => $esteblishmentusermapID))->where('medical_history', '!=', '')->select('medical_history as name')->get();

            $prescribesymtoms = [];
            $data['medical_history'] = [];

            foreach ($medicalhistory2 as $medi) {
                $exploadeddata = explode(",", $medi->name);
                foreach ($exploadeddata as $exdata) {
                    $prescribesymtoms[] = ['name' => trim($exdata)];
                }
            }
            foreach ($mediacalhistory1 as $medi) {
                $prescribesymtoms[] = ['name' => trim($medi->name)];
            }
            $prescribesymtoms = array_unique($prescribesymtoms, SORT_REGULAR);
            foreach ($prescribesymtoms as $val) {
                $data['medical_history'][] = $val;
            }

            // lifestyle
            $lifestyle1 = DB::table('lifestyle_master')->get();
            $lifestyle2 = DB::table('prescription')->distinct()->where(array('user_map_id' => $esteblishmentusermapID))->where('lifestyle', '!=', '')->select('lifestyle as name')->get();

            $prescribesymtoms = [];
            $data['lifestyle'] = [];

            foreach ($lifestyle2 as $li) {
                $exploadeddata = explode(",", $li->name);
                foreach ($exploadeddata as $exdata) {
                    $prescribesymtoms[] = ['name' => trim($exdata)];
                }
            }
            foreach ($lifestyle1 as $li) {
                $prescribesymtoms[] = ['name' => trim($li->name)];
            }
            $prescribesymtoms = array_unique($prescribesymtoms, SORT_REGULAR);
            foreach ($prescribesymtoms as $val) {
                $data['lifestyle'][] = $val;
            }
            // medicine types
            $medicineType1 = DB::table('docexa_medicine_types')->get();
            //  $medicineType2 = DB::table('prescription')->distinct()->where(array('user_map_id'=>$esteblishmentusermapID))->where('lifestyle','!=','')->select('lifestyle as name')->get();

            $prescribesymtoms = [];
            $data['medicine_type'] = [];

            //  foreach($medicineType2 as $li){
            //      $exploadeddata = explode("," ,$li->name);
            //      foreach($exploadeddata as $exdata){
            //          $prescribesymtoms[] = ['name' => trim($exdata)]; 
            //      }
            //  }
            foreach ($medicineType1 as $li) {
                $prescribesymtoms[] = [
                    'id' => trim($li->id),
                    'name' => trim($li->name)
                ];
            }
            $prescribesymtoms = array_unique($prescribesymtoms, SORT_REGULAR);
            foreach ($prescribesymtoms as $val) {
                $data['medicine_type'][] = $val;
            }


            return response()->json(['status' => 'success', 'data' => $data], 200);
        }
    }


    public function getSymptomsSearch($esteblishmentusermapID, Request $request)
    {
        try {
            $parameter = $request->all();
            $page = (isset($parameter['page'])) ? $parameter['page'] : 1;
            $per_page = (isset($parameter['per_page'])) ? $parameter['per_page'] : 20;
            $prefix_term = (isset($parameter['prefix_term'])) ? $parameter['prefix_term'] : "";

            $count = ((int) $page - 1) * ((int) $per_page);

            $symptoms1 = DB::table('consult_complaints')->select('name')->get();

            $symptoms2 = DB::table('prescription')->distinct()->where(array('user_map_id' => $esteblishmentusermapID))->where('complaints', '!=', '')->select('complaints as name')->get();
            $prescribesymtoms = [];
            $data['symptoms'] = [];

            $symptoms3 = DB::table('consult_complaints_usermap')->select('name')->get();

            foreach ($symptoms2 as $sym) {
                $exploadeddata = explode(",", $sym->name);
                foreach ($exploadeddata as $exdata) {
                    $prescribesymtoms[] = ['name' => trim($exdata)];
                }
            }
            foreach ($symptoms1 as $sym) {
                $prescribesymtoms[] = ['name' => trim($sym->name)];
            }
            foreach ($symptoms3 as $sym) {
                $prescribesymtoms[] = ['name' => trim($sym->name)];
            }
            $prescribesymtoms = array_unique($prescribesymtoms, SORT_REGULAR);
            foreach ($prescribesymtoms as $val) {
                $data['symptoms'][] = $val;
            }

            if (!empty($prefix_term)) {
                $prescribesymptoms = array_filter($prescribesymtoms, function ($symptom) use ($prefix_term) {
                    return stripos($symptom['name'], $prefix_term) === 0;
                });
                $paginated_symptoms = array_slice($prescribesymptoms, $count, $per_page);

                $data['symptoms'] = array_values($paginated_symptoms);
                return response()->json($data);
            }
            // $paginated_symptoms = array_slice($prescribesymtoms, $count, $per_page);
            // $data['symptoms'] = array_values($paginated_symptoms);
            return response()->json($data);
        } catch (\Throwable $th) {
            Log::info(["error" => $th]);
            return response()->json(['status' => false, 'message' => "Internal server error", 'error' => $th->getMessage()], 500);
        }
    }
    public function getdiagnosisSearch($esteblishmentusermapID, Request $request)
    {
        try {
            $parameter = $request->all();
            $page = (isset($parameter['page'])) ? $parameter['page'] : 1;
            $per_page = (isset($parameter['per_page'])) ? $parameter['per_page'] : 20;
            $prefix_term = (isset($parameter['prefix_term'])) ? $parameter['prefix_term'] : "";

            $count = ((int) $page - 1) * ((int) $per_page);

            $diagnosis1 = DB::table('consult_diagnosis')->select('name')->get();
            $diagnosis2 = DB::table('prescription')->distinct()->where(array('user_map_id' => $esteblishmentusermapID))->where('diagnosis', '!=', '')->select('diagnosis as name')->get();
            $prescribesymtoms = [];
            $data['diagnosis'] = [];

            foreach ($diagnosis2 as $sym) {
                $exploadeddata = explode(",", $sym->name);
                foreach ($exploadeddata as $exdata) {
                    $prescribesymtoms[] = ['name' => trim($exdata)];
                }
            }
            foreach ($diagnosis1 as $sym) {
                $prescribesymtoms[] = ['name' => trim($sym->name)];
            }
            $prescribesymtoms = array_unique($prescribesymtoms, SORT_REGULAR);
            foreach ($prescribesymtoms as $val) {
                $data['diagnosis'][] = $val;
            }

            // dd(!empty(($prefix_term)));

            if (!empty($prefix_term)) {
                $prescribesymptoms = array_filter($prescribesymtoms, function ($symptom) use ($prefix_term) {
                    return stripos($symptom['name'], $prefix_term) === 0;
                });
                $paginated_symptoms = array_slice($prescribesymptoms, $count, $per_page);
                $data['diagnosis'] = array_values($paginated_symptoms);
                return response()->json($data);
            }

            // $paginated_symptoms = array_slice($prescribesymtoms, $count, $per_page);
            // $data['diagnosis'] = array_values($paginated_symptoms);
            return response()->json($data);
        } catch (\Throwable $th) {
            Log::info(["error" => $th]);
            return response()->json(['status' => false, 'message' => "Internal server error", 'error' => $th->getMessage()], 500);
        }
    }
    public function gettestrequestedsearch($esteblishmentusermapID, Request $request)
    {
        try {
            $parameter = $request->all();
            $page = (isset($parameter['page'])) ? $parameter['page'] : 1;
            $per_page = (isset($parameter['per_page'])) ? $parameter['per_page'] : 20;
            $prefix_term = (isset($parameter['prefix_term'])) ? $parameter['prefix_term'] : "";

            $count = ((int) $page - 1) * ((int) $per_page);

            $medicaltests1 = DB::table('consult_tests')->select('name')->get();
            $medicaltests2 = DB::table('prescription')->distinct()->where(array('user_map_id' => $esteblishmentusermapID))->where('test_requested', '!=', '')->select('test_requested as name')->get();
            //$data['medicaltests'] = $medicaltests2->union($medicaltests1)->get();
            $prescribesymtoms = [];
            $data['medicaltests'] = [];

            foreach ($medicaltests2 as $sym) {
                $exploadeddata = explode(",", $sym->name);
                foreach ($exploadeddata as $exdata) {
                    if (trim($exdata) != "")
                        $prescribesymtoms[] = ['name' => trim($exdata)];
                }
            }
            foreach ($medicaltests1 as $sym) {
                if (trim($sym->name) != "")
                    $prescribesymtoms[] = ['name' => trim($sym->name)];
            }
            $prescribesymtoms = array_unique($prescribesymtoms, SORT_REGULAR);
            foreach ($prescribesymtoms as $val) {
                $data['medicaltests'][] = $val;
            }

            // dd(!empty(($prefix_term)));

            if (!empty($prefix_term)) {
                $prescribesymptoms = array_filter($prescribesymtoms, function ($symptom) use ($prefix_term) {
                    return stripos($symptom['name'], $prefix_term) === 0;
                });
                $paginated_symptoms = array_slice($prescribesymptoms, $count, $per_page);
                $data['medicaltests'] = array_values($paginated_symptoms);
                return response()->json($data);
            }

            // $paginated_symptoms = array_slice($prescribesymtoms, $count, $per_page);
            // $data['medicaltests'] = array_values($paginated_symptoms);
            return response()->json($data);
        } catch (\Throwable $th) {
            Log::info(["error" => $th]);
            return response()->json(['status' => false, 'message' => "Internal server error", 'error' => $th->getMessage()], 500);
        }
    }
    public function getadviceserch($esteblishmentusermapID, Request $request)
    {
        try {
            $parameter = $request->all();
            $page = (isset($parameter['page'])) ? $parameter['page'] : 1;
            $per_page = (isset($parameter['per_page'])) ? $parameter['per_page'] : 20;
            $prefix_term = (isset($parameter['prefix_term'])) ? $parameter['prefix_term'] : "";

            $count = ((int) $page - 1) * ((int) $per_page);

            $advices1 = DB::table('consult_advice')->select('name')->get();
            $advices2 = DB::table('prescription')->distinct()->where(array('user_map_id' => $esteblishmentusermapID))->where('advice', '!=', '')->select('advice as name')->get();
            //$data['advices'] = $advices2->union($advices1)->get();
            $prescribesymtoms = [];
            $data['advices'] = [];

            foreach ($advices2 as $sym) {
                $exploadeddata = explode(",", $sym->name);
                foreach ($exploadeddata as $exdata) {
                    if (trim($exdata) != "")
                        $prescribesymtoms[] = ['name' => trim($exdata)];
                }
            }
            foreach ($advices1 as $sym) {
                if (trim($sym->name) != "")
                    $prescribesymtoms[] = ['name' => trim($sym->name)];
            }
            $prescribesymtoms = array_unique($prescribesymtoms, SORT_REGULAR);
            foreach ($prescribesymtoms as $val) {
                $data['advices'][] = $val;
            }

            // dd(!empty(($prefix_term)));

            if (!empty($prefix_term)) {
                $prescribesymptoms = array_filter($prescribesymtoms, function ($symptom) use ($prefix_term) {
                    return stripos($symptom['name'], $prefix_term) === 0;
                });
                $paginated_symptoms = array_slice($prescribesymptoms, $count, $per_page);
                $data['advices'] = array_values($paginated_symptoms);
                return response()->json($data);
            }

            // $paginated_symptoms = array_slice($prescribesymtoms, $count, $per_page);
            // $data['advices'] = array_values($paginated_symptoms);
            return response()->json($data);
        } catch (\Throwable $th) {
            Log::info(["error" => $th]);
            return response()->json(['status' => false, 'message' => "Internal server error", 'error' => $th->getMessage()], 500);
        }
    }
    public function getadvicemedicalhistorysearch($esteblishmentusermapID, Request $request)
    {
        try {
            $parameter = $request->all();
            $page = (isset($parameter['page'])) ? $parameter['page'] : 1;
            $per_page = (isset($parameter['per_page'])) ? $parameter['per_page'] : 20;
            $prefix_term = (isset($parameter['prefix_term'])) ? $parameter['prefix_term'] : "";

            $count = ((int) $page - 1) * ((int) $per_page);

            $mediacalhistory1 = DB::table('medical_history')->select('name')->get();
            $medicalhistory2 = DB::table('prescription')->distinct()->where(array('user_map_id' => $esteblishmentusermapID))->where('medical_history', '!=', '')->select('medical_history as name')->get();

            $prescribesymtoms = [];
            $data['medical_history'] = [];

            foreach ($medicalhistory2 as $medi) {
                $exploadeddata = explode(",", $medi->name);
                foreach ($exploadeddata as $exdata) {
                    $prescribesymtoms[] = ['name' => trim($exdata)];
                }
            }
            foreach ($mediacalhistory1 as $medi) {
                $prescribesymtoms[] = ['name' => trim($medi->name)];
            }
            $prescribesymtoms = array_unique($prescribesymtoms, SORT_REGULAR);
            foreach ($prescribesymtoms as $val) {
                $data['medical_history'][] = $val;
            }

            // dd(!empty(($prefix_term)));

            if (!empty($prefix_term)) {
                $prescribesymptoms = array_filter($prescribesymtoms, function ($symptom) use ($prefix_term) {
                    return stripos($symptom['name'], $prefix_term) === 0;
                });
                $paginated_symptoms = array_slice($prescribesymptoms, $count, $per_page);
                $data['medical_history'] = array_values($paginated_symptoms);
                return response()->json($data);
            }

            // $paginated_symptoms = array_slice($prescribesymtoms, $count, $per_page);
            // $data['medical_history'] = array_values($paginated_symptoms);
            return response()->json($data);
        } catch (\Throwable $th) {
            Log::info(["error" => $th]);
            return response()->json(['status' => false, 'message' => "Internal server error", 'error' => $th->getMessage()], 500);
        }
    }
    public function getLifestyleSearch($esteblishmentusermapID, Request $request)
    {
        try {
            $parameter = $request->all();
            $page = (isset($parameter['page'])) ? $parameter['page'] : 1;
            $per_page = (isset($parameter['per_page'])) ? $parameter['per_page'] : 20;
            $prefix_term = (isset($parameter['prefix_term'])) ? $parameter['prefix_term'] : "";

            $count = ((int) $page - 1) * ((int) $per_page);

            $lifestyle1 = DB::table('lifestyle_master')->get();
            $lifestyle2 = DB::table('prescription')->distinct()->where(array('user_map_id' => $esteblishmentusermapID))->where('lifestyle', '!=', '')->select('lifestyle as name')->get();

            $prescribesymtoms = [];
            $data['lifestyle'] = [];

            foreach ($lifestyle2 as $li) {
                $exploadeddata = explode(",", $li->name);
                foreach ($exploadeddata as $exdata) {
                    $prescribesymtoms[] = ['name' => trim($exdata)];
                }
            }
            foreach ($lifestyle1 as $li) {
                $prescribesymtoms[] = ['name' => trim($li->name)];
            }
            $prescribesymtoms = array_unique($prescribesymtoms, SORT_REGULAR);
            foreach ($prescribesymtoms as $val) {
                $data['lifestyle'][] = $val;
            }

            // dd(!empty(($prefix_term)));

            if (!empty($prefix_term)) {
                $prescribesymptoms = array_filter($prescribesymtoms, function ($symptom) use ($prefix_term) {
                    return stripos($symptom['name'], $prefix_term) === 0;
                });
                $paginated_symptoms = array_slice($prescribesymptoms, $count, $per_page);
                $data['lifestyle'] = array_values($paginated_symptoms);
                return response()->json($data);
            }

            // $paginated_symptoms = array_slice($prescribesymtoms, $count, $per_page);
            // $data['lifestyle'] = array_values($paginated_symptoms);
            return response()->json($data);
        } catch (\Throwable $th) {
            Log::info(["error" => $th]);
            return response()->json(['status' => false, 'message' => "Internal server error", 'error' => $th->getMessage()], 500);
        }
    }

    public function addMedicalCertificate($doctorId, $clinicId, $patientId, Request $request)
    {
        try {
            // id, user_map_id, patient_id, selected_template, patient_name, age, resident_of, diagnosis, start_date, end_date, join_date, passport_number, nationality, visa_procedure, number_of_months, template_time, surgery_planned, template_history, past_srgical_history, family_history, allergies, pulse, blood_pressure, rr, temp, respiratory, cardiac, gastrointestinal, cns, investigation, ecg, cxr, any_oher_problem, impression, gender, date_of_admission, date_of_discharge, incharge, history_findings, course_treatment, advice, travel_from, travel_to, photo_id_card_no, certificate_title, enter_any_text, template_current_date, created_at, updated_at
            $input = $request->all();
            $medicalCertificate = new MedicalCertificateDocexaModel();
            $medicalCertificate->selected_template = $input['selected_template'];
            $medicalCertificate->user_map_id = $doctorId;
            $medicalCertificate->patient_id = $patientId;

            $medicalCertificate->patient_name = $input['patient_name'];
            $medicalCertificate->age = $input['age'];
            $medicalCertificate->resident_of = $input['resident_of'];
            $medicalCertificate->diagnosis = $input['diagnosis'];
            $medicalCertificate->start_date = !empty($input['start_date']) ? $input['start_date'] : null;
            $medicalCertificate->end_date = !empty($input['end_date']) ? $input['end_date'] : null;
            $medicalCertificate->join_date = !empty($input['join_date']) ? $input['join_date'] : null;;
            $medicalCertificate->passport_number = $input['passport_number'];
            $medicalCertificate->nationality = $input['nationality'];
            $medicalCertificate->visa_procedure = $input['visa_procedure'];
            $medicalCertificate->number_of_months = $input['number_of_months'];
            $medicalCertificate->template_time = $input['template_time'];
            $medicalCertificate->surgery_planned = $input['surgery_planned'];
            $medicalCertificate->template_history = $input['template_history'];
            $medicalCertificate->past_srgical_history = $input['past_srgical_history'];
            $medicalCertificate->family_history = $input['family_history'];
            $medicalCertificate->allergies = $input['allergies'];
            $medicalCertificate->pulse = $input['pulse'];
            $medicalCertificate->blood_pressure = $input['blood_pressure'];
            $medicalCertificate->rr = $input['rr'];
            $medicalCertificate->temp = $input['temp'];
            $medicalCertificate->respiratory = $input['respiratory'];
            $medicalCertificate->cardiac = $input['cardiac'];
            $medicalCertificate->gastrointestinal = $input['gastrointestinal'];
            $medicalCertificate->cns = $input['cns'];
            $medicalCertificate->investigation = $input['investigation'];
            $medicalCertificate->ecg = $input['ecg'];
            $medicalCertificate->cxr = $input['cxr'];
            $medicalCertificate->any_oher_problem = $input['any_oher_problem'];
            $medicalCertificate->impression = $input['impression'];
            $medicalCertificate->gender = $input['gender'];
            $medicalCertificate->date_of_admission = !empty($input['date_of_admission']) ? $input['date_of_admission'] : null;
            $medicalCertificate->date_of_discharge = !empty($input['date_of_discharge']) ? $input['date_of_discharge'] : null;
            $medicalCertificate->incharge = $input['incharge'];
            $medicalCertificate->history_findings = $input['history_findings'];
            $medicalCertificate->course_treatment = $input['course_treatment'];
            $medicalCertificate->advice = $input['advice'];
            $medicalCertificate->travel_from = $input['travel_from'];
            $medicalCertificate->travel_to = $input['travel_to'];
            $medicalCertificate->photo_id_card_no = $input['photo_id_card_no'];
            $medicalCertificate->certificate_title = $input['certificate_title'];
            $medicalCertificate->enter_any_text = $input['enter_any_text'];
            $medicalCertificate->template_current_date = $input['template_current_date'];
            $medicalCertificate->patient_gender = $input['patient_gender'];
            $medicalCertificate->clinicId = $clinicId;



            $save = $medicalCertificate->save();
            if ($save) {
                return response()->json(['status' => true, 'message' => "Data saved successfully", 'code' => 200], 200);
            } else {
                return response()->json(['status' => false, 'message' => "something went wrong", 'code' => 400], 400);
            }
        } catch (\Throwable $th) {
            Log::info(["error" => $th]);
            return response()->json(['status' => false, 'message' => "Internal server error", 'error' => $th->getMessage()], 500);
        }
    }
    public function getmedicalcertificate($doctorId, $clinicId, $page, $limit)
    {
        try {
            $offset = ($page - 1) * $limit;
            $data = MedicalCertificateDocexaModel::where('user_map_id', $doctorId)
                ->where('clinicId', $clinicId)
                ->offset($offset)
                ->limit($limit)
                ->orderBy('created_at', 'desc')
                ->get();

            $count = MedicalCertificateDocexaModel::where('user_map_id', $doctorId)
                ->count();

            if (count($data) > 0) {
                return response()->json(['status' => true, 'message' => "data retrived successfully", 'data' => $data, 'total_count' => $count, 'code' => 200], 200);
            } else {
                return response()->json(['status' => false, 'message' => 'data not found', 'code' => 200], 200);
            }
        } catch (\Throwable $th) {
            Log::info(["error" => $th]);
            return response()->json(['status' => false, 'message' => "Internal server error", 'error' => $th->getMessage()], 500);
        }
    }
    public function getmedicalcertificatebypatientId($doctorId, $clinicId, $patientId)
    {
        try {
            $data = MedicalCertificateDocexaModel::where('user_map_id', $doctorId)->where('clinicId', $clinicId)->where('patient_id', $patientId)->get();
            if (count($data) > 0) {
                return response()->json(['status' => true, 'message' => "data retrived successfully", 'data' => $data, 'code' => 200], 200);
            } else {
                return response()->json(['status' => false, 'message' => 'data not found', 'code' => 200], 200);
            }
        } catch (\Throwable $th) {
            Log::info(["error" => $th]);
            return response()->json(['status' => false, 'message' => "Internal server error", 'error' => $th->getMessage()], 500);
        }
    }
    public function getmedicalcertificatebyId($id)
    {
        try {
            $data = MedicalCertificateDocexaModel::where('id', $id)->get();
            if (count($data) > 0) {
                return response()->json(['status' => true, 'message' => "data retrived successfully", 'data' => $data, 'code' => 200], 200);
            } else {
                return response()->json(['status' => false, 'message' => 'data not found', 'code' => 200], 200);
            }
        } catch (\Throwable $th) {
            Log::info(["error" => $th]);
            return response()->json(['status' => false, 'message' => "Internal server error", 'error' => $th->getMessage()], 500);
        }
    }


    public function deleteVaccination($id)
    {
        try {
            $vaccineExist = VaccinationDetailModel::find($id);
            $time = DB::table('docexa_vaccinations_chart')->where('types', $vaccineExist->vaccine_name)->first()->time;
            $groupedVaccines = DB::table('vaccine_brand_groups')
                ->where('brand_name', $vaccineExist->brand_name)
                // ->where('vaccine_name' , $data['vaccine_name'])
                ->where('time_slot', $time)
                ->get(['vaccine_name', 'vaccine_category', 'brand_name']);

            Log::info(['count($groupedVaccines)>0', count($groupedVaccines)]);
            if (count($groupedVaccines) > 0) {
                foreach ($groupedVaccines as $grouped) {
                    $vaccineName = $grouped->vaccine_name;
                    $brandName = $grouped->brand_name;
                    $vaccine = VaccinationDetailModel::where('patient_id', $vaccineExist->patient_id)
                        ->where('brand_name', $brandName)
                        ->where('user_map_id', $vaccineExist->user_map_id)->where('vaccine_name', $vaccineName)->first();
                    if ($vaccine) {
                        $vaccine->deleted_by = 1;
                        $save = $vaccine->save();
                    }
                }
            }
            if ($vaccineExist) {
                $vaccineExist->deleted_by = 1;
                $save = $vaccineExist->save();
                if ($save) {
                    return response()->json(['status' => true, 'message' => "Vaccination deleted", 'code' => 200], 200);
                } else {
                    return response()->json(['status' => false, 'message' => "Failed to delete vaccination", 'code' => 200], 200);
                }
            } else {
                return response()->json(['status' => false, 'message' => 'Vaccine not found', 'code' => 200], 200);
            }
        } catch (\Throwable $th) {
            Log::info(["error" => $th]);
            return response()->json(['status' => false, 'message' => "Internal server error", 'error' => $th->getMessage()], 500);
        }
    }


    public function updatePrescriptionv3($esteblishmentusermapID, $prescriptionID, Request $request)
    {
        try {
            $data = $request->all();
            Log::info(['prescriptiion edit data', $data]);
            $prescription = PrescriptionData::find($prescriptionID);
            if ($prescription) {
                $medicationDelete = PrescriptionItems::where('prescription_id', $prescriptionID)
                    ->delete();
                $vitalDelete = Vital::where('prescription_id', $prescriptionID)
                    ->delete();

                $prescription->user_map_id = $esteblishmentusermapID;
                $prescription->patient_id = $data['patient_id'];
                $prescription->date = isset($data['date']) ? $data['date'] : $prescription->date;
                $prescription->note = isset($data['note']) ? ($data['note'] ? $data['note'] : json_encode($data['note'])) : $prescription->note;
                $prescription->complaints = isset($data['complaints']) ? $data['complaints'] : $prescription->complaints;
                $prescription->diagnosis = isset($data['diagnosis']) ? $data['diagnosis'] : $prescription->diagnosis;
                $prescription->complaints_row = isset($data['complaints_row']) ? $data['complaints_row'] : $prescription->complaints_row;
                $prescription->diagnosis_row = isset($data['diagnosis_row']) ? $data['diagnosis_row'] : $prescription->diagnosis_row;
                $prescription->advice = isset($data['advice']) ? $data['advice'] : $prescription->advice;
                $prescription->test_requested = isset($data['test_requested']) ? $data['test_requested'] : $prescription->test_requested;
                $prescription->follow_up = isset($data['follow_up']) ? $data['follow_up'] : $prescription->follow_up;
                $prescription->prescription_image = isset($data['prescription_image']) ? $data['prescription_image'] : "";
                $prescription->medical_history = isset($data['medical_history']) ? ($data['medical_history'] ? $data['medical_history'] : null) : null;
                $prescription->medical_history_row = isset($data['medical_history_row']) ? ($data['medical_history_row'] ? $data['medical_history_row'] : null) : null;
                $prescription->lifestyle = isset($data['lifestyle']) ? ($data['lifestyle'] ? $data['lifestyle'] : null) : null;
                $prescriptionSave = $prescription->save();
                Log::info(['prescriptionUpdate', $prescriptionSave]);



                $medications = $data['medication'];
                if ($medications) {
                    foreach ($medications as $med):
                        $medication = new Medication();
                        $existmedicineinmaster = Medication::where('medication_name', $med['medication_name'])->first();
                        if ($existmedicineinmaster) {
                            $medicationId = $existmedicineinmaster->id;
                            $existmedicineinmaster->note = isset($med['note']) ? $med['note'] : $existmedicineinmaster->note;
                            $existmedicineinmaster->durationValidity = isset($med['durationValidity']) ? $med['durationValidity'] : null;
                            $existmedicineinmaster->medication_type = isset($med['medication_type']) ? $med['medication_type'] : $existmedicineinmaster->medication_type;
                            $existmedicineinmaster->save();
                        } else {
                            $medication->medication_name = $med['medication_name'];
                            $medication->note = isset($med['note']) ? $med['note'] : null;
                            $medication->durationValidity = isset($med['durationValidity']) ? $med['durationValidity'] : null;
                            $medication->medication_type = isset($med['medication_type']) ? $med['medication_type'] : null;
                            $medication->save();
                            $medicationId = $medication->id;
                        }
                        $drugusermapexist = DrugUserMap::where('medicine_name', $med['medication_name'])->first();
                        if ($drugusermapexist) {
                            $drugusermapexist->medicine_name = isset($med['medication_name']) ? $med['medication_name'] : $drugusermapexist->medication_name;
                            $drugusermapexist->medicine_type = isset($med['medication_type']) ? $med['medication_type'] : $drugusermapexist->medication_type;
                            $drugusermapexist->duration_validity = isset($med['durationValidity']) ? $med['durationValidity'] : null;
                            $save = $drugusermapexist->save();
                            Log::info(['saveeeeeeeeeeeeeeee', $save]);
                        } else {
                            $medicationWRTusermap = new DrugUserMap();
                            $medicationWRTusermap->user_map_id = $esteblishmentusermapID;
                            $medicationWRTusermap->duration_validity = isset($med['durationValidity']) ? $med['durationValidity'] : null;
                            $medicationWRTusermap->medicine_name = isset($med['medication_name']) ? $med['medication_name'] : null;
                            $medicationWRTusermap->medicine_type = isset($med['medication_type']) ? $med['medication_type'] : null;
                            $save = $medicationWRTusermap->save();
                            Log::info(['saveeeeeeeeeeeeeeee', $save]);
                        }

                        $exists = PrescriptionItems::where('prescription_id', $prescriptionID)
                            ->where('medication_id', $medicationId)
                            ->exists();

                        if (!$exists) {
                            $pres_item = new PrescriptionItems();
                            $pres_item->prescription_id = $prescriptionID;
                            $pres_item->medication_id = $medicationId;
                            $pres_item->quantity = isset($med['quantity']) ? $med['quantity'] : null;
                            $pres_item->duration = isset($med['duration']) ? $med['duration'] : null;
                            // $pres_item->durationValidity = isset(($med['durationValidity'])) ? $med['durationValidity'] : null;
                            $pres_item->doses = isset($med['doses']) ? $med['doses'] : null;
                            $pres_item->timing = isset($med['timing']) ? $med['timing'] : null;
                            $pres_item->note = isset($med['note']) ? $med['note'] : null;
                            $pres_item->save();
                        } else {
                            $pres_item = PrescriptionItems::where('prescription_id', $prescriptionID)
                                ->where('medication_id', $medicationId)->first();
                            $pres_item->prescription_id = $prescriptionID;
                            $pres_item->medication_id = $medicationId;
                            $pres_item->quantity = isset($med['quantity']) ? $med['quantity'] : null;
                            $pres_item->duration = isset($med['duration']) ? $med['duration'] : null;
                            // $pres_item->durationValidity = isset(($med['durationValidity'])) ? $med['durationValidity'] : null;
                            $pres_item->doses = isset($med['doses']) ? $med['doses'] : null;
                            $pres_item->timing = isset($med['timing']) ? $med['timing'] : null;
                            $pres_item->note = isset($med['note']) ? $med['note'] : null;
                            $pres_item->save();
                        }


                    endforeach;
                }


                $vaccination_details = $data['vaccination_details'];
                Log::info(['vaccination_deatails' => $vaccination_details]);
                if ($vaccination_details) {
                    foreach ($vaccination_details as $vaccine_detail) {
                        $vaccine_exist = VaccinationDetailModel::where('patient_id', $data['patient_id'])->where('vaccine_name', $vaccine_detail['vaccine_name'])->first();
                        Log::Info(['vaccine_existgiv', $vaccine_exist]);
                        if ($vaccine_exist) {
                            $vaccine_exist->prescription_id = $prescriptionID;
                            $save = $vaccine_exist->save();
                            Log::info(['vaccine_save', $save]);
                        }
                    }
                }

                $vaccination_due = isset($data['vaccination_due']) ? $data['vaccination_due'] : null;
                if ($vaccination_due) {
                    foreach ($vaccination_due as $vaccine_detail) {
                        $vaccine_exist = VaccinationDetailModel::where('patient_id', $data['patient_id'])->where('vaccine_name', $vaccine_detail['due_vaccine_name'])->first();
                        Log::Info(['vaccine_existdue', $vaccine_exist]);
                        if ($vaccine_exist) {
                            $vaccine_exist->prescription_id = $prescriptionID;
                            $save = $vaccine_exist->save();
                            Log::info(['vaccine_due_save', $save]);
                        }
                    }
                }

                $billingCreation = isset($data['billing_data']) ? $data['billing_data'] : null;
                Log::info(['billingCreation', $billingCreation]);
                if ($billingCreation) {
                    $InvoiceExist = BillingModel::where('prescription_id', $prescriptionID)->first();
                    if ($InvoiceExist) {
                        $InvoiceExist->clinic_id = isset($billingCreation['clinic_id']) ? $billingCreation['clinic_id'] : null;
                        $InvoiceExist->mode_of_payment = isset($billingCreation['mode_of_payment']) ? $billingCreation['mode_of_payment'] : $InvoiceExist->mode_of_payment;
                        $InvoiceExist->paid_amount = isset($billingCreation['paid_amount']) ? $billingCreation['paid_amount'] : $InvoiceExist->paid_amount;
                        $InvoiceExist->total_price = isset($billingCreation['total_price']) ? $billingCreation['total_price'] : $InvoiceExist->total_price;
                        $InvoiceExist->bill_no = isset($billingCreation['bill_no']) ? $billingCreation['bill_no'] : $InvoiceExist->bill_no;
                        $InvoiceExist->receipt_no = isset($billingCreation['receipt_no']) ? $billingCreation['receipt_no'] : $InvoiceExist->receipt_no;
                        $InvoiceExist->items = isset($billingCreation['items']) ? (json_encode($billingCreation['items'])) : $InvoiceExist->items;
                        $totalPrice = 0;
                        foreach ($billingCreation['items'] as $item) {
                            $totalPrice += $item['item_price'];
                        }
                        $InvoiceExist->balanced_amount = $billingCreation['total_price'] - $billingCreation['paid_amount'];
                        $save = $InvoiceExist->save();
                        Log::info(['billingsave' => $save]);
                    }
                }

                $vitals = $data['vitals'];
                Log::info(['vitalssssss' => $vitals]);
                if ($vitals) {
                    foreach ($vitals as $value) {
                        $vitalname = isset($value['name']) ? $value['name'] : null;
                        $exist = Vital::where('prescription_id', $prescriptionID)
                            ->where('vital_name', $vitalname)
                            ->exists();
                        Log::info(['vitalExist', $exist]);
                        if ($exist) {
                            $vital = Vital::where('prescription_id', $prescriptionID)->where('vital_name', $vitalname)
                                ->first();
                            if ($vital) {
                                $vital->sugar = isset($value['sugar']) ? $value['sugar'] : null;
                                $vital->bp = isset($value['bp']) ? $value['bp'] : null;
                                $vital->insuline = isset($value['insuline']) ? $value['insuline'] : null;
                                $vital->pulse = isset($value['pulse']) ? $value['pulse'] : null;
                                $vital->weight = isset($value['weight']) ? $value['weight'] : null;
                                $vital->height = isset($value['height']) ? $value['height'] : null;
                                $vital->bmi = isset($value['bmi']) ? $value['bmi'] : null;
                                $vital->rbs = isset($value['fbs']) ? $value['fbs'] : null;
                                $vital->fbs = isset($value['fbs']) ? $value['fbs'] : null;
                                $vital->hba1c = isset($value['hba1c']) ? $value['hba1c'] : null;
                                $vital->sugar = isset($value['sugar']) ? $value['sugar'] : null;
                                $vital->temperature = isset($value['temperature']) ? $value['temperature'] : null;
                                $vital->spo2 = isset($value['spo2']) ? $value['spo2'] : null;
                                $vital->sample_date = isset($value['sample_date']) ? $value['sample_date'] : null;
                                $vital->description = isset($value['description']) ? $value['description'] : null;
                                $vital->vital_name = isset($value['name']) ? $value['name'] : null;
                                $vital->prescription_id = $prescriptionID;
                                $vital->value = isset($value['data']['vitals']) ? $value['data']['vitals'] . " " . $value['unit'] : null;
                                $vital->created_by = isset($value['created_by']) ? $value['created_by'] : null;
                                $valuesave = $vital->save();
                                Log::info(['valueave' => $valuesave]);
                            }
                        } else {
                            $vital = new Vital();
                            $vital->sugar = isset($value['sugar']) ? $value['sugar'] : null;
                            $vital->bp = isset($value['bp']) ? $value['bp'] : null;
                            $vital->insuline = isset($value['insuline']) ? $value['insuline'] : null;
                            $vital->pulse = isset($value['pulse']) ? $value['pulse'] : null;
                            $vital->weight = isset($value['weight']) ? $value['weight'] : null;
                            $vital->height = isset($value['height']) ? $value['height'] : null;
                            $vital->bmi = isset($value['bmi']) ? $value['bmi'] : null;
                            $vital->rbs = isset($value['fbs']) ? $value['fbs'] : null;
                            $vital->fbs = isset($value['fbs']) ? $value['fbs'] : null;
                            $vital->hba1c = isset($value['hba1c']) ? $value['hba1c'] : null;
                            $vital->sugar = isset($value['sugar']) ? $value['sugar'] : null;
                            $vital->temperature = isset($value['temperature']) ? $value['temperature'] : null;
                            $vital->spo2 = isset($value['spo2']) ? $value['spo2'] : null;
                            $vital->sample_date = isset($value['sample_date']) ? $value['sample_date'] : null;
                            $vital->description = isset($value['description']) ? $value['description'] : null;
                            $vital->vital_name = isset($value['name']) ? $value['name'] : null;
                            $vital->prescription_id = $prescriptionID;
                            $vital->value = isset($value['data']['vitals']) ? $value['data']['vitals'] . " " . $value['unit'] : null;
                            $vital->created_by = isset($value['created_by']) ? $value['created_by'] : null;
                            $valuesave = $vital->save();
                            Log::info(['vita;save' => $valuesave]);
                        }
                    }
                }
                $systemic_examinations = $data['systemic_examination'];
                $systemic_examination = Systemic_examination::where('prescription_id', $prescriptionID)->first();
                if ($systemic_examination) {
                    $systemic_examination->cvc = isset($systemic_examinations['cvc']) ? $systemic_examinations['cvc'] : null;
                    $systemic_examination->ent = isset($systemic_examinations['ent']) ? $systemic_examinations['ent'] : null;
                    $systemic_examination->rs = isset($systemic_examinations['rs']) ? $systemic_examinations['rs'] : null;
                    $systemic_examination->pa = isset($systemic_examinations['pa']) ? $systemic_examinations['pa'] : null;
                    $systemic_examination->cns = isset($systemic_examinations['cns']) ? $systemic_examinations['cns'] : null;
                    $systemic_examination->gen = isset($systemic_examinations['gen']) ? $systemic_examinations['gen'] : null;
                    $systemic_examination->prescription_id = $prescription->id;
                    $systemic_examination->save();
                }
                return $this->getPrescription($esteblishmentusermapID, $prescription->id);
            } else {
                return response()->json(['status' => false, 'message' => 'Prescription not found', 'code' => 200], 200);
            }
        } catch (\Throwable $th) {
            Log::info(["error" => $th]);
            return response()->json(['status' => false, 'message' => "Internal server error", 'error' => $th->getMessage()], 500);
        }
    }
    public function getPrescriptionByPrescritpionId($usermapId, $prescriptionId)
    {
        try {
            $data = $this->getPrescription($usermapId, $prescriptionId);
            if ($data) {
                return response()->json(['status' => true, 'message' => 'Prescription data found', 'data' => $data, 'code' => 200], 200);
            } else {
                return response()->json(['status' => false, 'message' => 'Prescription data not', 'data' => [], 'code' => 200], 200);
            }
        } catch (\Throwable $th) {
            Log::info(["error" => $th]);
            return response()->json(['status' => false, 'message' => "Internal server error", 'error' => $th->getMessage()], 500);
        }
    }

    public function saveGivenVaccinationDetailsV11(Request $request)
    {

        try {
            $input = $request->all();
            $lastSave = false;

            foreach ($input as $data) {
                $time = DB::table('docexa_vaccinations_chart')
                    ->where('types', $data['vaccine_name'])
                    ->value('time');

                $groupedVaccines = DB::table('vaccine_brand_groups')
                    ->where('brand_name', $data['brand_name'])
                    ->where('time_slot', $time)
                    ->get(['vaccine_name', 'vaccine_category']);

                $vaccinesToSave = count($groupedVaccines) > 0
                    ? $groupedVaccines->map(function ($v) use ($data) {
                        return [
                            'vaccine_name' => $v->vaccine_name,
                            'vaccine_category' => $v->vaccine_category,
                            'from_group' => true
                        ];
                    })->toArray()
                    : [
                        [
                            'vaccine_name' => $data['vaccine_name'],
                            'vaccine_category' => $data['vaccine_category'],
                            'from_group' => false
                        ]
                    ];

                foreach ($vaccinesToSave as $vaccine) {
                    $vaccineName = $vaccine['vaccine_name'];
                    $vaccineCategory = $vaccine['vaccine_category'];

                    $vaccineExist = VaccinationDetailModel::where([
                        ['vaccine_name', $vaccineName],
                        ['patient_id', $data['patient_id']],
                        ['user_map_id', $data['user_map_id']]
                    ])->first();

                    $payload = [
                        'vaccine_name' => $vaccineName,
                        'vaccine_date' => $data['vaccine_date'],
                        'brand_name' => $data['brand_name'],
                        'given_date' => $data['given_date'],
                        'notes' => $data['notes'],
                        'patient_id' => $data['patient_id'],
                        'user_map_id' => $data['user_map_id'],
                        'vaccine_category' => $vaccineCategory,
                        'prescription_id' => $data['prescription_id'],
                        'flag' => 1,
                        'deleted_by' => 0,
                    ];

                    if ($vaccineExist) {
                        $vaccineExist->update($payload);
                    } else {
                        VaccinationDetailModel::create($payload);
                    }

                    $lastSave = true;
                }
            }

            $data = VaccinationDetailModel::Where('patient_id', $input[0]['patient_id'])->get();

            if ($lastSave) {
                return response()->json([
                    'status' => true,
                    'message' => 'data saved successfully',
                    'data' => $data,
                    'code' => 200
                ]);
            }


            return response()->json([
                'status' => false,
                'message' => 'Something went wrong',
                'data' => [],
                'code' => 400
            ]);
        } catch (\Throwable $th) {
            Log::error(['error' => $th]);
            return response()->json([
                'status' => false,
                'message' => 'Internal server error',
                'error' => $th->getMessage()
            ], 500);
        }
    }

    public function addinvestigationOfPatient(Request $request)
    {
        try {
            // id, patient_id, investigation_date, investigation_test_id, value, created_at, updated_at
            $input = $request->all();
            foreach ($input['tests'] as $test) {
                $investigation = new PatientInvestigationsModel();
                $investigation->patient_id = $input['patient_id'];
                $investigation->user_map_id = $input['user_map_id'];
                $investigation->investigation_date = $input['investigation_date'];
                $investigation->investigation_test_id = $test['investigation_test_id'];
                $investigation->value = $test['value'];
                $investigationSave = $investigation->save();
                Log::info(['investigationSave', $investigationSave]);
            }
            if ($investigationSave) {
                return response()->json([
                    'status' => true,
                    'message' => 'data saved successfully',
                    'code' => 200
                ], 200);
            } else {
                return response()->json([
                    'status' => false,
                    'message' => 'Something went wrong',
                    'code' => 400
                ], 400);
            }
        } catch (\Throwable $th) {
            Log::error(['error' => $th]);
            return response()->json([
                'status' => false,
                'message' => 'Internal server error',
                'error' => $th->getMessage()
            ], 500);
        }
    }

    public function getinvestigationOfPatient($usermapId, $patientId)
    {
        try {
            $data = DB::table('patient_investigations')->join('investigation_tests_user_map', 'investigation_test_id', 'investigation_tests_user_map.id')
                ->select(
                    'patient_investigations.*',
                    'investigation_tests_user_map.name',
                    'investigation_tests_user_map.unit',
                    'investigation_tests_user_map.sequence_no'
                )
                ->where('patient_investigations.user_map_id', $usermapId)
                ->where('patient_investigations.patient_id', $patientId)
                ->get();
            // $data = PatientInvestigationsModel :: where('user_map_id',$usermapId)->where('patient_id',$patientId)->get();
            if (count($data) > 0) {
                return response()->json([
                    'status' => true,
                    'message' => 'data retrived successfully',
                    'data' => $data,
                    'code' => 200
                ], 200);
            } else {
                return response()->json([
                    'status' => false,
                    'message' => 'data not found',
                    'data' => [],
                    'code' => 200
                ], 200);
            }
        } catch (\Throwable $th) {
            Log::error(['error' => $th]);
            return response()->json([
                'status' => false,
                'message' => 'Internal server error',
                'error' => $th->getMessage()
            ], 500);
        }
    }

    public function getinvestigationMasterwrtousermap($usermapId)
    {
        try {
            $data = InvestigationTestsusermapModel::where('user_map_id', $usermapId)
                ->where('active', 1)
                ->orderBy('sequence_no', 'asc')
                ->get();

            $existingNames = InvestigationTestsusermapModel::where('user_map_id', $usermapId)
                ->where('active', 1)
                ->pluck('name')
                ->toArray();

            $masterQuery = InvestigationTestsMaster::query();

            if (!empty($existingNames)) {
                $masterQuery->whereNotIn('name', $existingNames);
            }

            $masterData = $masterQuery->get();
            if (count($data) > 0) {
                return response()->json([
                    'status' => true,
                    'message' => 'data retrived successfully',
                    'data' => $data,
                    'masterData' => $masterData,
                    'code' => 200
                ], 200);
            } else {
                return response()->json([
                    'status' => false,
                    'message' => 'data not found',
                    'data' => [],
                    'code' => 200
                ], 200);
            }
        } catch (\Throwable $th) {
            Log::error(['error' => $th]);
            return response()->json([
                'status' => false,
                'message' => 'Internal server error',
                'error' => $th->getMessage()
            ], 500);
        }
    }
    public function updateinvestigationMasterwrtousermap(Request $request)
    {
        $id = $request->input('id');
        $newSequence = (int) $request->input('new_sequence');

        DB::beginTransaction();

        try {
            $test = InvestigationTestsusermapModel::findOrFail($id);
            $currentSequence = (int) $test->sequence_no;

            if ($newSequence < $currentSequence) {
                InvestigationTestsusermapModel::where('sequence_no', '>=', $newSequence)
                    ->where('sequence_no', '<', $currentSequence)
                    ->where('active', 1)
                    ->increment('sequence_no');
            } elseif ($newSequence > $currentSequence) {
                InvestigationTestsusermapModel::where('sequence_no', '<=', $newSequence)
                    ->where('active', 1)
                    ->where('sequence_no', '>', $currentSequence)
                    ->decrement('sequence_no');
            }

            $test->sequence_no = $newSequence;
            $testSave = $test->save();

            DB::commit();

            if ($testSave) {
                return response()->json([
                    'status' => true,
                    'message' => 'Sequence updated successfully',
                    'code' => 200
                ], 200);
            } else {
                return response()->json([
                    'status' => false,
                    'message' => 'something went wrong',
                    'code' => 400
                ], 400);
            }
        } catch (\Exception $e) {
            DB::rollBack();

            return response()->json([
                'status' => false,
                'message' => 'Internal server error',
                'error' => $e->getMessage()
            ], 500);
        }
    }

    public function updatepatientinvestigation(Request $request)
    {
        $inputs = $request->all();

        try {
            $success = [];
            $failed = [];

            foreach ($inputs as $input) {
                $investi = PatientInvestigationsModel::find($input['id']);

                if ($investi) {
                    $investi->value = $input['value'];
                    if ($investi->save()) {
                        $success[] = $input['id'];
                    } else {
                        $failed[] = $input['id'];
                    }
                } else {
                    $failed[] = $input['id'];
                }
            }

            return response()->json([
                'status' => true,
                'message' => 'data update successfully.',
                'updated_ids' => $success,
                'failed_ids' => $failed,
                'code' => 200
            ], 200);
        } catch (\Exception $e) {
            return response()->json([
                'status' => false,
                'message' => 'Internal server error',
                'error' => $e->getMessage()
            ], 500);
        }
    }

    public function addInvestigationToUserMap(Request $request)
    {
        try {
            $input = $request->all();
            $add = new InvestigationTestsusermapModel();
            // id, name, unit, sequence_no, user_map_id, active, created_at, updated_at
            $maxSequence = InvestigationTestsusermapModel::where('user_map_id', $input['user_map_id'])->where('active', 1)->max('sequence_no');
            $nextSequence = $maxSequence ? $maxSequence + 1 : 1;
            $add->name = $input['name'];
            $add->unit = $input['unit'];
            $add->sequence_no = $nextSequence;
            $add->user_map_id = $input['user_map_id'];
            $save = $add->save();
            if ($save) {
                return response()->json([
                    'status' => true,
                    'message' => 'data saved successfully.',
                    'code' => 200
                ], 200);
            } else {
                return response()->json([
                    'status' => false,
                    'message' => 'Something went wrong.',
                    'code' => 200
                ], 200);
            }
        } catch (\Throwable $th) {
            return response()->json([
                'status' => false,
                'message' => 'Internal server error',
                'error' => $th->getMessage()
            ], 500);
        }
    }


    public function deleteInvestigationFromUserMap($id)
    {
        try {

            $record = InvestigationTestsusermapModel::find($id);

            if ($record) {
                $record->active = 0;
                $delete =  $record->save();

                if ($delete) {
                    return response()->json([
                        'status' => true,
                        'message' => 'Record deleted successfully.',
                        'code' => 200
                    ], 200);
                } else {
                    return response()->json([
                        'status' => true,
                        'message' => 'Something went wrong',
                        'code' => 400
                    ], 400);
                }
            } else {
                return response()->json([
                    'status' => false,
                    'message' => 'Record not found.',
                    'code' => 404
                ], 404);
            }
        } catch (\Throwable $th) {
            return response()->json([
                'status' => false,
                'message' => 'Internal server error',
                'error' => $th->getMessage()
            ], 500);
        }
    }



    public function getinvestigationMasterwrtousermapSearch(Request $request): mixed
    {
        try {
            $input = $request->all();
            $search = $request->query('search');
            $usermapId = $request->query('usermapid');

            $query = InvestigationTestsusermapModel::where('user_map_id', $usermapId)
                ->where('active', 1);

            if (!empty($search)) {
                $query->where('name', 'LIKE', "%{$search}%");
            }

            $data = $query->orderBy('sequence_no', 'asc')->get();


            $existingNames = InvestigationTestsusermapModel::where('user_map_id', $usermapId)
                ->where('active', 1)
                ->pluck('name')
                ->toArray();

            $masterQuery = InvestigationTestsMaster::query();
            if (!empty($search)) {
                $masterQuery->where('name', 'LIKE', "%{$search}%");
            }
            if (!empty($existingNames)) {
                $masterQuery->whereNotIn('name', $existingNames);
            }

            $masterData = $masterQuery->get();


            if (count($data) > 0) {
                return response()->json([
                    'status' => true,
                    'message' => 'data retrived successfully',
                    'data' => $data,
                    'masterData' => $masterData,
                    'code' => 200
                ], 200);
            } else {
                return response()->json([
                    'status' => false,
                    'message' => 'data not found',
                    'data' => [],
                    'code' => 200
                ], 200);
            }
        } catch (\Throwable $th) {
            Log::error(['error' => $th]);
            return response()->json([
                'status' => false,
                'message' => 'Internal server error',
                'error' => $th->getMessage()
            ], 500);
        }
    }
}
