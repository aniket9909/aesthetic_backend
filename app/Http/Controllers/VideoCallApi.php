<?php

/**
 * Docexa Doctor Micro Service API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: satish.soni@globalspace.in
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

namespace App\Http\Controllers;

use Illuminate\Http\Response;
use Illuminate\Http\Request;
use App\VideoCall;
use Storage;
use DB;
use Log;

class VideoCallApi extends Controller
{

    /**
     * Constructor
     */
    public function __construct()
    {
    }

    /**
     * Operation create session
     *
     * appointment id to create.
     *
     * @return Http response
     */
    /**

     * @OA\Get(
     * path="/videocall/{appointment_encrypted_id}/session/create",
     * tags={"Videocall"},
     *    
     * @OA\Parameter(
     *         name="appointment_encrypted_id",
     *         in="path",
     *         description="appointment_encrypted_id",
     *         required=true,
     *         example="032dd17b77fab7d51a476c5ff2b5659c",
     *         @OA\Schema(type="string")
     *     ),
     *  @OA\Parameter(
     *         name="type",
     *         in="query",
     *         description="patient or doctor",
     *         required=true,
     *         example="patient",
     *         @OA\Schema(type="string")
     *     ),
     * @OA\Response(
     *         response="200",
     *         description="key statics",
     *    @OA\JsonContent(
     *       @OA\Property(property="success", type="string", example="success")
     *        )
     *     ),
     * @OA\Response(
     *         response="400",
     *         description="Error: Bad request. required parameters is not supplied.",    
     *    @OA\JsonContent(
     *       @OA\Property(property="error", type="string", example="appointment_encrypted_id User Map ID not found") 
     *        )
     *     ),
     * )
     */
    public function videocallsessioncreate($appointment_encrypted_id,Request $request)
    {
        $get = $request->input();
        if(isset($get['type'])){
            $type=$get['type'];
        }else{
            $type='doctor';
        }
        $res = new VideoCall();
        $data = $res->createsession($appointment_encrypted_id,$type);
        return response()->json(['status' => 'success', 'data' => $data], 200);
    }
    /**
     * Operation disconnect session
     *
     * appointment id to create.
     *
     * @return Http response
     */
    /**

     * @OA\Get(
     * path="/videocall/{appointment_encrypted_id}/session/disconnect",
     * tags={"Videocall"},
     *    
     * @OA\Parameter(
     *         name="appointment_encrypted_id",
     *         in="path",
     *         description="appointment_encrypted_id",
     *         required=true,
     *         example="032dd17b77fab7d51a476c5ff2b5659c",
     *         @OA\Schema(type="string")
     *     ),
     * * @OA\Parameter(
     *         name="sessionId",
     *         in="query",
     *         description="sessionId",
     *         required=true,
     *         example="032dd17b77fab7d51a476c5ff2b5659c",
     *         @OA\Schema(type="string")
     *     ),
     * * @OA\Parameter(
     *         name="connectionId",
     *         in="query",
     *         description="connectionId",
     *         required=true,
     *         example="032dd17b77fab7d51a476c5ff2b5659c",
     *         @OA\Schema(type="string")
     *     ),
     * @OA\Response(
     *         response="200",
     *         description="key statics",
     *    @OA\JsonContent(
     *       @OA\Property(property="success", type="string", example="success")
     *        )
     *     ),
     * @OA\Response(
     *         response="400",
     *         description="Error: Bad request. required parameters is not supplied.",    
     *    @OA\JsonContent(
     *       @OA\Property(property="error", type="string", example="appointment_encrypted_id User Map ID not found") 
     *        )
     *     ),
     * )
     */
    public function videocallsessiondisconnect($appointment_encrypted_id, $sessionId, $connectionId)
    {

        $res = new VideoCall();
        $data = $res->disconnect($sessionId, $connectionId);
        return $data;
    }

    /**
     * Operation create singal
     *
     * appointment id to create.
     *
     * @return Http response
     */
    /**

     * @OA\Get(
     * path="/videocall/{appointment_encrypted_id}/signal",
     * tags={"Videocall"},
     *    
     * @OA\Parameter(
     *         name="appointment_encrypted_id",
     *         in="path",
     *         description="appointment_encrypted_id",
     *         required=true,
     *         example="032dd17b77fab7d51a476c5ff2b5659c",
     *         @OA\Schema(type="string") 
     *     ),
     *  @OA\Parameter(
     *         name="sessionId",
     *         in="query",
     *         description="sessionId",
     *         required=true,
     *         example="032dd17b77fab7d51a476c5ff2b5659c",
     *         @OA\Schema(type="string")
     *     ),
     * @OA\Response(
     *         response="200",
     *         description="key statics",
     *    @OA\JsonContent(
     *       @OA\Property(property="success", type="string", example="success")
     *        )
     *     ),
     * @OA\Response(
     *         response="400",
     *         description="Error: Bad request. required parameters is not supplied.",    
     *    @OA\JsonContent(
     *       @OA\Property(property="error", type="string", example="appointment_encrypted_id User Map ID not found") 
     *        )
     *     ),
     * )
     */
    public function videocallsingal($appointment_encrypted_id, Request $request)
    {
        $allrequest = $request->input();
        $sessionId = $allrequest['sessionId'];
        $res = new VideoCall();
        $data = $res->signal($sessionId);
        return $data;
    }
    public function videocalltest($appointment_encrypted_id)
    {

        $res = new VideoCall();
        //var_dump($res->createsession($appointment_encrypted_id));die;
        return View('videocall/test.index', ['data' => $res->createsession($appointment_encrypted_id,'patient'), 'link' => '/videocall/test/']);
    }
    public function callbackUrl(Request $request)
    {
        $res = new VideoCall();
        return $res->callbackUrl($request);
    }
}
