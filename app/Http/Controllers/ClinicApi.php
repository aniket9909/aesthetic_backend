<?php

/**
 * Docexa Doctor Micro Service API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: satish.soni@globalspace.in
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

namespace App\Http\Controllers;

use App\Skuusermap;
use App\Slotmaster;
use Illuminate\Http\Response;
use Illuminate\Http\Request;
use App\Clinic;
use DB;
use Log;
use URL;
use Symfony\Component\HttpKernel\Exception\HttpException;
use Illuminate\Support\Facades\Http;

class ClinicApi extends Controller
{

    /**
     * Constructor
     */
    public function __construct()
    {
    }
    /**
     * @OA\Get(
     * path="/establishments/users/{esteblishmentusermapID}/clinic",
     * summary="get clinic data",
     * description="",
     * operationId="getclinic",
     * tags={"Clinic"},
     * @OA\Parameter(
     *         name="esteblishmentusermapID",
     *         in="path",
     *         description="esteblishmentusermapID",
     *         required=true,
     *         example=68179,
     *         @OA\Schema(type="number")
     *     ),
     * @OA\Response(
     *         response="200",
     *         description="Returns doctors data",
     * ),
     * @OA\Response(
     *    response=400,
     *    description="information not found response" 
     * )
     * )
     */
    public function getclinic($esteblishmentusermapID)
    {

        try {
            $data = Clinic::where(array("user_map_id" => $esteblishmentusermapID))->with(['cities','states','slot'])->get();
            return response()->json(['status' => "success", 'clinic' => $data], 200);
        } catch (\Exception $e) {
            throw new HttpException(500, $e->getMessage());
        }
    }
    /**
     * @OA\Put(
     * path="/establishments/users/{esteblishmentusermapID}/clinic/{clinicID}",
     * summary="edit clinic data",
     * description="",
     * operationId="updateclinic",
     * tags={"Clinic"},
     * @OA\Parameter(
     *         name="esteblishmentusermapID",
     *         in="path",
     *         description="esteblishmentusermapID",
     *         required=true,
     *         example=68179,
     *         @OA\Schema(type="number")
     *     ),
     * @OA\Parameter(
     *         name="clinicID",
     *         in="path",
     *         description="clinicID",
     *         required=true,
     *         example=56898,
     *         @OA\Schema(type="number")
     *     ),
     * @OA\RequestBody(
     *  required=true,
     *  description="Pass clinic details",
     *  @OA\JsonContent(
     *      type="object",
     *     @OA\Property(property="clinic_name", type="string", example="1"),
     *      @OA\Property(property="address", type="string", example="address"),
     *       @OA\Property(property="city", type="string", example="city"),
     *       @OA\Property(property="state", type="string", example="state"),
     *       @OA\Property(property="pincode", type="string", example="pincode"),
     *      @OA\Property(property="lat", type="string", example="91"),
     *      @OA\Property(property="long", type="string", example="91"),
     *      @OA\Property(property="contact_person", type="text", example="satish soni"),
     *      @OA\Property(property="contact_no", type="text", example="7208613316"),
     *      @OA\Property(property="clinic_images", type="text", example="urls")
     *  ),
     * ),
     * @OA\Response(
     *         response="200",
     *         description="Returns clinic data",
     * ),
     * @OA\Response(
     *    response=400,
     *    description="information not found response" 
     * )
     * )
     */
    public function updateclinic($esteblishmentusermapID,$clinicID, Request $request)
    {
        $data = $request->all();
        $clinic = Clinic::find($clinicID);
        $clinic->clinic_name = $data['clinic_name'];
        $clinic->address = $data['address'];
        $clinic->city = $data['city'];
        $clinic->state = $data['state'];
        
        $clinic->pincode = $data['pincode'];
        $clinic->lat = $data['lat'];
        $clinic->long = $data['long'];
        $clinic->contact_person = $data['contact_person'];
        $clinic->contact_no = $data['contact_no'];
        $clinic->clinic_images = isset($data['clinic_images'])?$data['clinic_images']:'';
        $clinic->isupdateview = 1;
        $clinic->save(); 
        $data = Clinic::where(array("user_map_id" => $esteblishmentusermapID))->get();
        return response()->json(['status' => "success", 'clinic' => $data], 200);

    }
    /**
     * @OA\Put(
     * path="/establishments/users/{esteblishmentusermapID}/clinic",
     * summary="add clinic data",
     * description="",
     * operationId="updateclinic",
     * tags={"Clinic"},
     * @OA\Parameter(
     *         name="esteblishmentusermapID",
     *         in="path",
     *         description="esteblishmentusermapID",
     *         required=true,
     *         example=68179,
     *         @OA\Schema(type="number")
     *     ),
     * @OA\RequestBody(
     *  required=true,
     *  description="Pass clinic details",
     *  @OA\JsonContent(
     *      type="object",
     *     @OA\Property(property="clinic_name", type="string", example="1"),
     *      @OA\Property(property="address", type="string", example="address"),
     *       @OA\Property(property="city", type="string", example="city"),
     *       @OA\Property(property="state", type="string", example="state"),
     *       @OA\Property(property="pincode", type="string", example="pincode"),
     *      @OA\Property(property="lat", type="string", example="91"),
     *      @OA\Property(property="long", type="string", example="91"),
     *      @OA\Property(property="contact_person", type="text", example="satish soni"),
     *      @OA\Property(property="contact_no", type="text", example="7208613316"),
     *      @OA\Property(property="clinic_images", type="text", example="urls")
     *  ),
     * ),
     * @OA\Response(
     *         response="200",
     *         description="Returns clinic data",
     * ),
     * @OA\Response(
     *    response=400,
     *    description="information not found response" 
     * )
     * )
     */
    public function addclinic($esteblishmentusermapID, Request $request)
    {
        $data = $request->all();
        $clinic = new Clinic();
        $clinic->user_map_id = $esteblishmentusermapID;
        $clinic->clinic_name = $data['clinic_name'];
        $clinic->address = $data['address'];
        $clinic->city = $data['city'];
        $clinic->state = $data['state'];
        $clinic->pincode = $data['pincode'];
        $clinic->lat = $data['lat'];
        $clinic->long = $data['long'];
        $clinic->contact_person = $data['contact_person'];
        $clinic->contact_no = $data['contact_no'];
        $clinic->clinic_images = isset($data['clinic_images'])?$data['clinic_images']:'';


        $sku = Skuusermap :: where('user_map_id' , $esteblishmentusermapID)->first();
        Log::info(['skuuu' , $sku]);
        $sku -> isupdateview =1 ;
          $save =  $sku->save();
         Log::info(['skuuu' , $save]);

        $clinic->save(); 
        $data = Clinic::where(array("user_map_id" => $esteblishmentusermapID))->get();
        return response()->json(['status' => "success", 'clinic' => $data], 200);

    }
    /**
     * @OA\Delete(
     * path="/establishments/users/{esteblishmentusermapID}/clinic/{clinicID}",
     * summary="delete clinic data",
     * description="",
     * operationId="updateclinic",
     * tags={"Clinic"},
     * @OA\Parameter(
     *         name="esteblishmentusermapID",
     *         in="path",
     *         description="esteblishmentusermapID",
     *         required=true,
     *         example=68179,
     *         @OA\Schema(type="number")
     *     ),
     * @OA\Parameter(
     *         name="clinicID",
     *         in="path",
     *         description="clinicID",
     *         required=true,
     *         example=56898,
     *         @OA\Schema(type="number")
     *     ),
     * @OA\Response(
     *         response="200",
     *         description="Returns clinic data",
     * ),
     * @OA\Response(
     *    response=400,
     *    description="information not found response" 
     * )
     * )
     */
    public function deleteclinic($esteblishmentusermapID,$clinicID)
    {
        
        $clinic = Clinic::find($clinicID)->delete();
        $data = Clinic::where(array("user_map_id" => $esteblishmentusermapID))->get();
        return response()->json(['status' => "success", 'clinic' => $data], 200);

    }
    public function getslotdetails($id,){
        $d = new Slotmaster();
        $data = $d->getslotdetails($id);
        dd($data);
    }
}
