<?php

/**
 * Docexa Doctor Micro Service API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: satish.soni@globalspace.in
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

namespace App\Http\Controllers;

use Illuminate\Http\Response;
use Illuminate\Http\Request;
use App\Medicalestablishmentsmedicalusermap;
use App\Medicalestablishments;
use App\User;
use App\Doctor;
use App\Otp;
use App\Clinic;
use App\Http\Controllers\Controller;
use App\Http\Controllers\SpecialityApi;
use DB;
use Log;    
use App\PrescriptionLayout;


class RegisterApi extends Controller
{

    /**
     * Constructor
     */
    public function __construct()
    {
    }

    /**
     * Operation register
     *
     * Send registration detail.
     *
     * @param number $mobile no  (required)
     *
     * @return Http response
     */

    /**

     * @OA\Post(
     * path="/auth/public/register",
     * tags={"Doctor Registration APIs"},
     *  @OA\RequestBody(
     *  required=true,
     *  description="Pass register details",
     *  @OA\JsonContent(
     *      type="object",
     *      @OA\Property(property="email", type="string", example="rajesh@gmail.com"),
     *      @OA\Property(property="password", type="string", example="welcome"),
     *      @OA\Property(property="is_user_doctor", type="string", example="1"),
     *      @OA\Property(property="doc_mobile_no", type="string", example="7208613316"),
     *      @OA\Property(property="staff_mobile_no", type="string", example="7208613316"),
     *      @OA\Property(property="fee", type="string", example="100"),
     *      @OA\Property(property="medical_certificate_url", type="string", example="http"),
     *      @OA\Property(property="letter_head_copy", type="string", example="http"),
     *      @OA\Property(property="is_vaccine", type="boolean", example="true"),
     *       @OA\Property(property="specialities", type="array", @OA\Items(type="integer")),
     *       @OA\Property(property="city", type="string", example="city"),
     *       @OA\Property(property="state", type="string", example="state"),
     * 
     *  ),
     * ),
     * @OA\Response(
     *         response="200",
     *         description="register data",
     *    @OA\JsonContent(
     *       @OA\Property(property="success", type="string", example="success")
     *        )
     *     ),
     * @OA\Response(
     *         response="400",
     *         description="Error: Bad request. required parameters is not supplied.",    
     *    @OA\JsonContent(
     *       @OA\Property(property="error", type="string", example="mobile no not found")
     *        )
     *     ),
     * )
     */
    public function register(Request $request)
    {
        
        $data = $request->input();

        $check_doctor = Doctor::where('mobile_no',$data['doc_mobile_no'])->count();
        
        if($check_doctor>0){
            $status = true;
            try
            {
                DB::beginTransaction();
                $user = new User();
                $doctor = Doctor::where('mobile_no',$data['doc_mobile_no'])->first();
                
                $doctorquery = Doctor::find($doctor->pharmaclient_id);
                if(isset($data['medical_certificate_url']) && (string)$data['medical_certificate_url'])
                    $doctorquery->medical_certificate_url = $data['medical_certificate_url'];
                if(isset($data['letter_head_copy']) && (string)$data['letter_head_copy'])
                    $doctorquery->letter_head_copy = $data['letter_head_copy'];
                if(isset($data['fee']) && (int)$data['fee'])
                    $doctorquery->fee = $data['fee'];
                if(isset($data['is_vaccine']))
                    $doctorquery->is_vaccine = $data['is_vaccine'];
                $doctorquery->is_lead = 0;
               $save=     $doctorquery->save();
               Log::info(['save'=> $save]);


              
                $usermap = Medicalestablishmentsmedicalusermap::where('medical_user_id',$doctor->pharmaclient_id)->first();
                Log::info(['usermAP' => $usermap]);
                $presLayout = new PrescriptionLayout();
                $presLayout->user_map_id = $usermap;
                $presLayout->save();
                
                
                $status = $status && $usermap && $doctor;
            } catch (\Exception $e)
            {
                DB::rollBack();
                //throw $e; //sometime you want to rollback AND throw the exception
            }
            if ($status)
            {
                DB::commit();
                return response()->json(['status' => "success",'doctor' => $user->autologin($usermap->id)], 200);
            } else
            {
                DB::rollBack();
                return response()->json(['status' => "error", 'message' => "something went wrong"], 400);
            }
        }
        $status = true;
        try
        {
            DB::beginTransaction();
        $medical = new Medicalestablishments();
        $medical->type = 'individual';
        $medical->active = 1;
        $medical->address_id = 1;
        $medical->email = $data['email'];
        $medical->save();

         

        $doctor = new Doctor();
        $doctor->login_name = $data['doc_mobile_no'];
        if(isset($data['password']))
            $doctor->password = md5($data['password']);
        else
            $doctor->password = md5('welcome');
        $doctor->email_id = $data['email'];
        $doctor->mobile_no = $data['doc_mobile_no'];
        $doctor->pharmaclient_image = 'ProfileImages/docexa_default_image.png';
        $doctor->image = 'ProfileImages/docexa_default_image.png';
        if(isset($data['staff_mobile_no']) && (int)$data['staff_mobile_no'])
            $doctor->staff_mobile_no = $data['staff_mobile_no'];
        if(isset($data['medical_certificate_url']) && (string)$data['medical_certificate_url'])
            $doctor->medical_certificate_url = $data['medical_certificate_url'];
        if(isset($data['letter_head_copy']) && (string)$data['letter_head_copy'])
            $doctor->letter_head_copy = $data['letter_head_copy'];
        if(isset($data['fee']) && (int)$data['fee'])
            $doctor->fee = $data['fee'];
        if(isset($data['is_vaccine']))
            $doctor->is_vaccine = $data['is_vaccine'];
        $doctor->is_lead = 0; 
     $save = $doctor->save();

        $usermap = new Medicalestablishmentsmedicalusermap();
        $usermap->medical_establishment_id = $medical->id;
        $usermap->medical_user_id = $doctor->pharmaclient_id;
        $usermap->is_primary = 1;
        $usermap->role = 'doctor';
        $usermap->save();

        
        if(isset($data['specialities']) && count($data['specialities']) > 0){
            $speciality = new SpecialityApi();
            $speciality->updatespecialities($usermap->id,$data['specialities']);
        }
        $status = $status && $usermap && $doctor && $medical;
        } catch (\Exception $e)
        {
            DB::rollBack();
            //throw $e; //sometime you want to rollback AND throw the exception
        }
        $user = new User();
        if ($status)
        {
            DB::commit();
            return response()->json(['status' => "success", 'doctor' => $user->autologin($usermap->id)], 200);
        } else
        {
            DB::rollBack();
            return response()->json(['status' => "error", 'message' => "something went wrong"], 400);
        }
    }
    /**

     * @OA\Post(
     * path="/auth/public/lead/register",
     * tags={"Lead APIs"},
     *  @OA\RequestBody(
     *  required=true,
     *  description="Pass register details",
     *  @OA\JsonContent(
     *      type="object",
     *      @OA\Property(property="email", type="string", example="rajesh@gmail.com"),
     *      @OA\Property(property="password", type="string", example="welcome"),
     *      @OA\Property(property="is_user_doctor", type="string", example="1"),
     *      @OA\Property(property="doc_mobile_no", type="string", example="7208613316"),
     *      @OA\Property(property="staff_mobile_no", type="string", example="7208613316"),
     *      @OA\Property(property="fee", type="string", example="100"),
     *      @OA\Property(property="medical_certificate_url", type="string", example="http"),
     *      @OA\Property(property="letter_head_copy", type="string", example="http"),
     *      @OA\Property(property="is_vaccine", type="boolean", example="true"),
     *       @OA\Property(property="specialities", type="array", @OA\Items(type="integer")),
     *       @OA\Property(property="city", type="string", example="city"),
     *       @OA\Property(property="state", type="string", example="state"),
     * 
     *  ),
     * ),
     * @OA\Response(
     *         response="200",
     *         description="register data",
     *    @OA\JsonContent(
     *       @OA\Property(property="success", type="string", example="success")
     *        )
     *     ),
     * @OA\Response(
     *         response="400",
     *         description="Error: Bad request. required parameters is not supplied.",    
     *    @OA\JsonContent(
     *       @OA\Property(property="error", type="string", example="mobile no not found")
     *        )
     *     ),
     * )
     */
    public function leadregister(Request $request)
    {
        
        $data = $request->input();

        $check_doctor = Doctor::where('mobile_no',$data['doc_mobile_no'])->count();
        if($check_doctor>0){
            $status = true;
            try
            {
                DB::beginTransaction();
                $user = new User();
                $doctor = Doctor::where('mobile_no',$data['doc_mobile_no'])->first();
                $doctorquery = Doctor::find($doctor->pharmaclient_id);
                if(isset($data['medical_certificate_url']) && (string)$data['medical_certificate_url'])
                    $doctorquery->medical_certificate_url = $data['medical_certificate_url'];
                if(isset($data['letter_head_copy']) && (string)$data['letter_head_copy'])
                    $doctorquery->letter_head_copy = $data['letter_head_copy'];
                if(isset($data['fee']) && (int)$data['fee'])
                    $doctorquery->fee = $data['fee'];
                if(isset($data['is_vaccine']))
                    $doctorquery->is_vaccine = $data['is_vaccine'];
                $doctorquery->is_lead = 1;
                $doctorquery->save();
                $usermap = Medicalestablishmentsmedicalusermap::where('medical_user_id',$doctor->pharmaclient_id)->first();
                if(isset($data['specialities']) && count($data['specialities']) > 0){
                    $speciality = new SpecialityApi();
                    $speciality->updatespecialities($usermap->id,$data['specialities']);
                }
                
                $status = $status && $usermap && $doctor;
            } catch (\Exception $e)
            {
                DB::rollBack();
                throw $e; //sometime you want to rollback AND throw the exception
            }
            if ($status)
            {
                DB::commit();
                return response()->json(['status' => "success",'doctor' => $user->autologin($usermap->id)], 200);
            } else
            {
                DB::rollBack();
                return response()->json(['status' => "error", 'message' => "something went wrong"], 400);
            }
        }
        $status = true;
        try
        {
            DB::beginTransaction();
        $medical = new Medicalestablishments();
        $medical->type = 'individual';
        $medical->active = 1;
        $medical->address_id = 1;
        $medical->email = $data['email'];
        $medical->save();

         

        $doctor = new Doctor();
        $doctor->login_name = $data['doc_mobile_no'];
        if(isset($data['password']) && $data['password'] != "")
            $doctor->password = md5($data['password']);
        else
            $doctor->password = md5('welcome');
        $doctor->email_id = $data['email'];
        $doctor->mobile_no = $data['doc_mobile_no'];
        $doctor->pharmaclient_image = 'ProfileImages/docexa_default_image.png';
        $doctor->image = 'ProfileImages/docexa_default_image.png';
        if(isset($data['staff_mobile_no']) && (int)$data['staff_mobile_no'])
            $doctor->staff_mobile_no = $data['staff_mobile_no'];
        if(isset($data['medical_certificate_url']) && (string)$data['medical_certificate_url'])
            $doctor->medical_certificate_url = $data['medical_certificate_url'];
        if(isset($data['letter_head_copy']) && (string)$data['letter_head_copy'])
            $doctor->letter_head_copy = $data['letter_head_copy'];
        if(isset($data['fee']) && (int)$data['fee'])
            $doctor->fee = $data['fee'];
        if(isset($data['is_vaccine']))
            $doctor->is_vaccine = $data['is_vaccine'];
        $doctor->is_lead = 1; 
        $doctor->save();

        $usermap = new Medicalestablishmentsmedicalusermap();
        $usermap->medical_establishment_id = $medical->id;
        $usermap->medical_user_id = $doctor->pharmaclient_id;
        $usermap->is_primary = 1;
        $usermap->role = 'doctor';
        $usermap->save();
        if(isset($data['specialities']) && count($data['specialities']) > 0){
            $speciality = new SpecialityApi();
            $speciality->updatespecialities($usermap->id,$data['specialities']);
        }
        $status = $status && $usermap && $doctor && $medical;
        Log::info([$usermap]);
        Log::info([$doctor]);
        Log::info([$medical]);
        } catch (\Exception $e)
        {
            DB::rollBack();
            throw $e; //sometime you want to rollback AND throw the exception
        }
        $user = new User();
        if ($status)
        {
            DB::commit();
            return response()->json(['status' => "success", 'doctor' => $user->autologin($usermap->id)], 200);
        } else
        {
            DB::rollBack();
            return response()->json(['status' => "error", 'message' => "something went wrong"], 400);
        }
    }
    /**

     * @OA\Get(
     * path="/auth/public/lead/{mobileno}",
     * tags={"Lead APIs"},
     * @OA\Parameter(
     *         name="mobileno",
     *         in="path",
     *         description="mobileno",
     *         required=true,
     *         example=7208613316,
     *         @OA\Schema(type="number")
     *     ),
     * @OA\Response(
     *         response="200",
     *         description="register data",
     *    @OA\JsonContent(
     *       @OA\Property(property="success", type="string", example="success")
     *        )
     *     ),
     * @OA\Response(
     *         response="400",
     *         description="Error: Bad request. required parameters is not supplied.",    
     *    @OA\JsonContent(
     *       @OA\Property(property="error", type="string", example="mobile no not found")
     *        )
     *     ),
     * )
     */
    public function lead($mobileno)
    {
        
        
        $check_doctor = Doctor::where('mobile_no',$mobileno)->count();
        ;
        if($check_doctor>0){
            $doctor = Doctor::where('mobile_no',$mobileno)->first();
            
            $usermap = Medicalestablishmentsmedicalusermap::where('medical_user_id',$doctor->pharmaclient_id)->first();
            $user = new User();
            return response()->json(['status' => "success",'doctor' => $user->autologin($usermap->id)], 200);
        }else{
            return response()->json(['status' => "success", 'message' => "No user found",'doctor' => []], 200);
        }
    }
    /**

     * @OA\Patch(
     * path="/auth/public/lead/{mobileno}/unsubscribe",
     * tags={"Lead APIs"},
     * @OA\Parameter(
     *         name="mobileno",
     *         in="path",
     *         description="mobileno",
     *         required=true,
     *         example=7208613316,
     *         @OA\Schema(type="number")
     *     ),
     * @OA\Response(
     *         response="200",
     *         description="register data",
     *    @OA\JsonContent(
     *       @OA\Property(property="success", type="string", example="success")
     *        )
     *     ),
     * @OA\Response(
     *         response="400",
     *         description="Error: Bad request. required parameters is not supplied.",    
     *    @OA\JsonContent(
     *       @OA\Property(property="error", type="string", example="mobile no not found")
     *        )
     *     ),
     * )
     */
    public function leadunsubscribe($mobileno)
    {
        

        $check_doctor = Doctor::where('mobile_no',$mobileno)->count();
        if($check_doctor>0){
            $doctor = Doctor::where('mobile_no',$mobileno)->first();
            $doc = Doctor::find($doctor->pharmaclient_id);
            $doc->unsubscribe = 0;
            $doc->save();
            $usermap = Medicalestablishmentsmedicalusermap::where('medical_user_id',$doctor->pharmaclient_id)->first();
            $user = new User();
            return response()->json(['status' => "success",'doctor' => $user->autologin($usermap->id)], 200);
        }else{
            return response()->json(['status' => "success", 'message' => "No user found",'doctor' => []], 200);
        }
    }
    /**

     * @OA\Patch(
     * path="/auth/public/lead/{mobileno}/subscribe",
     * tags={"Lead APIs"},
     * @OA\Parameter(
     *         name="mobileno",
     *         in="path",
     *         description="mobileno",
     *         required=true,
     *         example=7208613316,
     *         @OA\Schema(type="number")
     *     ),
     * @OA\Response(
     *         response="200",
     *         description="register data",
     *    @OA\JsonContent(
     *       @OA\Property(property="success", type="string", example="success")
     *        )
     *     ),
     * @OA\Response(
     *         response="400",
     *         description="Error: Bad request. required parameters is not supplied.",    
     *    @OA\JsonContent(
     *       @OA\Property(property="error", type="string", example="mobile no not found")
     *        )
     *     ),
     * )
     */
    public function leadsubscribe($mobileno)
    {
        

        $check_doctor = Doctor::where('mobile_no',$mobileno)->count();
        if($check_doctor>0){
            $doctor = Doctor::where('mobile_no',$mobileno)->first();
            $doc = Doctor::find($doctor->pharmaclient_id);
            $doc->unsubscribe = 1;
            $doc->save();
            $usermap = Medicalestablishmentsmedicalusermap::where('medical_user_id',$doctor->pharmaclient_id)->first();
            $user = new User();
            return response()->json(['status' => "success",'doctor' => $user->autologin($usermap->id)], 200);
        }else{
            return response()->json(['status' => "success", 'message' => "No user found",'doctor' => []], 200);
        }
    }
    /**
     * Operation update profile
     *
     * set profile.
     *
     * @param number $mobileno send otp  (required)
     *
     * @return Http response
     */

    /**

     * @OA\Put(
     * path="/auth/public/{esteblishmentusermapID}/profile",
     * tags={"Doctor Registration APIs"},
     * @OA\Parameter(
     *         name="esteblishmentusermapID",
     *         in="path",
     *         description="esteblishmentusermapID",
     *         required=true,
     *         example=65997,
     *         @OA\Schema(type="number")
     *     ),
     *  @OA\RequestBody(
     *  required=true,
     *  description="Pass register details",
     *  @OA\JsonContent(
     *      type="object",
     *      @OA\Property(property="first_name", type="string", example="satish"),
     *      @OA\Property(property="last_name", type="string", example="soni"),
     *       @OA\Property(property="city", type="string", example="city"),
     *       @OA\Property(property="state", type="string", example="state"),
     *  ),
     * ),
     * @OA\Response(
     *         response="200",
     *         description="register data",
     *    @OA\JsonContent(
     *       @OA\Property(property="success", type="string", example="success")
     *        )
     *     ),
     * @OA\Response(
     *         response="400",
     *         description="Error: Bad request. required parameters is not supplied.",    
     *    @OA\JsonContent(
     *       @OA\Property(property="error", type="string", example="mobile no not found")
     *        )
     *     ),
     * )
     */
    public function updateprofile($esteblishmentusermapID,Request $request)
    {
        $data = $request->input();
        
        $user = new User();
        $handle = $user->uniqueHandle($data['first_name'],$data['last_name']);
        $usermap = Medicalestablishmentsmedicalusermap::find($esteblishmentusermapID);
        $usermap->handle = $handle;
        $usermap->save();

        

        $doctor = Doctor::find($usermap->medical_user_id);
        $doctor->pharmaclient_name = $data['first_name'];
        $doctor->last_name = $data['last_name'];
        if(isset($data['state']))
            $doctor->state_id = $data['state'];
        if(isset($data['city']))
            $doctor->city_id = $data['city'];
        $doctor->save();

        $medical = Medicalestablishments::find($usermap->medical_establishment_id);
        $medical->name = $data['first_name'].(($data['last_name'] && $data['last_name']!="")?" ".$data['last_name']:"");
        $medical->save();

        if(Clinic::where('user_map_id',$esteblishmentusermapID)->count()>0){

        }else{
            $clinic = new Clinic();
            $clinic->user_map_id = $esteblishmentusermapID;
            $clinic->clinic_name = $data['first_name'].(($data['last_name'] && $data['last_name']!="")?" ".$data['last_name']:"");
            if(isset($data['city']))
                $clinic->city = $data['city'];
            if(isset($data['state']))
                $clinic->state = $data['state'];
            $clinic->save();
            DB::table('docexa_esteblishment_user_map_sku_details')->insert(['clinic_id'=>$clinic->id,'user_map_id' => $esteblishmentusermapID, 'booking_type' => 'Online Consultation','title'=>'Regular Consultation','description'=>'Any questions around vaccines and well being', 'fee' => 100,'is_enabled'=>1,'default_flag'=>1]);
            DB::table('docexa_esteblishment_user_map_sku_details')->insert(['clinic_id'=>$clinic->id,'user_map_id' => $esteblishmentusermapID, 'booking_type' => 'In clinic Consultation','title'=>'Regular Consultation','description'=>'Any questions around vaccines and well being', 'fee' => 100,'is_enabled'=>1]);
            $templatedata = [
                'template' => 'welcome_email_to_doctor',
                'handle' => $handle,
                'appointment_id' => ""
            ];
            $c = new Controller();
            $c->sendNotification($templatedata);
        }
        return response()->json(['status' => "success", 'doctor' => $user->autologin($esteblishmentusermapID)], 200);
    }
    /**
     * Operation update profile
     *
     * set profile.
     *
     * @param number $mobileno send otp  (required)
     *
     * @return Http response
     */

    /**

     * @OA\Put(
     * path="/auth/public/{esteblishmentusermapID}/profilepicture",
     * tags={"Doctor Registration APIs"},
     * @OA\Parameter(
     *         name="esteblishmentusermapID",
     *         in="path",
     *         description="esteblishmentusermapID",
     *         required=true,
     *         example=6212,
     *         @OA\Schema(type="number")
     *     ),
     *  @OA\RequestBody(
     *  required=true,
     *  description="Pass register details",
     *  @OA\JsonContent(
     *      type="object",
     *      @OA\Property(property="doctor_pic", type="string", example="satish"),
     *      @OA\Property(property="doctor_profile_pic", type="string", example="satish"),
     *  ),
     * ),
     * @OA\Response(
     *         response="200",
     *         description="register data",
     *    @OA\JsonContent(
     *       @OA\Property(property="success", type="string", example="success")
     *        )
     *     ),
     * @OA\Response(
     *         response="400",
     *         description="Error: Bad request. required parameters is not supplied.",    
     *    @OA\JsonContent(
     *       @OA\Property(property="error", type="string", example="mobile no not found")
     *        )
     *     ),
     * )
     */
    public function updatepicture($esteblishmentusermapID,Request $request)
    {
        $data = $request->input();

        $usermap = Medicalestablishmentsmedicalusermap::find($esteblishmentusermapID);
        
        $doctor = Doctor::find($usermap->medical_user_id);
        if (isset($data['doctor_profile_pic']))
            $doctor->pharmaclient_image = $data['doctor_profile_pic'];
        if (isset($data['doctor_pic']))
            $doctor->image = $data['doctor_pic'];
        $doctor->save();

        $user = new User();
        return response()->json(['status' => "success", 'doctor' => $user->autologin($esteblishmentusermapID)], 200);
    }
    /**
     * Operation check profile
     *
     * set profile.
     *
     * @param number $mobileno send otp  (required)
     *
     * @return Http response
     */

    /**

     * @OA\Post(
     * path="/auth/public/{mobile}/verify",
     * tags={"Doctor Registration APIs"},
     * @OA\Parameter(
     *         name="mobile",
     *         in="path",
     *         description="mobile",
     *         required=true,
     *         example=7208613316,
     *         @OA\Schema(type="number")
     *     ),
     *  @OA\RequestBody(
     *  required=true,
     *  description="Pass register details",
     *  @OA\JsonContent(
     *      type="object",
     *      @OA\Property(property="otp", type="string", example="100000"),
     *  ),
     * ),
     * @OA\Response(
     *         response="200",
     *         description="register data",
     *    @OA\JsonContent(
     *       @OA\Property(property="success", type="string", example="success")
     *        )
     *     ),
     * @OA\Response(
     *         response="400",
     *         description="Error: Bad request. required parameters is not supplied.",    
     *    @OA\JsonContent(
     *       @OA\Property(property="error", type="string", example="mobile no not found")
     *        )
     *     ),
     * )
     */
    public function verifymobile($mobile,Request $request)
    {
        $data = $request->input();
        $ot = Otp::where(array('phone_no' => $mobile,'otp' => $data['otp']))->first();
        if(isset($ot->otp_id))
            return response()->json(['status' => "success"],200);
        else
            return response()->json(['status' => "fail",'message'=>"incorrect otp"],400);
    }
    
}