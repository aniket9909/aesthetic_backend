<?php

/**
 * Docexa Doctor Micro Service API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: satish.soni@globalspace.in
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

namespace App\Http\Controllers;


//use Illuminate\Support\Facades\Request;
use App\Clinic;
use App\DocexaDoctorAggrement;
use App\DoctorPrecriptionData;
use App\medicalCertificate;
use App\medicalCertificateMasterModel;
use App\Medication;
use App\Patientmaster;
use App\PrescriptionData;
use App\PrescriptionItems;
use App\PrescriptionLayout;
use App\RecordPrescriptionEmr;
use App\User;
use App\Doctor;
use App\Otp;
use App\Slotmaster;
use App\Skumaster;
use App\AppointmentDetails;
use App\WithdraModel;
use Illuminate\Http\Response;
use Illuminate\Http\Request;
use App\Speciality;
use App\Accountmaster;
use App\Payment;
use App\VideoCall;
use Storage;
use Config;
use DB;
use App\Models\ServiceMaster;
use Log;
use App\Prescription;
use App\Http\Controllers\SpreadsheetController;
use Illuminate\Support\Facades\Validator;
use Illuminate\Support\Facades\View;
use Mpdf\Mpdf;
use Dompdf\Dompdf;
use Carbon\Carbon;
use SimpleSoftwareIO\QrCode\Facades\QrCode;
use MicrosoftAzure\Storage\Blob\BlobRestProxy;







class DoctorsApi extends Controller
{

    /**
     * Constructor
     */
    public function __construct() {}


    public function isPharmaClientExist($isPharmaClientId)
    {
        try {
            $res = new Doctor();
            $status = $res->isPharmaClientExist($isPharmaClientId);
            if ($status) {
                return response()->json(["status" => true, "message" => "Pharma ClientId Exist"], 200);
            }
            return response()->json(["status" => false, "message" => "Pharma ClientId Not found"], 404);
        } catch (\Throwable $th) {
            return response()->json(["status" => false], 500);
        }
    }

    /**
     * Operation sendOtp
     *
     * Send OTP.
     *
     * @param number $mobileno send otp  (required)
     *
     * @return Http response
     */

    /**

     * @OA\Get(
     * path="/auth/otp/{mobileno}",
     * tags={"Auth"},
     *    
     * @OA\Parameter(
     *         name="mobileno",
     *         in="path",
     *         description="mobile no",
     *         required=true,
     *         example=7208613316,
     *         @OA\Schema(type="number")
     *     ),
     * @OA\Response(
     *         response="200",
     *         description="sent otp to mobile no",
     *    @OA\JsonContent(
     *       @OA\Property(property="success", type="string", example="success")
     *        )
     *     ),
     * @OA\Response(
     *         response="400",
     *         description="Error: Bad request. required parameters is not supplied.",    
     *    @OA\JsonContent(
     *       @OA\Property(property="error", type="string", example="mobile no not found")
     *        )
     *     ),
     * )
     */
    public function sendOtp($mobileno)
    {

        if (!isset($mobileno)) {
            return response()->json(['status' => 'fail', 'msg' => 'mobile no not found'], 400);
        }
        $otp = mt_rand(100000, 999999);
        $ot = new Otp();
        $ot->phone_no = $mobileno;
        $ot->otp = $otp;
        $ot->save();
        $msg = "Dear User Your OTP for Docexa is " . $otp;
        $data = $this->sendSms($mobileno, $msg);
        return response()->json(['status' => 'success'], 200);
    }
    /**
     * Operation masterdata
     *
     * masterdata
     *
     * @return Http response
     */

    /**

     * @OA\Get(
     * path="/signedurl",
     * tags={"Doctors"},
     * * @OA\Parameter(
     *         name="url",
     *         in="query",
     *         description="url",
     *         required=true,
     *         example ="1", 
     *         @OA\Schema(type="string")
     *     ),
     * @OA\Response(
     *         response="200",
     *         description="get signed url",
     *    @OA\JsonContent(
     *       @OA\Property(property="success", type="string", example="success")
     *        )
     *     )
     *     ),
     * )
     */

    public function signedurl(Request $req)
    {

        //  dd($req->url);die;
        $s3 = Storage::disk('s3');
        $s3Client = $s3->getDriver()->getAdapter()->getClient();
        $cmd = $s3Client->getCommand('GetObject', [
            'Bucket' => 'docexa',
            'Key' => 'images/' . urldecode($req->url)
        ]);

        $request = $s3Client->createPresignedRequest($cmd, '+20 minutes');
        return (string) $request->getUri();
    }
    /**
     * Operation masterdata
     *
     * masterdata
     *
     * @return Http response
     */

    /**

     * @OA\Get(
     * path="/masterdata",
     * tags={"Doctors"},
     *  
     * @OA\Response(
     *         response="200",
     *         description="master data",
     *    @OA\JsonContent(
     *       @OA\Property(property="success", type="string", example="success")
     *        )
     *     )
     *     ),
     * )
     */
    public function masterdata()
    {

        $data['speciality'] = Speciality::select('speciality_id', 'speciality_name')->get();
        return response()->json($data, 200);
    }
    /**
     * Operation fileupload
     *
     * fileupload.
     *
     * @param file $file file (required)
     *
     * @return Http response
     */

    /**
     * @OA\Post(
     * path="/fileupload",
     * summary="upload files",
     * description="image upload",
     * operationId="image",
     * tags={"Doctors"},
     * @OA\RequestBody(
     *  required=true,
     *          @OA\MediaType(
     *              mediaType="multipart/form-data",
     *              @OA\Schema(
     *                  @OA\Property(
     *                      property="image",
     *                      description="documentType",
     *                      type="array",
     *                      @OA\Items(type="string", format="binary")
     *                   ),
     *               ),
     *           ),
     * ),
     * @OA\Response(
     *         response="200",
     *         description="Returns doctors data",
     * ),
     * @OA\Response(
     *    response=400,
     *    description="information not found response" 
     * )
     * )
     */
    public function fileUpload(Request $request)
    {
        // Log::info('login input', $_FILES);
        // dd($request);
        error_log(print_r($_FILES, true));
        //$this->validate($request, ['image' => 'required|image']);
        if ($request->hasfile('image')) {
            $file = $request->file('image');
            $FileName = $file->getClientOriginalName();

            $extension = pathinfo($FileName, PATHINFO_EXTENSION);

            $customFileName = 'ClinicName' . Carbon::now()->timestamp . '.' . $extension;
            $filePath = 'records/' . $customFileName;
            Log::info(['filePath', $filePath]);

            $connectionString = $_ENV['AZURE_STORAGE_CONNECTION_STRING'];
            $containerName = '';

            $blobClient = BlobRestProxy::createBlobService($connectionString);

            $content = fopen($file->getRealPath(), 'r');
            $blobClient->createBlockBlob($containerName, $filePath, $content);

            $uploadedFileUrl = "https://docexa.blob.core.windows.net/{$filePath}";

            // $file = $request->file('image');
            // $name = time() . $file->getClientOriginalName();
            // $filePath = 'docexa/images/' . $name;
            // Storage::disk('s3')->put($filePath, file_get_contents($file));
            return response()->json(['status' => 'success', 'path' => (string) $uploadedFileUrl, 'msg' => 'Image Uploaded successfully'], 200);
        }
    }
    /**
     * Operation addPet
     *
     * Get Doctor Public Profile.
     *
     * @param string $handle public unique handle to share publicly  (required)
     *
     * @return Http response
     */

    /**
     * @OA\Post(
     * path="/auth/login",
     * summary="login doctor",
     * description="login doctor",
     * operationId="login",
     * tags={"Auth"},
     * @OA\RequestBody(
     *  required=true,
     *  description="Pass doctor details",
     *  @OA\JsonContent(
     *      type="object",
     *      @OA\Property(property="otp", type="string", example="100"),
     *      @OA\Property(property="mobileNo", type="number", example="8871148266"),
     *      @OA\Property(property="email", type="string", example="rajesh@gmail.com"),
     *      @OA\Property(property="password", type="string", example="welcome@")
     *  ),
     * ),
     * @OA\Response(
     *         response="200",
     *         description="Returns doctors data",
     *         @OA\JsonContent(
     *          @OA\Property(property="first_name", type="string", example="satish"),
     *          @OA\Property(property="last_name", type="string", example="soni"),
     *          @OA\Property(property="city", type="string", example="mumbai"),
     *          @OA\Property(property="speciality", type="string", example=""),
     *          @OA\Property(property="fee", type="string", example="0"),
     *          @OA\Property(property="profilePicture", type="string", example="http://apidev.docexa.in/upload/doctor/profile/ProfileImages/docexa_default_image.png")
     * 
     *         )
     *     ),
     * @OA\Response(
     *         response="400",
     *         description="Error: Bad request. required parameters is not supplied.",    
     *    @OA\JsonContent(
     *       @OA\Property(property="message", type="string", example="user not found")
     *        )
     *     ),
     * )
     */

    public function login(Request $request)
    {
        Log::info('login input', ['data' => $request]);

        $res = new User();
        $data = $res->login($request);
        Log::info('login output', ['data' => $data]);

        return $data;
    }
    /**
     * Operation addPet
     *
     * Get Doctor Public Profile.
     *
     * @param string $handle public unique handle to share publicly  (required)
     *
     * @return Http response
     */

    /**

     * @OA\Get(
     * path="/auth/otp/{mobileno}/login",
     * tags={"Auth"},
     *    
     * @OA\Parameter(
     *         name="mobileno",
     *         in="path",
     *         description="mobile no",
     *         required=true,
     *         example ="7208613316", 
     *         @OA\Schema(type="number")
     *     ),
     * * @OA\Parameter(
     *         name="is_user_doctor",
     *         in="query",
     *         description="is_user_doctor",
     *         required=true,
     *         example ="1", 
     *         @OA\Schema(type="number")
     *     ),
     * @OA\Response(
     *         response="200",
     *         description="Returns success",
   
     *     ),
     * @OA\Response(
     *         response="400",
     *         description="Error: Bad request. required parameters is not supplied.",    
     *    @OA\JsonContent(
     *       @OA\Property(property="message", type="string")
     *        )
     *     ),
     * )
     */
    public function loginotp($mobileno, Request $request)
    {
        Log::info('login input', ['data' => $request]);

        $res = new User();
        $data = $res->loginotp($mobileno, $request);
        Log::info('login output', ['data' => $data]);

        return $data;
    }
    /**
     * Operation addPet
     *
     * Get Doctor Public Profile.
     *
     * @param string $handle public unique handle to share publicly  (required)
     *
     * @return Http response
     */

    /**

     * @OA\Get(
     * path="/doctors/{handle}",
     * tags={"Doctors"},
     *    
     * @OA\Parameter(
     *         name="handle",
     *         in="path",
     *         description="unique personal handle for a doc",
     *         required=true,
     *         example ="drpadmanaban", 
     *         @OA\Schema(type="string")
     *     ),
     * * @OA\Parameter(
     *         name="sku_id",
     *         in="query",
     *         description="sku id",
     *         required=false,
     *         example ="1", 
     *         @OA\Schema(type="string")
     *     ),
     * @OA\Response(
     *         response="200",
     *         description="Returns doctors data",
     *         @OA\JsonContent(
     *          @OA\Property(property="first_name", type="string", example="satish"),
     *          @OA\Property(property="last_name", type="string", example="soni"),
     *          @OA\Property(property="city", type="string", example="mumbai"),
     *          @OA\Property(property="speciality", type="string", example=""),
     *          @OA\Property(property="fee", type="string", example="0"),
     *          @OA\Property(property="profilePicture", type="string", example="http://apidev.docexa.in/upload/doctor/profile/ProfileImages/docexa_default_image.png")
     * 
     *         )
     *     ),
     * @OA\Response(
     *         response="400",
     *         description="Error: Bad request. required parameters is not supplied.",    
     *    @OA\JsonContent(
     *       @OA\Property(property="message", type="string", example="handle not found")
     *        )
     *     ),
     * )
     */
    public function addPet($handle)
    {
        if (!isset($handle)) {
            return response()->json(['status' => 'fail'], Response::HTTP_BAD_REQUEST);
        }
        $res = new User();
        $data = $res->getDoctor($handle);
        return $data;
    }
    /**
     * Operation register
     *
     * post Doctor register data.
     *
     * @return Http response
     */

    /**
     * @OA\Post(
     * path="/doctors/register",
     * summary="register doctor",
     * description="register doctor by his/her assistant or doctor himself/herself",
     * operationId="register",
     * tags={"Doctors"},
     * @OA\RequestBody(
     *  required=true,
     *  description="Pass doctor details",
     *  @OA\JsonContent(
     *      type="object",
     *      @OA\Property(property="is_user_doctor", type="number", example="1"),
     *          @OA\Property(
     *              property="doctor",
     *              type="array",
     *              @OA\Items(
     *                  @OA\Property(property="firstName", type="string", format="text", example="satish"),
     *                  @OA\Property(property="lastName", type="string", format="text", example="soni"),
     *                  @OA\Property(property="mobileNo", type="integer", example="7208613316"),
     *               ),
     *          ),
     *          @OA\Property(
     *                property="assistant",
     *                type="array",
     *                @OA\Items(
     *                  @OA\Property(property="firstName", type="string", format="text", example="satish"),
     *                  @OA\Property(property="lastName", type="string", format="text", example="soni"),
     *                  @OA\Property(property="mobileNo", type="integer", example="7208613316")
     *                ),
     *          ),
     *       @OA\Property(property="otp", type="number", example="123456"),
     *       @OA\Property(property="step", type="number", example="1"),
     *       @OA\Property(property="registration_done", type="number", example="0"),
     *  ),
     * ),
     * @OA\Response(
     *         response="200",
     *         description="Returns doctors data",
     * ),
     * @OA\Response(
     *    response=400,
     *    description="information not found response" 
     * )
     * )
     */
    public function register(Request $request)
    {
        //var_dump($request->input());die;
        Log::info('login input', ['data' => $request]);
        $res = new User();
        $data = $res->saveRegister($request);
        Log::info('login output', ['data' => $data->original]);

        return response()->json($data->original, 200);
    }
    /**
     * Operation registerprecheck
     *
     * post Doctor register data to check and generate otp.
     *
     * @return Http response
     */

    /**
     * @OA\Post(
     * path="/doctors/registerprecheck",
     * summary="register check and generate otp doctor",
     * description="register doctor by his/her assistant or doctor himself/herself",
     * operationId="registercheck",
     * tags={"Doctors"},
     * @OA\RequestBody(
     *  required=true,
     *  description="Pass doctor details",
     *  @OA\JsonContent(
     *      type="object",
     *      @OA\Property(property="is_user_doctor", type="number", example="1"),
     *      @OA\Property(property="mobileNo", type="number", example="7208613316"),
     *  ),
     * ),
     * @OA\Response(
     *         response="200",
     *         description="Returns doctors data",
     * ),
     * @OA\Response(
     *    response=400,
     *    description="information not found response" 
     * )
     * )
     */
    public function registerprecheck(Request $request)
    {

        $res = new User();
        $data = $res->checkRegister($request);

        return response()->json($data->original, 200);
    }
    /**
     * Operation doctorupdate
     *
     * post Doctor data to update.
     *
     * @return Http response
     */
    /**
     * @OA\Post(
     * path="/doctors/update",
     * summary="update doctor data",
     * description="",
     * operationId="update",
     * tags={"Doctors"},
     * @OA\RequestBody(
     *  required=true,
     *  description="Pass doctor details",
     *  @OA\JsonContent(
     *      type="object",
     *      @OA\Property(property="is_user_doctor", type="number", example="1"),
     *      @OA\Property(property="user_map_id", type="number", example="37346"),
     *      @OA\Property(property="doctor_fee", type="number", example="10"),
     *      @OA\Property(property="doctor_city_id", type="number", example="1"),
     *      @OA\Property(property="doctor_state_id", type="number", example="1"),
     *      @OA\Property(property="doctor_pincode", type="number", example="400710"),
     *      @OA\Property(property="doctor_gender", type="string", example="male/female"),
     *      @OA\Property(property="doctor_mr_no", type="string", example="1001"),
     *      @OA\Property(property="doctor_mr_state", type="string", example="maharashtra"),
     *      @OA\Property(property="doctor_mr_year", type="number", example="1991"),
     *      @OA\Property(property="speciality_ids", type="array", @OA\Items(type="integer")),
     *      @OA\Property(property="doctor_profile_pic", type="file", example=""),
     *      @OA\Property(property="doctor_pic", type="file", example=""),
     *      @OA\Property(property="step", type="number", example="2/3/4"),
     *      @OA\Property(property="handle", type="text", example="satish"),
     *      @OA\Property(property="email", type="text", example="satish.soni@globalspace.in"),
     *      @OA\Property(property="password", type="text", example="welcome"),
     *  ),
     * ),
     * @OA\Response(
     *         response="200",
     *         description="Returns doctors data",
     * ),
     * @OA\Response(
     *    response=400,
     *    description="information not found response" 
     * )
     * )
     */
    public function doctorupdate(Request $request)
    {

        $res = new User();
        $data = $res->doctorupdate($request);
        return response()->json($data->original, 200);
    }
    /**
     * @OA\Get(
     * path="/establishments/users/{esteblishmentusermapID}",
     * summary="get doctor data",
     * description="",
     * operationId="get",
     * tags={"Establishments"},
     * @OA\Parameter(
     *         name="esteblishmentusermapID",
     *         in="path",
     *         description="esteblishmentusermapID",
     *         required=true,
     *         example=65887,
     *         @OA\Schema(type="number")
     *     ),
     * @OA\Response(
     *         response="200",
     *         description="Returns doctors data",
     * ),
     * @OA\Response(
     *    response=400,
     *    description="information not found response" 
     * )
     * )
     */
    public function getprofile($esteblishmentusermapID)
    {

        $res = new User();
        $data = $res->getprofile($esteblishmentusermapID);
        return response()->json($data->original, 200);
    }
    /**
     * @OA\Put(
     * path="/establishments/users/{esteblishmentusermapID}/update",
     * summary="update doctor data",
     * description="",
     * operationId="update",
     * tags={"Establishments"},
     * * @OA\Parameter(
     *         name="esteblishmentusermapID",
     *         in="path",
     *         description="esteblishmentusermapID",
     *         required=true,
     *         example=65887,
     *         @OA\Schema(type="number")
     *     ),
     * @OA\RequestBody(
     *  required=true,
     *  description="Pass doctor details",
     *  @OA\JsonContent(
     *      type="object",
     *      @OA\Property(property="is_user_doctor", type="number", example="1"),
     * *      @OA\Property(property="first_name", type="string", example="satish"),
     * *      @OA\Property(property="last_name", type="string", example="soni"),
     *      @OA\Property(property="doctor_fee", type="number", example="10"),
     *      @OA\Property(property="doctor_city", type="string", example="mumbai"),
     *      @OA\Property(property="doctor_mr_no", type="string", example="1001"),
     *      @OA\Property(property="speciality_id", type="int", example="1"),
     *      @OA\Property(property="doctor_profile_pic", type="file", example=""),
     *      @OA\Property(property="doctor_pic", type="file", example=""),
     
     *      @OA\Property(property="email", type="text", example="satish.soni@globalspace.in")
     *  ),
     * ),
     * @OA\Response(
     *         response="200",
     *         description="Returns doctors data",
     * ),
     * @OA\Response(
     *    response=400,
     *    description="information not found response" 
     * )
     * )
     */
    public function updateprofile($esteblishmentusermapID, Request $request)
    {

        $res = new User();
        $data = $res->updateprofile($esteblishmentusermapID, $request);
        return response()->json($data->original, 200);
    }

    /**
     * Operation appointment
     *
     * get list of appointment 
     *
     * @return Http response
     */
    /**
     * @OA\Post(
     * path="/appointment",
     * summary="appointment data",
     * description="",
     * operationId="list appointment ",
     * tags={"Appointment"},
     
     * @OA\RequestBody(
     *  description="Pass filter",
     *  @OA\JsonContent(
     *      type="object",
     *      @OA\Property(property="is_user_doctor", type="number", example="1"),
     *      @OA\Property(property="user_map_id", type="number", example="6257"),
     *      @OA\Property(property="from_date", type="date", example="2021-03-01"),
     *      @OA\Property(property="end_date", type="date", example="2021-03-20")
     *  ),
     * ),
     * @OA\Response(
     *         response="200",
     *         description="Returns appointment data",
     * ),
     * @OA\Response(
     *    response=400,
     *    description="information not found response" 
     * )
     * )
     */
    public function listappointment(Request $request)
    {

        $res = new AppointmentDetails();
        $data = $res->getappointment($request);
        return response()->json(['status' => 'success', 'data' => $data], 200);
    }

    public function listappointmentupdated(Request $request)
    {

        $res = new AppointmentDetails();
        $data = $res->getappointmentupdated($request);
        return response()->json(['status' => 'success', 'data' => $data], 200);
    }

    public function getTodaysAptByPagination(Request $request, $page, $limit)
    {
        $res = new AppointmentDetails();
        $data = $res->getTodaysAppointmentv2ByPagination($request, $page, $limit);
        if (count($data) > 0) {
            return response()->json(['status' => 'success', 'data' => $data, 'message' => 'data retrived successfully'], 200);
        } else {
            return response()->json(['status' => 'success', 'data' => $data, 'message' => 'data not found'], 200);
        }
    }

    public function getpastappointmentByPagination(Request $request, $page, $limit)
    {

        $res = new AppointmentDetails();
        $data = $res->getPastAppointmentv2ByPagination($request, $page, $limit);
        if (count($data) > 0) {
            return response()->json(['status' => 'success', 'data' => $data, 'message' => 'data retrived successfully'], 200);
        } else {
            return response()->json(['status' => 'success', 'data' => $data, 'message' => 'data not found'], 200);
        }
    }

    public function getupcomingappointmentByPagination(Request $request, $page, $limit)
    {

        $res = new AppointmentDetails();
        $data = $res->getupcomingappointmentByPagination($request, $page, $limit);
        if (count($data) > 0) {
            return response()->json(['status' => 'success', 'data' => $data, 'message' => 'data retrived successfully'], 200);
        } else {
            return response()->json(['status' => 'success', 'data' => $data, 'message' => 'data not found'], 200);
        }
    }


    public function getappointment(Request $request)
    {

        $res = new AppointmentDetails();
        if (isset($_GET['bookingID'])) {
            $data = $res->getappointment($request, $_GET['bookingID']);
        } else {
            $data = $res->getappointment($request);
        }

        return response()->json(['status' => 'success', 'data' => $data], 200);
    }
    /**
     * Operation appointment
     *
     * get appointment
     *
     * @return Http response
     */
    /** @OA\Get(
     * path="/appointment/{appointment_encrypted_id}",
     * tags={"Appointment"},
     *    
     * @OA\Parameter(
     *         name="appointment_encrypted_id",
     *         in="path",
     *         description="appointment_encrypted_id",
     *         required=true,
     *         example ="032dd17b77fab7d51a476c5ff2b5659c", 
     *         @OA\Schema(type="string")
     *     ),
     * @OA\Response(
     *         response="200",
     *         description="Returns appointment data",
     * ),
     * @OA\Response(
     *    response=400,
     *    description="information not found response" 
     * )
     * )
     */
    public function appointment($appointment_encrypted_id)
    {
        $res = new AppointmentDetails();
        $data = $res->getappointment(null, $appointment_encrypted_id);
        Log::info(['data' => $data]);
        if (isset($data['appointment'][0]) && $data['appointment'][0]->date != null && date('Y-m-d H:i:s', strtotime($data['appointment'][0]->date . " " . $data['appointment'][0]->start_time)) <= date('Y-m-d H:i:s')) {
            $data['appointment'][0]->expired = true;
        } else {
            $data['appointment'][0]->expired = false;
        }
        return response()->json(['status' => 'success', 'data' => $data], 200);
    }
    /**
     * Operation appointment
     *
     * get appointment
     *
     * @return Http response
     */
    /** @OA\Get(
     * path="/hospital/{hospitalID}/appointment/{appointment_encrypted_id}",
     * tags={"Hospitals"},
     *    
     * @OA\Parameter(
     *         name="appointment_encrypted_id",
     *         in="path",
     *         description="appointment_encrypted_id",
     *         required=true,
     *         example ="032dd17b77fab7d51a476c5ff2b5659c", 
     *         @OA\Schema(type="string")
     *     ),
     * @OA\Response(
     *         response="200",
     *         description="Returns appointment data",
     * ),
     * @OA\Response(
     *    response=400,
     *    description="information not found response" 
     * )
     * )
     */
    public function hospitalappointment($hospitalID, $appointment_encrypted_id)
    {
        $res = new AppointmentDetails();
        $data = $res->gethospitalappointment(null, $appointment_encrypted_id);
        if (isset($data['appointment'][0]) && $data['appointment'][0]->date != null && date('Y-m-d H:i:s', strtotime($data['appointment'][0]->date . " " . $data['appointment'][0]->start_time)) <= date('Y-m-d H:i:s')) {
            $data['appointment'][0]->expired = true;
        } else {
            $data['appointment'][0]->expired = false;
        }
        return response()->json(['status' => 'success', 'data' => $data], 200);
    }
    public function appointmentv2($appointment_encrypted_id)
    {
        $res = new AppointmentDetails();
        $data = $res->getappointmentv2(null, $appointment_encrypted_id);

        if (isset($data['appointment']) && $data['appointment']->date != null && date('Y-m-d H:i:s', strtotime($data['appointment']->date . " " . $data['appointment']->start_time)) <= date('Y-m-d H:i:s')) {
            $data['appointment']->expired = true;
        } else {
            $data['appointment']->expired = false;
        }

        return response()->json(['status' => 'success', 'data' => $data], 200);
    }
    public function appointmentv3($appointment_encrypted_id)
    {
        $res = new AppointmentDetails();
        $data = $res->getappointmentv3(null, $appointment_encrypted_id);
        /*
        if (isset($data['appointment'][0]) && $data['appointment'][0]->date != null && date('Y-m-d H:i:s', strtotime($data['appointment'][0]->date . " " . $data['appointment'][0]->start_time)) <= date('Y-m-d H:i:s')) {
            $data['appointment'][0]->expired = true;
        } else {
            $data['appointment'][0]->expired = false;
        }
        */
        return response()->json(['status' => 'success', 'data' => $data], 200);
    }
    /**
     * Operation appointment update
     *
     * post appointment
     *
     * @return Http response
     */
    /**
     * @OA\Post(
     * path="/appointment/update",
     * summary="appointment update",
     * description="",
     * operationId="appointment update",
     * tags={"Appointment"},
     
     * @OA\RequestBody(
     *  required=true,
     *  description="Pass appointment details
     *  Status Master
     * 1	Appointment Created
     * 2	Appointment schedule
     * 3	Appointment Cancel
     * 4	call done
     * 5	Call not done
     * 6	Appointment Rejected",
     *  @OA\JsonContent(
     *      type="object",
     *      @OA\Property(property="bookingID", type="string", example="032dd17b77fab7d51a476c5ff2b5659c"),
     *      @OA\Property(property="scheduletimestamp", type="datetime", example="2021-03-17 13:01"),
     *      @OA\Property(property="slot_size", type="string", example="15"),
     *      @OA\Property(property="user_map_id", type="number", example="6257"),
     *      @OA\Property(property="status", type="integer", example="1"),
     *      @OA\Property(property="remark", type="string", example="")
     *  ),
     * ),
     * @OA\Response(
     *         response="200",
     *         description="Returns appointment data",
     * ),
     * @OA\Response(
     *    response=400,
     *    description="information not found response" 
     * )
     * )
     */
    public function scheduleAppointment(Request $request)
    {

        Log::info(['scheduleAppointment' => $request]);
        $res = new AppointmentDetails();
        $data = $res->scheduleappointment($request);
        Log::info([$data]);
        return response()->json(['status' => 'success', 'data' => $data], 200);
    }
    public function scheduleAppointmentv2(Request $request)
    {

        $res = new AppointmentDetails();
        $data = $res->scheduleappointmentv2($request);
        return response()->json(['status' => 'success', 'data' => $data], 200);
    }

    /**
     * Operation slotdetails
     *
     * slodetails.
     *
     * @param number esteblishmentUserMapID  (required)
     *
     * @return Http response
     */

    /**

     * @OA\Get(
     * path="/establishments/users/{esteblishmentusermapID}/slots",
     * tags={"Establishments"},
     *    
     * @OA\Parameter(
     *         name="esteblishmentusermapID",
     *         in="path",
     *         description="esteblishmentusermapID",
     *         required=true,
     *         example=6257,
     *         @OA\Schema(type="number")
     *     ),
     * @OA\Parameter(
     *         name="date",
     *         in="query",
     *         description="date",
     *         required=true,
     *         example="2021-03-18",
     *         @OA\Schema(type="string")
     *     ),
     * @OA\Parameter(
     *         name="clinicID",
     *         in="query",
     *         description="5",
     *         required=true,
     *         example="5",
     *         @OA\Schema(type="string")
     *     ),
     * @OA\Response(
     *         response="200",
     *         description="slot detail master data",
     *    @OA\JsonContent(
     *       @OA\Property(property="success", type="string", example="success")
     *        )
     *     ),
     * @OA\Response(
     *         response="400",
     *         description="Error: Bad request. required parameters is not supplied.",    
     *    @OA\JsonContent(
     *       @OA\Property(property="error", type="string", example="esteblishment User Map ID not found")
     *        )
     *     ),
     * )
     */
    public function slotdetails($esteblishmentUserMapID, $date = null, $clinicId = null)
    {

        if (!isset($esteblishmentUserMapID)) {
            return response()->json(['status' => 'fail', 'msg' => 'esteblishment User Map ID not found'], 400);
        }
        $res = new Slotmaster();
        // $data = $res->getslotdetails($esteblishmentUserMapID);
        $data = $res->getslotdetailsV3($esteblishmentUserMapID, $date, $clinicId);

        return $data;
    }

    public function slotdetailsV3($esteblishmentUserMapID)
    {

        if (!isset($esteblishmentUserMapID)) {
            return response()->json(['status' => 'fail', 'msg' => 'esteblishment User Map ID not found'], 400);
        }
        $res = new Slotmaster();
        $data = $res->getslotdetailsV3($esteblishmentUserMapID);
        return $data;
    }
    public function slotdetailsv2($esteblishmentUserMapID)
    {


        if (!isset($esteblishmentUserMapID)) {
            return response()->json(['status' => 'fail', 'msg' => 'esteblishment User Map ID not found'], 400);
        }
        $res = new Slotmaster();
        $data = $res->getslotdetailsv2($esteblishmentUserMapID);
        return $data;
    }

    /**
     * Operation slotdetails
     *
     * slodetails.
     *
     * @param number esteblishmentUserMapID  (required)
     *
     * @return Http response
     */

    /**

     * @OA\Get(
     * path="/establishments/hospital/{hospitalID}/users/{esteblishmentusermapID}/slots",
     * tags={"Hospitals"},
     *    
     * @OA\Parameter(
     *         name="esteblishmentusermapID",
     *         in="path",
     *         description="esteblishmentusermapID",
     *         required=true,
     *         example=6257,
     *         @OA\Schema(type="number")
     *     ),
     * @OA\Parameter(
     *         name="hospitalID",
     *         in="path",
     *         description="hospitalID",
     *         required=true,
     *         example=1,
     *         @OA\Schema(type="number")
     *     ),
     * @OA\Parameter(
     *         name="date",
     *         in="query",
     *         description="date",
     *         required=true,
     *         example="2021-03-18",
     *         @OA\Schema(type="string")
     *     ),
     * @OA\Response(
     *         response="200",
     *         description="slot detail master data",
     *    @OA\JsonContent(
     *       @OA\Property(property="success", type="string", example="success")
     *        )
     *     ),
     * @OA\Response(
     *         response="400",
     *         description="Error: Bad request. required parameters is not supplied.",    
     *    @OA\JsonContent(
     *       @OA\Property(property="error", type="string", example="esteblishment User Map ID not found")
     *        )
     *     ),
     * )
     */
    public function hospitalslotdetails($esteblishmentUserMapID, $hospitalID)
    {

        if (!isset($esteblishmentUserMapID)) {
            return response()->json(['status' => 'fail', 'msg' => 'esteblishment User Map ID not found'], 400);
        }
        $res = new Slotmaster();
        $data = $res->gethospitalslotdetails($esteblishmentUserMapID, $hospitalID);
        return $data;
    }
    /**
     * Operation dashboard
     *
     * dashboard.
     *
     * @param number esteblishmentUserMapID  (required)
     *
     * @return Http response
     */

    /**

     * @OA\Get(
     * path="/establishments/users/{esteblishmentusermapID}/dashboard",
     * tags={"Establishments"},
     *    
     * @OA\Parameter(
     *         name="esteblishmentusermapID",
     *         in="path",
     *         description="esteblishmentusermapID",
     *         required=true,
     *         example=6257,
     *         @OA\Schema(type="number")
     *     ),
     * @OA\Response(
     *         response="200",
     *         description="key statics",
     *    @OA\JsonContent(
     *       @OA\Property(property="success", type="string", example="success")
     *        )
     *     ),
     * @OA\Response(
     *         response="400",
     *         description="Error: Bad request. required parameters is not supplied.",    
     *    @OA\JsonContent(
     *       @OA\Property(property="error", type="string", example="esteblishment User Map ID not found") 
     *        )
     *     ),
     * )
     */
    public function dashboard($esteblishmentUserMapID)
    {

        if (!isset($esteblishmentUserMapID)) {
            return response()->json(['status' => 'fail', 'msg' => 'esteblishment User Map ID not found'], 400);
        }
        $appt = new AppointmentDetails();
        $earnings_total = $appt::where('user_map_id', $esteblishmentUserMapID)->sum('cost');
        $patient_total = $appt::where('user_map_id', $esteblishmentUserMapID)->distinct('patient_id')->count('patient_id');
        $consultations_total = $appt::where('user_map_id', $esteblishmentUserMapID)->count('booking_id');
        $cards = DB::select("select ifnull(last_week_cost,0) as last_week_cost,ifnull(this_week_cost,0) as this_week_cost,ifnull(last_week_patient,0) as last_week_patient,ifnull(this_week_patient,0) as this_week_patient,ifnull(last_week_booking,0) as last_week_booking,ifnull(this_week_booking,0) as this_week_booking
from
((select sum(cost) as last_week_cost,count(distinct patient_id) as last_week_patient,count(booking_id) as last_week_booking
 from docexa_patient_booking_details as w1
 where w1.status=4 and date(w1.date) <= CURDATE() - INTERVAL 7 day and date(w1.date) > CURDATE() - INTERVAL 14 day and user_map_id=$esteblishmentUserMapID)
 as last,
(select sum(cost) as this_week_cost,count(distinct patient_id) as this_week_patient,count(booking_id) as this_week_booking
  from docexa_patient_booking_details as w2
  where w2.status=4 and date(w2.date) > CURDATE() - INTERVAL 7 day and user_map_id=$esteblishmentUserMapID)
 as this
)");
        $cards_total = DB::select("select ifnull(sum(cost),0) as cost,ifnull(count(distinct patient_id),0) as patient,ifnull(count(booking_id),0) as booking
  from docexa_patient_booking_details
  where status=4 and user_map_id=" . $esteblishmentUserMapID);
        $cards_total = $cards_total[0];
        $cards = $cards[0];
        if ($cards->last_week_cost == 0 && $cards->this_week_cost == 0) {

            $data = [

                'keystatics' => [
                    [
                        'name' => 'earnings',
                        'total' => (int) $cards_total->cost,
                        'last_7_days' => "0%",
                        'type' => 'increment'
                    ],
                    [
                        'name' => 'patients',
                        'total' => (int) $cards_total->patient,
                        'last_7_days' => "0%",
                        'type' => 'increment'
                    ],
                    [
                        'name' => 'consultations',
                        'total' => (int) $cards_total->booking,
                        'last_7_days' => "0%",
                        'type' => 'increment'
                    ]
                ],
            ];
        } else {
            if ($cards->last_week_cost == 0) {
                $percent_cost = (int) (($cards->this_week_cost - $cards->last_week_cost) * 100);
            } else {
                $percent_cost = (int) (($cards->this_week_cost - $cards->last_week_cost) * 100 / $cards->last_week_cost);
            }
            if ($cards->last_week_patient == 0) {
                $percent_patient = (int) (($cards->this_week_patient - $cards->last_week_patient) * 100);
            } else {
                $percent_patient = (int) (($cards->this_week_patient - $cards->last_week_patient) * 100 / $cards->last_week_patient);
            }
            if ($cards->last_week_booking == 0) {
                $percent_booking = (int) (($cards->this_week_booking - $cards->last_week_booking) * 100);
            } else {
                $percent_booking = (int) (($cards->this_week_booking - $cards->last_week_booking) * 100 / $cards->last_week_booking);
            }




            if ($percent_cost > 0) {
                $cost_flag = 'increment';
            } else {
                $cost_flag = 'decrement';
            }
            if ($percent_patient > 0) {
                $patient_flag = 'increment';
            } else {
                $patient_flag = 'decrement';
            }
            if ($percent_booking > 0) {
                $booking_flag = 'increment';
            } else {
                $booking_flag = 'decrement';
            }
            /*
            if ($cards->last_week_cost > $cards->this_week_cost) {
                $percent_cost = ($cards->this_week_cost * 100) / $cards->last_week_cost;
                $cost_flag = 'decrement';
            } else {
                $percent_cost = $cards->last_week_cost * 100 / $cards->this_week_cost;
                $cost_flag = 'increment';
            }
            if ($cards->last_week_patient > $cards->this_week_patient) {
                $percent_patient = $cards->this_week_patient * 100 / $cards->last_week_patient;
                $patient_flag = 'decrement';
            } else {
                $percent_patient = $cards->last_week_patient * 100 / $cards->this_week_patient;
                $patient_flag = 'increment';
            }
            if ($cards->last_week_booking > $cards->this_week_booking) {
                $percent_booking = $cards->this_week_booking * 100 / $cards->last_week_booking;
                $booking_flag = 'decrement';
            } else {
                $percent_booking = $cards->last_week_booking * 100 / $cards->this_week_booking;
                $booking_flag = 'increment';
            }
            */
            $data = [

                'keystatics' => [
                    [
                        'name' => 'earnings',
                        'total' => (int) $cards_total->cost,
                        'last_7_days' => abs(floor($percent_cost)) . "%",
                        'type' => $cost_flag
                    ],
                    [
                        'name' => 'patients',
                        'total' => (int) $cards_total->patient,
                        'last_7_days' => abs(floor($percent_patient)) . "%",
                        'type' => $patient_flag
                    ],
                    [
                        'name' => 'consultations',
                        'total' => (int) $cards_total->booking,
                        'last_7_days' => abs(floor($percent_booking)) . "%",
                        'type' => $booking_flag
                    ]
                ],
            ];
        }

        return response()->json(['status' => 'success', 'data' => $data], 200);
    }
    /**
     * Operation create appointment
     *
     * post appointment data to update.
     *
     * @return Http response
     */
    /**
     * @OA\Post(
     * path="/appointment/create",
     * summary="create appointment data",
     * description="",
     * operationId="createappointment",
     * tags={"Appointment"},
     * @OA\RequestBody( 
     *  required=true, 
     *  description="Pass appointment details",
     *  @OA\JsonContent(
     *      type="object",
     *      @OA\Property(property="user_map_id", type="number", example="6257"),
     *      @OA\Property(property="patient_name", type="number", example="satish soni"),
     *      @OA\Property(property="patient_mobile_no", type="number", example="7208613316"),
     *      @OA\Property(property="email", type="string", example="satish.soni@globalspace.in"),
     *      @OA\Property(property="schedule_remark", type="string", example="available tomorrow at 10 PM "),
     *      @OA\Property(property="sku_id", type="string", example="1"),
     *      @OA\Property(property="age", type="number", example="30")
     *  ),
     * ),
     * @OA\Response(
     *         response="200",
     *         description="Returns appointment data",
     * ),
     * @OA\Response(
     *    response=400,
     *    description="information not found response" 
     * )
     * )
     */
    /**
     * @OA\Post(
     * path="/establishments/users/{esteblishmentusermapID}/appointment/create",
     * summary="create appointment data",
     * description="",
     * operationId="createappointment",
     * tags={"Establishments"},
     * @OA\RequestBody( 
     *  required=true, 
     *  description="Pass appointment details",
     *  @OA\JsonContent(
     *      type="object",
     *      @OA\Property(property="user_map_id", type="number", example="6257"),
     *      @OA\Property(property="patient_id", type="number", example="1337"),
     *      @OA\Property(property="patient_name", type="string", example="satish soni"),
     *      @OA\Property(property="email", type="string", example="satish.soni@globalspace.in"),
     *      @OA\Property(property="patient_mobile_no", type="string", example="7208613316"),
     *      @OA\Property(property="sku_id", type="number", example="1"),
     *      @OA\Property(property="payment_mode", type="string", example="direct/free/byPatient"),
     *      @OA\Property(property="payment_amount", type="number", example="100"),
     *      @OA\Property(property="schedule_date", type="string", example=""),
     *      @OA\Property(property="schedule_time", type="string", example=""),
     *      @OA\Property(property="age", type="number", example="30"),
     *      @OA\Property(property="gender", type="number", example="1"),
     *     @OA\Property(property="source", type="string", example="goroga")
     *  ),
     * ),
     * @OA\Response(
     *         response="200",
     *         description="Returns appointment data",
     * ),
     * @OA\Response(
     *    response=400,
     *    description="information not found response" 
     * )
     * )
     */
    public function createappointment(Request $request)
    {

        $res = new AppointmentDetails();
        $data = $res->createappointment($request);
        return response()->json(['status' => 'success', 'data' => $data], 200);
        // 
    }
    /**
     * @OA\Post(
     * path="/establishments/hospital/{hospitalID}/users/{esteblishmentusermapID}/appointment/create",
     * summary="create appointment data",
     * description="",
     * tags={"Hospital"},
     * @OA\Parameter(
     *         name="esteblishmentusermapID",
     *         in="path",
     *         description="esteblishmentusermapID",
     *         required=true,
     *         example=6257,
     *         @OA\Schema(type="number")
     *     ),
     * @OA\Parameter(
     *         name="hospitalID",
     *         in="path",
     *         description="hospitalID",
     *         required=true,
     *         example=1,
     *         @OA\Schema(type="number")
     *     ),
     * @OA\RequestBody( 
     *  required=true, 
     *  description="Pass appointment details",
     *  @OA\JsonContent(
     *      type="object",
     *      @OA\Property(property="user_map_id", type="number", example="6257"),
     *      @OA\Property(property="patient_id", type="number", example="1337"),
     *      @OA\Property(property="patient_name", type="string", example="satish soni"),
     *      @OA\Property(property="email", type="string", example="satish.soni@globalspace.in"),
     *      @OA\Property(property="patient_mobile_no", type="string", example="7208613316"),
     *      @OA\Property(property="sku_id", type="number", example="1"),
     *      @OA\Property(property="payment_mode", type="string", example="direct/free/byPatient"),
     *      @OA\Property(property="payment_amount", type="number", example="100"),
     *      @OA\Property(property="schedule_date", type="string", example=""),
     *      @OA\Property(property="schedule_time", type="string", example=""),
     *      @OA\Property(property="age", type="number", example="30"),
     *      @OA\Property(property="gender", type="number", example="1")
     *  ),
     * ),
     * @OA\Response(
     *         response="200",
     *         description="Returns appointment data",
     * ),
     * @OA\Response(
     *    response=400,
     *    description="information not found response" 
     * )
     * )
     */
    public function createhospitalappointment($hospitalID, $esteblishmentusermapID, Request $request)
    {

        $res = new AppointmentDetails();
        $data = $res->createhospitalappointment($hospitalID, $esteblishmentusermapID, $request);
        return response()->json(['status' => 'success', 'data' => $data], 200);
    }
    public function updateappointment($appointment_encrypted_id, Request $request)
    {

        $res = new AppointmentDetails();
        $data = $res->updateappointment($appointment_encrypted_id, $request);
        return response()->json(['status' => 'success'], 200);
    }



    public function createappointmentv2(Request $request)
    {

        $res = new AppointmentDetails();
        $data = $res->createappointmentv2($request);
        $appointment_data = $data['appointment'][0];
        $spread = new SpreadsheetController();
        $spread->masterdata($appointment_data->booking_id, $appointment_data->location, $appointment_data->latlong, $appointment_data->patient_name, $appointment_data->mobile_no, $appointment_data->created_date, $appointment_data->cost);
        return response()->json(['status' => 'success', 'data' => $data], 200);
    }
    /**
     * Operation create payment
     *
     * booking id to create.
     *
     * @return Http response
     */
    /**
     * @OA\Get(
     * path="/payment/{appointment_encrypted_id}/charge",
     * summary="create payment data",
     * description="",
     * operationId="createpayment",
     * tags={"Payment"},
     * @OA\Parameter(
     *         name="appointment_encrypted_id",
     *         in="path",
     *         description="appointment_encrypted_id",
     *         required=true,
     *         example ="032dd17b77fab7d51a476c5ff2b5659c", 
     *         @OA\Schema(type="string")
     *     ),
     * @OA\Response(
     *         response="200",
     *         description="Returns payment data",
     * ),
     * @OA\Response(
     *    response=400,
     *    description="information not found response" 
     * )
     * )
     */
    public function createpayment($appointment_encrypted_id)
    {

        $res = new Payment();
        $data = $res->createpayment($appointment_encrypted_id);
        return response()->json(['status' => 'success', 'data' => $data], 200);
    }
    public function pay($appointment_encrypted_id)
    {

        $res = new Payment();
        return View('payment/pay.index', ['data' => $res->createpayment($appointment_encrypted_id), 'link' => '/payment/pay/']);
    }
    public function hospitalpay($appointment_encrypted_id)
    {

        $res = new Payment();
        return View('hospitalpayment/pay.index', ['data' => $res->createhospitalpayment($appointment_encrypted_id), 'link' => '/hospital/payment/pay/']);
    }
    public function payv2($appointment_encrypted_id)
    {

        $res = new Payment();
        return View('payment/pay.phizer', ['data' => $res->createpaymentv2($appointment_encrypted_id), 'link' => '/payment/pay/']);
    }
    public function payfail($appointment_encrypted_id)
    {
        $res = new AppointmentDetails();
        $appointment_data = $res->getappointment(null, $appointment_encrypted_id);
        if (!isset($appointment_data['appointment'][0])) {
            $data['msg'] = "Booking ID not matched";
            return $data;
        } else {
            $appointment_data = $appointment_data['appointment'][0];
            $urlArray = parse_url($appointment_data->handle, PHP_URL_PATH);
            $segments = explode('/', $urlArray);
            $numSegments = count($segments);
            $appointment_data->handle = $segments[$numSegments - 1];
            if ($appointment_data->source == 'goroga') {
                return redirect()->to("https://goroga.in?paymentStatus=failure");
            } else
                return redirect()->to($_ENV['APP_HANDLE'] . $appointment_data->handle . "/bookconsultation/" . $appointment_data->sku_id . "?paymentStatus=failure");
        }
    }
    public function payhospitalfail($appointment_encrypted_id)
    {
        $res = new AppointmentDetails();
        $appointment_data = $res->gethospitalappointment(null, $appointment_encrypted_id);
        if (!isset($appointment_data['appointment'][0])) {
            $data['msg'] = "Booking ID not matched";
            return $data;
        } else {
            $appointment_data = $appointment_data['appointment'][0];
            $urlArray = parse_url($appointment_data->handle, PHP_URL_PATH);
            $segments = explode('/', $urlArray);
            $numSegments = count($segments);
            $appointment_data->handle = $segments[$numSegments - 1];
            return redirect()->to($_ENV['APP_HANDLE'] . $appointment_data->handle . "/bookconsultation/" . $appointment_data->sku_id . "?paymentStatus=failure");
        }
    }
    public function paywebhook()
    {

        $inputJSON = file_get_contents('php://input');
        Log::info("webhookbooking", [$inputJSON]);
        $input = json_decode($inputJSON, TRUE); //convert JSON into array
        Log::info("webhookbooking", [$input]);
        $Status = $input["status"];
        $udf1 = $input["udf1"];
        $udf2 = $input["udf2"];
        if ($udf2 == 'legacy')
            $this->sendwebhook($inputJSON);
        else if ($udf2 == 'pfizer') {
            if ($Status == 'Success' || $Status == "success") {

                $appointment_encrypted_id = $input["productInfo"];
                $txnid = $input["productInfo"];
                $amount = $input["amount"];
                $res = new AppointmentDetails();
                $appointment_data = $res->getappointmentv3(null, $appointment_encrypted_id);
                //  var_dump($appointment_data['appointment'][0]);die;
                $appointment_data = $appointment_data['appointment'][0];
                $creditid = DB::table('docexa_patient_credit_history')->insertGetId([
                    'patient_id' => $appointment_data->patient_id,
                    'doctor_id' => 0,
                    'booking_id' => $appointment_data->book_id,
                    'credit_point' => $amount,
                    'transaction_id' => $txnid,
                    'transaction_date' => date('Y-m-d'),
                    'created_date' => date('Y-m-d H:i')
                ]);
                DB::update("update docexa_patient_booking_details_phizer set credit_history_id='" . $creditid . "' where booking_id='" . $appointment_data->book_id . "'");


                $data = [
                    'template' => 'pfizer_patient_appointment_request',
                    'appointment_id' => $appointment_encrypted_id
                ];

                $spread = new SpreadsheetController();
                $spread->updatedata($appointment_encrypted_id);
                $this->sendNotificationPfizer($data);
            }
        } else {
            if ($Status == 'Success' || $Status == "success") {

                $appointment_encrypted_id = $input["productInfo"];
                $txnid = $input["productInfo"];
                $amount = $input["amount"];
                $res = new AppointmentDetails();
                $appointment_data = $res->getappointment(null, $appointment_encrypted_id);
                //  var_dump($appointment_data['appointment'][0]);die;
                $appointment_data = $appointment_data['appointment'][0];
                $creditid = DB::table('docexa_patient_credit_history')->insertGetId([
                    'patient_id' => $appointment_data->patient_id,
                    'doctor_id' => $appointment_data->doctor_id,
                    'booking_id' => $appointment_data->book_id,
                    'credit_point' => $amount,
                    'transaction_id' => $txnid,
                    'transaction_date' => date('Y-m-d'),
                    'created_date' => date('Y-m-d H:i')
                ]);
                DB::update("update docexa_patient_booking_details set credit_history_id='" . $creditid . "' where booking_id='" . $appointment_data->book_id . "'");

                $urlArray = parse_url($appointment_data->handle, PHP_URL_PATH);
                $segments = explode('/', $urlArray);
                $numSegments = count($segments);
                $appointment_data->handle = $segments[$numSegments - 1];
                if ($appointment_data->payment_mode == "") {
                    $data = [
                        'template' => 'payment_and_appt_request_acknowledgement',
                        'handle' => $appointment_data->handle,
                        'appointment_id' => $appointment_encrypted_id
                    ];
                    $this->sendNotification($data);
                    $data = [
                        'template' => 'new_appointment_request_notifier',
                        'handle' => $appointment_data->handle,
                        'appointment_id' => $appointment_encrypted_id
                    ];
                    $this->sendNotification($data);
                } else if ($appointment_data->payment_mode == "byPatient" && $appointment_data->status == 2) {
                    $data = [
                        'template' => 'scheduled_appointment_payment_to_doctor',
                        'handle' => $appointment_data->handle,
                        'appointment_id' => $appointment_encrypted_id
                    ];
                    $this->sendNotification($data);
                    $data = [
                        'template' => 'scheduled_appointment_payment_to_patient',
                        'handle' => $appointment_data->handle,
                        'appointment_id' => $appointment_encrypted_id
                    ];
                    $this->sendNotification($data);
                } else if ($appointment_data->payment_mode == "byPatient" && $appointment_data->status == 1) {
                    $data = [
                        'template' => 'unscheduled_appointment_payment_to_doctor',
                        'handle' => $appointment_data->handle,
                        'appointment_id' => $appointment_encrypted_id
                    ];
                    $this->sendNotification($data);
                    $data = [
                        'template' => 'unscheduled_appointment_payment_to_patient',
                        'handle' => $appointment_data->handle,
                        'appointment_id' => $appointment_encrypted_id
                    ];
                    $this->sendNotification($data);
                }
            }
        }
        return response()->json(['status' => 'success'], 200);
    }

    public function paywebhookclone()
    {

        // $inputJSON = file_get_contents('php://input');
        // Log::info("webhookbooking",[$inputJSON]);
        // $input = json_decode($inputJSON, TRUE); //convert JSON into array
        $input = $_POST; //convert JSON into array
        Log::info("webhookbookingclone", [$input["status"]]);
        //  var_dump($input);
        $Status = $input["status"];
        $udf1 = $input["udf1"];
        $udf2 = $input["udf2"];
        if ($udf2 == 'pfizer') {
            if ($Status == 'Success' || $Status == "success") {

                $appointment_encrypted_id = $input["productInfo"];
                $txnid = $input["productInfo"];
                $amount = $input["amount"];
                $res = new AppointmentDetails();
                $appointment_data = $res->getappointmentv3(null, $appointment_encrypted_id);
                //  var_dump($appointment_data['appointment'][0]);die;
                $appointment_data = $appointment_data['appointment'][0];
                $creditid = DB::table('docexa_patient_credit_history')->insertGetId([
                    'patient_id' => $appointment_data->patient_id,
                    'doctor_id' => 0,
                    'booking_id' => $appointment_data->book_id,
                    'credit_point' => $amount,
                    'transaction_id' => $txnid,
                    'transaction_date' => date('Y-m-d'),
                    'created_date' => date('Y-m-d H:i')
                ]);
                DB::update("update docexa_patient_booking_details_phizer set credit_history_id='" . $creditid . "' where booking_id='" . $appointment_data->book_id . "'");


                $data = [
                    'template' => 'pfizer_patient_appointment_request',
                    'appointment_id' => $appointment_encrypted_id
                ];

                $spread = new SpreadsheetController();
                $spread->updatedata($appointment_encrypted_id);
                $this->sendNotificationPfizer($data);
                $mediapp_data = array(
                    'action' => 'docexa_referral',
                    'appointment_id' => '',
                    'patient_id' => '',
                    'fullname' => '',
                    'mobileadd' => '',
                    'email' => '',
                    'address' => '',
                    'landmark' => '',
                    'city' => '',
                    'state' => '',
                    'country' => '',
                    'pincode' => '',
                    'lat' => '',
                    'long' => '',
                    'addtype' => 'HOME',
                );
                Log::info([$mediapp_data]);
                Controller::mediappapi($mediapp_data);
            }
        } else {
            if ($Status == 'Success' || $Status == "success") {

                $appointment_encrypted_id = isset($input["productInfo"]) ? $input["productInfo"] : $input["productinfo"];
                $txnid = isset($input["productInfo"]) ? $input["productInfo"] : $input["productinfo"];
                $amount = $input["amount"];
                $res = new AppointmentDetails();
                $appointment_data = $res->getappointment(null, $appointment_encrypted_id);
                //  var_dump($appointment_data['appointment'][0]);die;
                $appointment_data = $appointment_data['appointment'][0];
                $creditid = DB::table('docexa_patient_credit_history')->insertGetId([
                    'patient_id' => $appointment_data->patient_id,
                    'doctor_id' => $appointment_data->doctor_id,
                    'booking_id' => $appointment_data->book_id,
                    'credit_point' => $amount,
                    'transaction_id' => $txnid,
                    'transaction_date' => date('Y-m-d'),
                    'created_date' => date('Y-m-d H:i')
                ]);
                DB::update("update docexa_patient_booking_details set credit_history_id='" . $creditid . "' where booking_id='" . $appointment_data->book_id . "'");

                $urlArray = parse_url($appointment_data->handle, PHP_URL_PATH);
                $segments = explode('/', $urlArray);
                $numSegments = count($segments);
                $appointment_data->handle = $segments[$numSegments - 1];
                if ($appointment_data->payment_mode == "") {
                    $data = [
                        'template' => 'payment_and_appt_request_acknowledgement',
                        'handle' => $appointment_data->handle,
                        'appointment_id' => $appointment_encrypted_id
                    ];
                    $this->sendNotification($data);
                    $data = [
                        'template' => 'new_appointment_request_notifier',
                        'handle' => $appointment_data->handle,
                        'appointment_id' => $appointment_encrypted_id
                    ];
                    $this->sendNotification($data);
                } else if ($appointment_data->payment_mode == "byPatient" && $appointment_data->status == 2) {
                    $data = [
                        'template' => 'scheduled_appointment_payment_to_doctor',
                        'handle' => $appointment_data->handle,
                        'appointment_id' => $appointment_encrypted_id
                    ];
                    $this->sendNotification($data);
                    $data = [
                        'template' => 'scheduled_appointment_payment_to_patient',
                        'handle' => $appointment_data->handle,
                        'appointment_id' => $appointment_encrypted_id
                    ];
                    $this->sendNotification($data);
                } else if ($appointment_data->payment_mode == "byPatient" && $appointment_data->status == 1) {
                    $data = [
                        'template' => 'unscheduled_appointment_payment_to_doctor',
                        'handle' => $appointment_data->handle,
                        'appointment_id' => $appointment_encrypted_id
                    ];
                    $this->sendNotification($data);
                    $data = [
                        'template' => 'unscheduled_appointment_payment_to_patient',
                        'handle' => $appointment_data->handle,
                        'appointment_id' => $appointment_encrypted_id
                    ];
                    $this->sendNotification($data);
                }
            }
        }
        return response()->json(['status' => 'success'], 200);
    }
    public function paywebhookhospitalclone()
    {

        // $inputJSON = file_get_contents('php://input');
        // Log::info("webhookbooking",[$inputJSON]);
        // $input = json_decode($inputJSON, TRUE); //convert JSON into array
        $input = $_POST; //convert JSON into array
        Log::info("paywebhookhospitalclone", [$input["status"]]);
        //  var_dump($input);
        $Status = $input["status"];
        $udf1 = $input["udf1"];
        $udf2 = $input["udf2"];
        if ($udf2 == 'pfizer') {
            if ($Status == 'Success' || $Status == "success") {

                $appointment_encrypted_id = $input["productInfo"];
                $txnid = $input["productInfo"];
                $amount = $input["amount"];
                $res = new AppointmentDetails();
                $appointment_data = $res->getappointmentv3(null, $appointment_encrypted_id);
                //  var_dump($appointment_data['appointment'][0]);die;
                $appointment_data = $appointment_data['appointment'][0];
                $creditid = DB::table('docexa_patient_credit_history')->insertGetId([
                    'patient_id' => $appointment_data->patient_id,
                    'doctor_id' => 0,
                    'booking_id' => $appointment_data->book_id,
                    'credit_point' => $amount,
                    'transaction_id' => $txnid,
                    'transaction_date' => date('Y-m-d'),
                    'created_date' => date('Y-m-d H:i')
                ]);
                DB::update("update docexa_patient_booking_details_phizer set credit_history_id='" . $creditid . "' where booking_id='" . $appointment_data->book_id . "'");


                $data = [
                    'template' => 'pfizer_patient_appointment_request',
                    'appointment_id' => $appointment_encrypted_id
                ];

                $spread = new SpreadsheetController();
                $spread->updatedata($appointment_encrypted_id);
                $this->sendNotificationPfizer($data);
                $mediapp_data = array(
                    'action' => 'docexa_referral',
                    'appointment_id' => '',
                    'patient_id' => '',
                    'fullname' => '',
                    'mobileadd' => '',
                    'email' => '',
                    'address' => '',
                    'landmark' => '',
                    'city' => '',
                    'state' => '',
                    'country' => '',
                    'pincode' => '',
                    'lat' => '',
                    'long' => '',
                    'addtype' => 'HOME',
                );
                Log::info([$mediapp_data]);
                Controller::mediappapi($mediapp_data);
            }
        } else {
            if ($Status == 'Success' || $Status == "success") {

                $appointment_encrypted_id = isset($input["productInfo"]) ? $input["productInfo"] : $input["productinfo"];
                $txnid = isset($input["productInfo"]) ? $input["productInfo"] : $input["productinfo"];
                $amount = $input["amount"];
                $res = new AppointmentDetails();
                $appointment_data = $res->gethospitalappointment(null, $appointment_encrypted_id);
                //  var_dump($appointment_data['appointment'][0]);die;
                $appointment_data = $appointment_data['appointment'][0];
                $creditid = DB::table('docexa_patient_credit_history')->insertGetId([
                    'patient_id' => $appointment_data->patient_id,
                    'doctor_id' => $appointment_data->doctor_id,
                    'booking_id' => $appointment_data->book_id,
                    'credit_point' => $amount,
                    'transaction_id' => $txnid,
                    'transaction_date' => date('Y-m-d'),
                    'created_date' => date('Y-m-d H:i')
                ]);
                DB::update("update docexa_hospital_patient_booking_details set credit_history_id='" . $creditid . "' where booking_id='" . $appointment_data->book_id . "'");

                $urlArray = parse_url($appointment_data->handle, PHP_URL_PATH);
                $segments = explode('/', $urlArray);
                $numSegments = count($segments);
                $appointment_data->handle = $segments[$numSegments - 1];
                if ($appointment_data->payment_mode == "") {
                    $data = [
                        'template' => 'payment_and_appt_request_acknowledgement',
                        'handle' => $appointment_data->handle,
                        'appointment_id' => $appointment_encrypted_id
                    ];
                    $this->sendNotification($data);
                    $data = [
                        'template' => 'new_appointment_request_notifier',
                        'handle' => $appointment_data->handle,
                        'appointment_id' => $appointment_encrypted_id
                    ];
                    $this->sendNotification($data);
                } else if ($appointment_data->payment_mode == "byPatient" && $appointment_data->status == 2) {
                    $data = [
                        'template' => 'scheduled_appointment_payment_to_doctor',
                        'handle' => $appointment_data->handle,
                        'appointment_id' => $appointment_encrypted_id
                    ];
                    $this->sendNotification($data);
                    $data = [
                        'template' => 'scheduled_appointment_payment_to_patient',
                        'handle' => $appointment_data->handle,
                        'appointment_id' => $appointment_encrypted_id
                    ];
                    $this->sendNotification($data);
                } else if ($appointment_data->payment_mode == "byPatient" && $appointment_data->status == 1) {
                    $data = [
                        'template' => 'unscheduled_appointment_payment_to_doctor',
                        'handle' => $appointment_data->handle,
                        'appointment_id' => $appointment_encrypted_id
                    ];
                    $this->sendNotification($data);
                    $data = [
                        'template' => 'unscheduled_appointment_payment_to_patient',
                        'handle' => $appointment_data->handle,
                        'appointment_id' => $appointment_encrypted_id
                    ];
                    $this->sendNotification($data);
                }
            }
        }
        return response()->json(['status' => 'success'], 200);
    }
    public function paysuccess($appointment_encrypted_id)
    {
        // return response()->json(['status' => 'success'], 200);
        if ($_ENV['ENVORNMENT'] == "staging") {
            Log::info("success", [$_POST]);
            $this->paywebhookclone();
        }
        if ($_ENV['ENVORNMENT'] == "prod") {
            Log::info("success", [$_POST]);
            $this->paywebhookclone();
        }
        $res = new AppointmentDetails();
        $appointment_data = $res->getappointment(null, $appointment_encrypted_id);
        if (!isset($appointment_data['appointment'][0])) {
            $data['msg'] = "Booking ID not matched";
            return $data;
        } else {
            $appointment_data = $appointment_data['appointment'][0];
            $urlArray = parse_url($appointment_data->handle, PHP_URL_PATH);
            $segments = explode('/', $urlArray);
            $numSegments = count($segments);
            $appointment_data->handle = $segments[$numSegments - 1];
            if ($appointment_data->source == 'goroga') {
                return redirect()->to("https://goroga.in?paymentStatus=success");
            } else
                return redirect()->to($_ENV['APP_HANDLE'] . $appointment_data->handle . "/appointment/" . $appointment_data->booking_id . "?paymentStatus=success");
        }
    }
    public function payhospitalsuccess($appointment_encrypted_id)
    {
        // return response()->json(['status' => 'success'], 200);
        if ($_ENV['ENVORNMENT'] == "staging") {
            Log::info("success", [$_POST]);
            $this->paywebhookhospitalclone();
        }
        $res = new AppointmentDetails();
        $appointment_data = $res->gethospitalappointment(null, $appointment_encrypted_id);
        if (!isset($appointment_data['appointment'][0])) {
            $data['msg'] = "Booking ID not matched";
            return $data;
        } else {
            $appointment_data = $appointment_data['appointment'][0];
            $urlArray = parse_url($appointment_data->handle, PHP_URL_PATH);
            $segments = explode('/', $urlArray);
            $numSegments = count($segments);
            $appointment_data->handle = $segments[$numSegments - 1];

            return redirect()->to($_ENV['APP_HOSPITAL_HANDLE'] . $appointment_data->handle . "/appointment/" . $appointment_data->booking_id . "?paymentStatus=success");
        }
    }

    public function payfailv2($appointment_encrypted_id)
    {
        $res = new AppointmentDetails();
        $appointment_data = $res->getappointmentv3(null, $appointment_encrypted_id);
        if (!isset($appointment_data['appointment'][0])) {
            $data['msg'] = "Booking ID not matched";
            return $data;
        } else {
            $appointment_data = $appointment_data['appointment'][0];

            return redirect()->to($_ENV['PFIZER_URL'] . "bookconsultation?paymentStatus=failure");
        }
    }
    public function paysuccessv2($appointment_encrypted_id)
    {

        $res = new AppointmentDetails();
        $appointment_data = $res->getappointmentv3(null, $appointment_encrypted_id);
        if (!isset($appointment_data['appointment'][0])) {
            $data['msg'] = "Booking ID not matched";
            return $data;
        } else {
            $appointment_data = $appointment_data['appointment'][0];
            //$spread = new SpreadsheetController();
            // $spread->masterdata($appointment_data->booking_id,$appointment_data->location, $appointment_data->latlong, $appointment_data->patient_name, $appointment_data->mobile_no, $appointment_data->created_date, $appointment_data->cost);

            return redirect()->to($_ENV['PFIZER_URL'] . "appointment/" . $appointment_data->booking_id . "?paymentStatus=success");
        }
    }
    /**
     * Operation delete doctor
     *
     * user_map_id to create.
     *
     * @return Http response
     */
    /**

     * @OA\Delete(
     * path="/establishments/users/{esteblishmentusermapID}",
     * tags={"Establishments"},
     *    
     * @OA\Parameter(
     *         name="esteblishmentusermapID",
     *         in="path",
     *         description="esteblishmentusermapID",
     *         required=false,
     *         example=65665,
     *         @OA\Schema(type="number")
     *     ),
     * @OA\Parameter(
     *         name="mobileno",
     *         in="query",
     *         description="mobileno",
     *         required=false,
     *         example=7208613316,
     *         @OA\Schema(type="number")
     *     ),
     * @OA\Response(
     *         response="200",
     *         description="key statics",
     *    @OA\JsonContent(
     *       @OA\Property(property="success", type="string", example="success")
     *        )
     *     ),
     * @OA\Response(
     *         response="400",
     *         description="Error: Bad request. required parameters is not supplied.",    
     *    @OA\JsonContent(
     *       @OA\Property(property="error", type="string", example="esteblishment User Map ID not found") 
     *        )
     *     ),
     * ) 
     */
    public function destroy($esteblishmentusermapID, Request $request)
    {
        $requestdata = $request->input();
        $res = new User();
        $data = $res->destroydoctor($esteblishmentusermapID, $requestdata['mobileno']);
        return $data;
    }
    /**
     * Operation save token id
     *
     * @return Http response
     */
    /**

     * @OA\Put(
     * path="/establishments/users/{esteblishmentusermapID}/token",
     * tags={"Establishments"},
     *  @OA\Parameter(
     *         name="esteblishmentusermapID",
     *         in="path",
     *         description="esteblishmentusermapID",
     *         required=true,
     *         example=65665,
     *         @OA\Schema(type="number")
     *     ),
     * @OA\RequestBody( 
     *  required=true, 
     *  description="update token ID details",
     *  @OA\JsonContent(
     *      type="object",
     *      @OA\Property(property="is_user_doctor", type="number", example="1"),
     *      @OA\Property(property="token_id", type="number", example="etpMjUnkVcg:APA91bGUjKPs7Aa6Nz6vem2Hc7w7OHYLWFR4dsiAXtUwCo_qcPcOqESULKbd8r0K4sUG1n3NvLwnr6ryrG96gmBEcPg2G3dD2ZMAt6y2cAWbDC4r6KiWVIsjwycfR__wZlkq1xMG0wxq"),
     *      @OA\Property(property="manufacturer", type="string", example="samsung"),
     *      @OA\Property(property="version", type="string", example="1.0.0"),
     *      @OA\Property(property="model", type="string", example="SM-G615F"),
     *       @OA\Property(property="platform", type="string", example="Android")
     *  ),
     * ),    
     * @OA\Response(
     *         response="200",
     *         description="save token",
     *    @OA\JsonContent(
     *       @OA\Property(property="success", type="string", example="success")
     *        )
     *     ),
     * @OA\Response(
     *         response="400",
     *         description="Error: Bad request. required parameters is not supplied.",    
     *    @OA\JsonContent(
     *       @OA\Property(property="error", type="string", example="esteblishment User Map ID not found") 
     *        )
     *     ),
     * ) 
     */
    public function updatetoken($esteblishmentusermapID, Request $request)
    {
        $requestdata = $request->input();
        //   var_dump($requestdata);die;
        Log::info([$esteblishmentusermapID]);
        Log::info([$requestdata]);
        $creditid = DB::table('docexa_doctor_device_master')->insertGetId([
            'user_map_id' => $esteblishmentusermapID,
            'push_token_id' => $requestdata['token_id'],
            'manufacturer' => $requestdata['manufacturer'],
            'version' => $requestdata['version'],
            'model' => $requestdata['model'],
            'platform' => $requestdata['platform'],
            'created_date' => date('Y-m-d H:i')
        ]);
        Log::info([$creditid]);
        return response()->json(['status' => 'success'], 200);
    }
    /**
     * Operation save prescription
     *
     * @return Http response
     */
    /**
     * @OA\Put(
     * path="/appointment/{appointment_encrypted_id}/prescription",
     * tags={"Appointment"},
     *    
     * @OA\Parameter(
     *         name="appointment_encrypted_id",
     *         in="path",
     *         description="appointment_encrypted_id",
     *         required=true,
     *         example ="032dd17b77fab7d51a476c5ff2b5659c", 
     *         @OA\Schema(type="string")
     *     ),
     * @OA\RequestBody( 
     *  required=true, 
     *  description="prescription url",
     *  @OA\JsonContent( 
     *             type="object",
     *             @OA\Property(
     *                property="urls",
     *                type="array",
     *                @OA\Items(
     *                      ),
     * ),
     *            @OA\Property(
     *                property="remark",
     *                type="string",
     *                 example="",
     * ),
     *  ),
     * ),    
     * @OA\Response(
     *         response="200",
     *         description="save prescription",
     *    @OA\JsonContent(
     *       @OA\Property(property="success", type="string", example="success")
     *        )
     *     ),
     * @OA\Response(
     *         response="400",
     *         description="Error: Bad request. required parameters is not supplied.",    
     *    @OA\JsonContent(
     *       @OA\Property(property="error", type="string", example="esteblishment User Map ID not found") 
     *        )
     *     ),
     * ) 
     */
    public function prescription($appointment_encrypted_id, Request $request)
    {
        $requestdata = $request->input();
        Log::info([$appointment_encrypted_id]);
        Log::info([$requestdata]);
        Prescription::where('booking_id', $appointment_encrypted_id)->delete();
        $pr = new Prescription();
        $pr->booking_id = $appointment_encrypted_id;
        if (is_array($requestdata['urls']))
            $pr->prescription_image = $requestdata['urls'][0];
        else
            $pr->prescription_image = $requestdata['urls'];
        $pr->save();
        return response()->json(['status' => 'success'], 200);
    }
    /**
     * Operation save account details
     *
     * @return Http response
     */
    /**
     * @OA\Put(
     * path="/establishments/users/{esteblishmentusermapID}/account",
     * tags={"Establishments","Doctor Registration APIs"},
     *    
     * @OA\Parameter(
     *         name="esteblishmentusermapID",
     *         in="path",
     *         description="esteblishmentusermapID",
     *         required=true,
     *         example ="65665", 
     *         @OA\Schema(type="number")
     *     ),
     * @OA\RequestBody( 
     *  required=true, 
     *  description="account details",
     *  @OA\JsonContent( 
     *             type="object",
     *             @OA\Property(
     *                property="bank_name",
     *                type="string",
     *                example="SBI",
     * ),
     *            @OA\Property(
     *                property="bank_acc_no",
     *                type="string",
     *                 example="1234567890",
     * ),
     *             @OA\Property(
     *                property="bank_ifsc_code",
     *                type="string",
     *                 example="SBIN001",
     * ),
     *             @OA\Property(
     *                property="account_name",
     *                type="string",
     *                 example="Satish Soni",
     * ),
     *  ),
     * ),    
     * @OA\Response(
     *         response="200",
     *         description="save account details",
     *    @OA\JsonContent(
     *       @OA\Property(property="success", type="string", example="success")
     *        )
     *     ),
     * @OA\Response(
     *         response="400",
     *         description="Error: Bad request. required parameters is not supplied.",    
     *    @OA\JsonContent(
     *       @OA\Property(property="error", type="string", example="esteblishment User Map ID not found") 
     *        )
     *     ),
     * ) 
     */
    public function updateaccount($esteblishmentusermapID, Request $request)
    {
        $requestdata = $request->input();
        Log::info([$esteblishmentusermapID]);
        Log::info([$requestdata]);

        $dataarray = [
            'user_map_id' => $esteblishmentusermapID,
            'bank_name' => $requestdata['bank_name'],
            'bank_acc_no' => $requestdata['bank_acc_no'],
            'bank_ifsc_code' => $requestdata['bank_ifsc_code'],
            'account_name' => $requestdata['account_name'],
            'created_date' => date('Y-m-d H:i:s'),
            'created_by' => 1,
            'updated_date' => date('Y-m-d H:i:s'),
            'updated_by' => 1
        ];

        Accountmaster::updateOrInsert(['user_map_id' => $esteblishmentusermapID], $dataarray);

        return response()->json(['status' => 'success'], 200);
    }
    /**
     * Operation Get account details
     *
     * @return Http response
     */
    /**
     * @OA\Get(
     * path="/establishments/users/{esteblishmentusermapID}/account",
     * tags={"Establishments"},
     *    
     * @OA\Parameter(
     *         name="esteblishmentusermapID",
     *         in="path",
     *         description="esteblishmentusermapID",
     *         required=true,
     *         example ="65665", 
     *         @OA\Schema(type="number")
     *     ),
     * @OA\Response(
     *         response="200",
     *         description="get account details",
     *    @OA\JsonContent(
     *       @OA\Property(property="success", type="string", example="success")
     *        )
     *     ),
     * @OA\Response(
     *         response="400",
     *         description="Error: Bad request. required parameters is not supplied.",    
     *    @OA\JsonContent(
     *       @OA\Property(property="error", type="string", example="esteblishment User Map ID not found") 
     *        )
     *     ),
     * ) 
     */
    public function getaccount($esteblishmentusermapID)
    {

        Log::info([$esteblishmentusermapID]);

        $pr = Accountmaster::where('user_map_id', $esteblishmentusermapID);
        if ($pr->first() != null)
            return response()->json(['status' => 'success', 'data' => $pr->first()], 200);
        else
            return response()->json(['status' => 'failure', 'message' => "Not found any bank details"], 400);
    }
    /**
     * Operation delete account details
     *
     * @return Http response
     */
    /**
     * @OA\Delete(
     * path="/establishments/users/{esteblishmentusermapID}/account",
     * tags={"Establishments"},
     *    
     * @OA\Parameter(
     *         name="esteblishmentusermapID",
     *         in="path",
     *         description="esteblishmentusermapID",
     *         required=true,
     *         example ="65665", 
     *         @OA\Schema(type="number")
     *     ),
     * @OA\Response(
     *         response="200",
     *         description="delete account details",
     *    @OA\JsonContent(
     *       @OA\Property(property="success", type="string", example="success")
     *        )
     *     ),
     * @OA\Response(
     *         response="400",
     *         description="Error: Bad request. required parameters is not supplied.",    
     *    @OA\JsonContent(
     *       @OA\Property(property="error", type="string", example="esteblishment User Map ID not found") 
     *        )
     *     ),
     * ) 
     */
    public function deleteaccount($esteblishmentusermapID)
    {

        Log::info([$esteblishmentusermapID]);

        $pr = Accountmaster::where('user_map_id', $esteblishmentusermapID);
        $pr->delete();
        return response()->json(['status' => 'success'], 200);
    }
    /**
     * Operation Get account details by IFSC
     *
     * @return Http response
     */
    /**
     * @OA\Get(
     * path="/account/ifsc/{ifsccode}",
     * tags={"Public"},
     *    
     * @OA\Parameter(
     *         name="ifsccode",
     *         in="path",
     *         description="IFSC CODE",
     *         required=true,
     *         example ="KARB0000001", 
     *         @OA\Schema(type="string")
     *     ),
     * @OA\Response(
     *         response="200",
     *         description="get account details by IFSC",
     *    @OA\JsonContent(
     *       @OA\Property(property="success", type="string", example="success")
     *        )
     *     ),
     * @OA\Response(
     *         response="400",
     *         description="Error: Bad request. required parameters is not supplied.",    
     *    @OA\JsonContent(
     *       @OA\Property(property="error", type="string", example="esteblishment User Map ID not found") 
     *        )
     *     ),
     * ) 
     */
    public function getbankdetails($ifsccode)
    {
        $api_url = "https://ifsc.razorpay.com/" . urlencode($ifsccode);

        if ($api_url) {
            $url = $api_url;
            $ch = curl_init($url);
            curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: application/json'));
            curl_setopt($ch, CURLOPT_URL, $url);
            curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
            $output = curl_exec($ch);
            $info = curl_getinfo($ch);
            $http_result = $info['http_code'];
            curl_close($ch);
            return response()->json(['status' => 'success', 'data' => json_decode($output)], 200);
        }
        return response()->json(['status' => 'failure'], 404);
    }
    /**

     * @OA\Get(
     * path="/doctors/search",
     * tags={"Doctors"},
     *      @OA\Parameter(
     *         name="prefix_term",
     *         in="query",
     *         description="prefix_term",
     *         required=true,
     *         @OA\Items(type="string")
     *     ),
     *      @OA\Parameter(
     *         name="page",
     *         in="query",
     *         description="page",
     *         required=true,
     *         @OA\Items(type="int")
     *     ),
     *      @OA\Parameter(
     *         name="per_page",
     *         in="query",
     *         description="per_page",
     *         required=true,
     *         @OA\Items(type="int")
     *     ),
     * *      @OA\Parameter(
     *         name="location",
     *         in="query",
     *         description="location",
     *         required=true,
     *         @OA\Items(type="string")
     *     ),
     *  *      @OA\Parameter(
     *         name="speciality",
     *         in="query",
     *         description="speciality",
     *         required=true,
     *         @OA\Items(type="string")
     *     ),
     * @OA\Response(
     *         response="400",
     *         description="Error: Bad request. required parameters is not supplied.", 
     *     ),
     * )
     */
    public function searchdoctor(Request $request)
    {
        $parameter = $request->all();
        $specialization = isset($parameter["speciality"]) ? $parameter["speciality"] : "";
        $location = isset($parameter["location"]) ? $parameter["location"] : "";
        //$dosage = isset($parameter["dosage"])?$parameter["dosage"]:"";
        $page = (isset($parameter['page'])) ? $parameter['page'] : 1;
        $per_page = (isset($parameter['per_page'])) ? $parameter['per_page'] : 20;
        $prefix_term = (isset($parameter['prefix_term'])) ? $parameter['prefix_term'] : "";
        $count = ((int) $page - 1) * ((int) $per_page);
        //$query = Doctor::where('pharmaclient_name','like',$prefix_term.'%')->skip($count)->take($per_page);
        $user = new User();
        $doctors = $user->getDoctors($prefix_term, $count, $per_page, $location, $specialization);
        /*
        if($specialization!=""){
            $specializations = explode(",",$specialization);
            $query->whereIn('specialization',$specializations);
        }
        if($location!=""){
            $locations = explode(",",$location);
            $query->whereIn('location',$locations);
        }
        $doctors = $query->get();
        */
        return $doctors;
    }
    /**

     * @OA\Get(
     * path="/doctors/search/vaccine",
     * tags={"Vaccine"},
     *      @OA\Parameter(
     *         name="pincode",
     *         in="query",
     *         description="pincode",
     *         required=true,
     *         @OA\Items(type="number")
     *     ),
     *      @OA\Parameter(
     *         name="state",
     *         in="query",
     *         description="state",
     *         required=true,
     *         @OA\Items(type="number")
     *     ),
     *      @OA\Parameter(
     *         name="city",
     *         in="query",
     *         description="city",
     *         required=true,
     *         @OA\Items(type="number")
     *     ),
     * @OA\Response(
     *         response="400",
     *         description="Error: Bad request. required parameters is not supplied.", 
     *     ),
     * )
     */
    /**

     * @OA\Get(
     * path="/search/vaccine/doctors",
     * tags={"Vaccine"},
     *      @OA\Parameter(
     *         name="pincode",
     *         in="query",
     *         description="pincode",
     *         required=true,
     *         @OA\Items(type="number")
     *     ),
     *      @OA\Parameter(
     *         name="state",
     *         in="query",
     *         description="state",
     *         required=true,
     *         @OA\Items(type="number")
     *     ),
     *      @OA\Parameter(
     *         name="city",
     *         in="query",
     *         description="city",
     *         required=true,
     *         @OA\Items(type="number")
     *     ),
     * @OA\Response(
     *         response="400",
     *         description="Error: Bad request. required parameters is not supplied.", 
     *     ),
     * )
     */
    public function searchdoctorforvaccine(Request $request)
    {
        $parameter = $request->all();
        $pincode = isset($parameter["pincode"]) ? $parameter["pincode"] : "";
        $searchflag = isset($parameter["searchflag"]) ? $parameter["searchflag"] : 1;
        $city = isset($parameter["city"]) ? $parameter["city"] : "";
        $state = isset($parameter["state"]) ? $parameter["state"] : "";
        $page = (isset($parameter['page'])) ? $parameter['page'] : 1;
        $per_page = (isset($parameter['per_page'])) ? $parameter['per_page'] : 20;
        $count = ((int) $page - 1) * ((int) $per_page);
        //$query = Doctor::where('pharmaclient_name','like',$prefix_term.'%')->skip($count)->take($per_page);
        $user = new User();
        $doctors = $user->getDoctorsforvaccine($count, $per_page, $pincode, $city, $state, $searchflag);

        return $doctors;
    }
    /**

     * @OA\Get(
     * path="/search/vaccine/city",
     * tags={"Vaccine"},
     * @OA\Response(
     *         response="400",
     *         description="Error: Bad request. required parameters is not supplied.", 
     *     ),
     * )
     */
    public function searchCityforvaccine()
    {

        $user = new User();
        $doctors = $user->getCityforvaccine();

        return $doctors;
    }

    /**
     * Operation pfizerdoctorregister
     *
     * post Doctor data to update.
     *
     * @return Http response
     */
    /**
     * @OA\Post(
     * path="/doctors/register/vaccine",
     * summary="add doctor data",
     * description="",
     * operationId="pfizerdoctorregister",
     * tags={"Doctors"},
     * @OA\RequestBody(
     *  required=true,
     *  description="Pass doctor details",
     *  @OA\JsonContent(
     *      type="object",
     *      @OA\Property(property="is_user_doctor", type="number", example="1"),
     *      @OA\Property(property="firstName", type="string", format="text", example="satish"),
     *      @OA\Property(property="lastName", type="string", format="text", example="soni"),
     *      @OA\Property(property="mobileNo", type="integer", example="7208613316"),
     *      @OA\Property(property="doctor_fee", type="number", example="100"),
     *      @OA\Property(property="doctor_city", type="string", example="NA"),
     *      @OA\Property(property="doctor_mr_no", type="string", example="TEMPV"),
     *      @OA\Property(property="speciality_id", type="int", example="30"),
     *      @OA\Property(property="email", type="text", example="satish.soni@globalspace.in"),
     *      @OA\Property(property="password", type="text", example="welcome"),
     *  ),
     * ),
     * @OA\Response(
     *         response="200",
     *         description="Returns doctors data",
     * ),
     * @OA\Response(
     *    response=400,
     *    description="information not found response" 
     * )
     * )
     */
    public function pfizerdoctorregister(Request $request)
    {

        $res = new User();
        $data = $res->pfizerdoctorregister($request);
        return response()->json($data->original, 200);
    }


    /**
     * Operation forgotPasswordFordoctor
     *
     * post Doctor data to update.
     *
     * @return Http response
     */
    /**
     * @OA\Post(
     * path="/forgotPassword",
     * summary="Forgot password for patient",
     * description="",
     * operationId="forgotPasswordFordoctor",
     * tags={"Doctors"},
     * @OA\RequestBody(
     *  required=true,
     *  description="Forgot password api for doctor",
     *  @OA\JsonContent(
     *      type="object",
     *       @OA\Property(property="doctorId", type="int", example="1"),
     *      @OA\Property(property="password", type="text", example="welcome"),
     *  ),
     * ),
     * @OA\Response(
     *         response="200",
     *         description="Your Password Successfully Changed.",
     * ),
     * @OA\Response(
     *    response=400,
     *    description="information not found response" 
     * )
     * )
     */
    public function forgotPassword(Request $request)
    {
        try {
            $validator = Validator::make($request->all(), [
                'doctorId' => 'required',
                'password' => 'required',
            ]);

            if ($validator->fails()) {
                return response()->json(['success' => false, 'message' => 'Validation failed', 'errors' => $validator->errors()], 422);
            }

            Log::info('login input', ['data' => $request]);
            $input = $request->all();
            $doctorUserMap = DB::table('docexa_medical_establishments_medical_user_map')->where('id', $input['doctorId'])->first()->medical_user_id;

            $doctor = Doctor::where('pharmaclient_id', $doctorUserMap)->first();
            if ($doctorUserMap) {
                $doctor->password = md5($input['password']);
                $save = $doctor->save();
                if ($save) {
                    return response()->json(['status' => true, 'message' => "Your Password Successfully Changed."], 200);
                }
            } else {
                return response()->json(['status' => false, 'message' => "Doctor is not exist"], 200);
            }
        } catch (\Throwable $th) {
            Log::info(["error" => $th]);
            return response()->json(['status' => false, 'message' => "Internal server error"], 500);
        }
    }

    public function changePassword(Request $request)
    {
        try {
            $validator = Validator::make($request->all(), [
                'doctorId' => 'required',
                'newPassword' => 'required',
            ]);

            if ($validator->fails()) {
                return response()->json(['success' => false, 'message' => 'Validation failed', 'errors' => $validator->errors()], 422);
            }
            $input = $request->all();
            $doctorUserMap = DB::table('docexa_medical_establishments_medical_user_map')->where('id', $input['doctorId'])->first()->medical_user_id;

            $doctor = Doctor::where('pharmaclient_id', $doctorUserMap)->first();


            if ($doctorUserMap) {
                $doctor->password = md5($input['newPassword']);
                $save = $doctor->save();
                if ($save) {
                    return response()->json(['status' => true, 'message' => "Your Password Successfully Changed."], 200);
                }
            } else {
                return response()->json(['status' => false, 'message' => "Doctor is not exist"], 200);
            }
        } catch (\Throwable $th) {
            Log::info(["error" => $th]);
            return response()->json(['status' => false, 'message' => "Internal server error"], 500);
        }
    }

    public function medicalCertificate(Request $request, $doctorId)
    {
        try {
            $validator = Validator::make($request->all(), [
                "patient_id" => 'required'
            ]);
            if ($validator->fails()) {
                return response()->json(['success' => false, 'message' => 'Validation failed', 'errors' => $validator->errors()], 422);
            }
            $input = $request->all();

            $docexaPatientDoctorRelationExist = DB::table('docexa_patient_doctor_relation')->where('patient_id', $input['patient_id'])->where('user_map_id', $doctorId)->first();
            Log::info(["Patient Exist" => $docexaPatientDoctorRelationExist]);

            // $patientExist =Patientmaster::find($input['patient_id']);
            // Log::info(['input' => $request->all()]);

            // id, medical_certificate_type, patient_id, age, diagnosis, treatment_date, from_date, to_date, created_at, updated_at, user_map_id
            if ($docexaPatientDoctorRelationExist) {
                $certificate = new medicalCertificate();
                $certificate->medical_certificate_type = $input['medical_certificate_type'];
                $certificate->patient_id = $input['patient_id'];
                $certificate->age = $input['age'];
                $certificate->diagnosis = $input['diagnosis'];
                $certificate->treatment_date = $input['treatment_date'];
                $certificate->from_date = $input['from_date'];
                $certificate->to_date = $input['to_date'];
                $certificate->user_map_id = $doctorId;
                $certificate->notes = $input['notes'];
                $save = $certificate->save();

                if ($save) {
                    return response()->json(['status' => true, 'message' => "Medical Certificate added Successfully"], 200);
                } else {
                    return response()->json(['status' => false, 'message' => "Something went wrong"], 400);
                }
            } else {
                return response()->json(['status' => false, 'message' => "doctor patient relation does not exist"], 401);
            }
        } catch (\Throwable $th) {
            Log::info(["error" => $th]);
            return response()->json(['status' => false, 'message' => "Internal server error"], 500);
        }
    }

    public function getmedicalCertificate($doctorId, $patientId)
    {
        try {
            $docexaPatientDoctorRelationExist = DB::table('docexa_patient_doctor_relation')->where('patient_id', $patientId)->where('user_map_id', $doctorId)->first();
            Log::info(["Patient Exist" => $docexaPatientDoctorRelationExist]);
            if ($docexaPatientDoctorRelationExist) {
                $data = medicalCertificate::where('user_map_id', $doctorId)->where('patient_id', $patientId)->get();
                $structuredata = [];
                if ($data) {
                    foreach ($data as $key => $value) {
                        $patientName = Patientmaster::where('patient_id', $patientId)->first()->patient_name;
                        $medicalCertificateName = medicalCertificateMasterModel::where('id', $value->medical_certificate_type)->first()->certificate_name;
                        $structuredata[] = [
                            'medical_certificate_id' => $value->medical_certificate_type,
                            'medical_certificate_type' => $medicalCertificateName,
                            'patient_id' => $value->patient_id,
                            'patient_name' => $patientName,
                            "age" => $value->age,
                            "diagnosis" => $value->diagnosis,
                            "treatment_date" => $value->treatment_date,
                            "from_date" => $value->from_date,
                            "to_date" => $value->to_date,
                            "user_map_id" => $value->user_map_id,
                            "notes" => $value->notes
                        ];
                    }

                    return response()->json(['status' => true, 'message' => "Record Found", 'data' => $structuredata], 200);
                } else {
                    return response()->json(['status' => true, 'message' => "Record not found"], 200);
                }
            } else {
                return response()->json(['status' => false, 'message' => "doctor patient relation does not exist"], 401);
            }
        } catch (\Throwable $th) {
            Log::info(["error" => $th]);
            return response()->json(['status' => false, 'message' => "Internal server error"], 500);
        }
    }

    public function getmedicalCertificatesListUnderDoctor($doctorId)
    {
        try {
            $doctorUserMap = DB::table('docexa_medical_establishments_medical_user_map')->where('id', $doctorId)->first()->medical_user_id;

            $doctorExist = Doctor::where('pharmaclient_id', $doctorUserMap)->first();
            Log::info(['doctor exist' => $doctorExist]);
            if ($doctorExist) {
                $data = medicalCertificate::where('user_map_id', $doctorId)
                    ->orderBy('created_at', 'desc')
                    ->get();

                if ($data) {
                    $structuredata = [];
                    foreach ($data as $key => $value) {
                        $patient = Patientmaster::where('patient_id', $value->patient_id)->first();
                        $patientName = '';
                        if ($patient) {
                            $patientName = $patient->patient_name;
                        }
                        // $patientName = Patientmaster::where('patient_id', $value->patient_id)->first()->patient_name;
                        // patient_name

                        $medicalCertificateName = medicalCertificateMasterModel::where('id', $value->medical_certificate_type)->first()->certificate_name;
                        $structuredata[] = [
                            'medical_certificate_id' => $value->medical_certificate_type,
                            'medical_certificate_type' => $medicalCertificateName,
                            'patient_id' => $value->patient_id,
                            'patient_name' => $patientName,
                            "age" => $value->age,
                            "diagnosis" => $value->diagnosis,
                            "treatment_date" => $value->treatment_date,
                            "from_date" => $value->from_date,
                            "to_date" => $value->to_date,
                            "user_map_id" => $value->user_map_id,
                            "notes" => $value->notes,
                            "created_at" => $value->created_at
                        ];
                    }
                    return response()->json(['status' => true, 'message' => 'Data Found', 'data' => $structuredata], 200);
                } else {
                    return response()->json(['status' => false, 'message' => 'No Data Found'], 404);
                }
            } else {
                return response()->json(["status" => false, "message" => "Invalid doctor id"], 401);
            }
        } catch (\Throwable $th) {
            Log::info(["error" => $th]);
            return response()->json(['status' => false, 'message' => "Internal server error"], 500);
        }
    }

    public function getMedicalCertificateData()
    {
        try {
            $data = medicalCertificateMasterModel::all();
            if ($data) {
                return response()->json(['status' => true, 'message' => 'Data found', 'data' => $data], 200);
            } else {
                return response()->json(['status' => false, 'message' => 'Data not found', 'data' => null], 404);
            }
        } catch (\Throwable $th) {
            Log::info(["error" => $th]);
            return response()->json(['status' => false, 'message' => "Internal server error"], 500);
        }
    }

    public function viewPrescription($id, $patientId, $booking_id)
    {
        try {
            $patientData = Patientmaster::where('patient_id', $patientId)->first();
            if ($patientData) {
                $pres = new PrescriptionData();
                $data = $pres->getViewOfPrescription($id, $patientId, $booking_id);
                Log::info(['data' => $data]);
                $dataForPatient = [];

                if ($data) {
                    $dataForPatient = [
                        'patient_name' => $patientData->patient_name ? $patientData->patient_name : '',
                        'mobile_no' => $patientData->mobile_no ? $patientData->mobile_no : '',
                        'age' => $patientData->age ? $patientData->age : '',
                        'gender' => $patientData->gender ? (1 ? "Male" : (2 ? "Female" : "Other")) : ""
                    ];

                    $dataOfDoctor = [];
                    $doctorUserMap = DB::table('docexa_medical_establishments_medical_user_map')->where('id', $id)->first()->medical_user_id;
                    $doctorData = Doctor::where('pharmaclient_id', $doctorUserMap)->first();
                    $spe = [];
                    $qualification = '';
                    if ($doctorData) {
                        $specialities = DB::table('docexa_doctor_specialization')->where('pharmaclient_id', $doctorData->pharmaclient_id)->get();
                        $qualification = $doctorData->qualification;
                        if (count($specialities) > 0) {
                            foreach ($specialities as $speciality) {
                                $spe[] = $speciality->specialization ? $speciality->specialization : 0;
                            }
                        }
                        $dataOfDoctor = [
                            'pharmaclient_name' => ($doctorData->pharmaclient_name || $doctorData->last_name) ? $doctorData->pharmaclient_name . " " . $doctorData->last_name : '',
                            'mobile_no' => $doctorData->mobile_no ? $doctorData->mobile_no : '',
                            'specialization' => $spe,
                            'qualification' => $qualification
                        ];
                    }
                    $patinetDataForRx = [];

                    $vitalsData = DB::table('docexa_vital_record')->where('prescription_id', $data->id)->first();
                    $vitals = [];
                    if ($vitalsData) {
                        $vitals[] = [
                            'vitalname' => $vitalsData->vital_name ? $vitalsData->vital_name : '',
                            'value' => $vitalsData->value ? $vitalsData->value : ''
                        ];
                    }

                    $drugsData = PrescriptionItems::where('prescription_id', $data->id)->get();
                    $dataForDrugs = [];

                    if ($drugsData) {
                        foreach ($drugsData as $drugdata) {
                            $medicationItemName = Medication::where('id', $drugdata->medication_id)->first()->medication_name;
                            $dataForDrugs[] = [
                                'medication' => $medicationItemName . " " . $drugdata->timing . " " . $drugdata->duration . " " . $drugdata->doses,
                                // 'timing' => $drugdata->timing,
                                // 'duration' => $drugdata->duration,
                                // 'doses' => $drugdata->doses,
                            ];
                        }
                    }
                    $diagnosis = [];
                    $diagnosisRow = json_decode($data->diagnosis_row);
                    Log::info(['diagnosisRow' => $diagnosisRow]);
                    foreach ($diagnosisRow as $diagnosisData) {
                        $diagnosis[] = [
                            'name' => $diagnosisData->name ? $diagnosisData->name : '',
                            'diagnosis_days' => $diagnosisData->data ? $diagnosisData->data->Diagnosis_days . " " . $diagnosisData->data->Diagnosis_duration : ''
                        ];
                    }

                    $symptoms = [];
                    $symptomsRow = json_decode($data->complaints_row);

                    foreach ($symptomsRow as $symptomsData) {
                        $symptoms[] = [
                            'name' => $symptomsData->name ? $symptomsData->name : '',
                            'symptoms_days' => $symptomsData->data->Symptoms_days ? $symptomsData->data->Symptoms_days . " " . $symptomsData->data->Symptoms_duration : '',
                            'severity' => $symptomsData->data->severity ? $symptomsData->data->severity : '',
                        ];
                    }
                    $advices = [];
                    $adviceRow = json_decode($data->advice_row);
                    foreach ($adviceRow as $advice) {
                        $advices[] = [
                            'advice' => $advice
                        ];
                    }

                    $patinetDataForRx = [
                        'follow_up' => $data->follow_up,
                        'test_requested' => $data->test_requested,
                        'advice' => $advices,
                        'diagnosis' => $diagnosis,
                        'date' => date("d-m-Y", strtotime($data->date)),
                        'symptoms' => $symptoms,
                        'vitals' => $vitals,
                        'dataForDrugs' => $dataForDrugs,
                        'medical_history' => $data->medical_history,
                        'lifestyle' => $data->lifestyle
                    ];

                    $prescriptionData = [
                        'patient' => $dataForPatient,
                        'doctor' => $dataOfDoctor,
                        'rx' => $patinetDataForRx,
                    ];
                    //     $mpdf = new Mpdf();
                    //     $mpdf->CSSInline = true;
                    //     $html = View::make('prescriptionpreview', ['data' => $prescriptionData])->render();
                    //     $mpdf->WriteHTML($html);
                    //     $headers = [
                    //         'Content-Type' => 'application/pdf',
                    //         'Content-Disposition' => 'attachment; filename="filename.pdf"',
                    //     ];
                    //    return $mpdf->Output('Precription.pdf', 'D'); 

                    // return view('prescriptionpreview', ['data' => $prescriptionData]);




                    $html = View::make('prescriptionpreview', ['data' => $prescriptionData])
                        ->render();


                    $dompdf = new Dompdf();
                    $dompdf->loadHtml($html);
                    $dompdf->set_option('isHtml5ParserEnabled', true);
                    $dompdf->render();
                    $dompdf->stream('Prescription.pdf', array('Attachment' => true));
                } else {
                    return response()->json(['status' => false, 'messsage' => 'Prescription data not found'], 400);
                }
            } else {
                return response()->json(['status' => false, 'messsage' => 'Patient not found'], 400);
            }
        } catch (\Throwable $th) {
            Log::info(["error" => $th]);
            return response()->json(['status' => false, 'message' => "Internal server error"], 500);
        }
    }

    public function signUpload(Request $request, $id)
    {

        try {
            Log::info('signUpload');
            $input = $request->all();
            $doctorUserMap = DB::table('docexa_medical_establishments_medical_user_map')->where('id', $id)->first()->medical_user_id;
            $doctorData = Doctor::where('pharmaclient_id', $doctorUserMap)->first();

            Log::info(['doctorExist' => $doctorData]);
            if ($doctorData) {
                $file = $request->hasFile('upload_file');
                if ($file) {
                    $file = $request->file('upload_file');
                    $FileName = $file->getClientOriginalName();

                    $filename = pathinfo($FileName, PATHINFO_FILENAME);
                    $extension = pathinfo($FileName, PATHINFO_EXTENSION);
                    $customFileName = $id . '-signuture-' . $this->generateTimestamp() . '.' . $extension;
                    // dd($customFileName);
                    $filePath = 'Signutures/' . $customFileName;
                    $fileSaved = Storage::disk('s3')->put($filePath, file_get_contents($file));

                    if ($fileSaved) {
                        Log::info(['filedaved' => $fileSaved]);
                        $sign = new DoctorPrecriptionData();
                        $IsSignExist = DoctorPrecriptionData::where('user_map_id', $id)->first();

                        if ($IsSignExist) {
                            Log::info(['already exist' => $IsSignExist]);
                            $IsSignExist->sign_url = Storage::disk('s3')->url($filePath);
                            // $IsSignExist->header = $input['header'];
                            // $IsSignExist->footer = $input['footer'];
                            $IsSignExist->save();
                            return response()->json(['status' => true, 'message' => 'Data uploaded successfully', "url" => Storage::disk('s3')->url($filePath)], 200);
                        } else {
                            Log::info(['new' => $IsSignExist]);
                            $sign->user_map_id = $id;
                            $sign->sign_image_name = $FileName;
                            $sign->sign_url = Storage::disk('s3')->url($filePath);
                            // $sign->header = $input['header'];
                            // $sign->footer = $input['footer'];
                            $save = $sign->save();
                            Log::info(['signuture saved' => $save]);
                            return response()->json(['status' => true, 'message' => 'Data uploaded successfully', "url" => Storage::disk('s3')->url($filePath)], 200);
                        }
                    } else {
                        return response()->json(['status' => false, 'message' => 'Failed to upload Signature Image.'], 400);
                    }
                }
            } else {
                return response()->json(['status' => false, 'message' => 'Doctor not found'], 400);
            }
        } catch (\Throwable $th) {
            Log::error(['error' => $th]);
            return response()->json(['status' => false, 'message' => 'Internal server error'], 500);
        }
    }

    public function getUploadedSign($id)
    {
        try {
            Log::info("getuploadsign");
            $doctorUserMap = DB::table('docexa_medical_establishments_medical_user_map')->where('id', $id)->first()->medical_user_id;
            $doctorData = Doctor::where('pharmaclient_id', $doctorUserMap)->first();
            if ($doctorData) {
                $sign = DoctorPrecriptionData::where('user_map_id', $id)->first();
                return response()->json(['status' => true, 'message' => 'Data retrived', 'data' => json_decode($sign)], 200);
            } else {
                return response()->json(['status' => true, 'message' => "Doctor not found with this user map id"], 400);
            }
        } catch (\Throwable $th) {
            Log::error(['error' => $th]);
            return response()->json(['status' => false, 'message' => 'Internal server error'], 500);
        }
    }

    public function UploadRecord($id, $patientId, Request $request)
    {
        try {
            Log::info("Upload record");
            $req = $request->all();
            $doctorUserMap = DB::table('docexa_medical_establishments_medical_user_map')->where('id', $id)->first()->medical_user_id;
            $doctorData = Doctor::where('pharmaclient_id', $doctorUserMap)->first();
            if ($doctorData) {
                $patientExist = Patientmaster::where('patient_id', $patientId)->first();
                if ($patientExist) {
                    $file = $request->hasFile('upload_file');
                    if ($file) {
                        $file = $request->file('upload_file');
                        $FileName = $file->getClientOriginalName();

                        $extension = pathinfo($FileName, PATHINFO_EXTENSION);

                        $customFileName = $patientId . '-rx-' . Carbon::now()->timestamp . '.' . $extension;
                        $filePath = 'records/' . $customFileName;

                        $fileSaved = Storage::disk('s3')->put($filePath, file_get_contents($file));
                        if ($fileSaved) {
                            $rx = new RecordPrescriptionEmr();
                            $rx->patient_id = $patientId;
                            $rx->user_map_id = $id;
                            $rx->notes = $req['notes'];
                            $rx->patient_id = $patientId;
                            $rx->upload_file_name = $customFileName;
                            $rx->upload_file = Storage::disk('s3')->url($filePath);
                            $save = $rx->save();
                            if ($save) {
                                $res = $rx->getRecordPrescriptionList($id, $patientId);
                                $filepathSaved = Storage::disk('s3')->url($filePath);
                                return response()->json(['status' => true, 'message' => "records records uploaded successfully", "data" => $res, 'file' => $filepathSaved], 200);
                            }
                        }
                        return response()->json(["status" => false, 'code' => 500, 'message' => "Somthing went wrong try again"], 500);
                    }
                } else {
                    return response()->json(['status' => false, 'message' => 'Patient with this id not found'], 400);
                }
            } else {
                return response()->json(['status' => false, 'message' => 'Doctor with this id not found'], 400);
            }
        } catch (\Throwable $th) {
            Log::error(['error' => $th]);
            return response()->json(['status' => false, 'message' => 'Internal server error'], 500);
        }
    }
    public function getrecord($id, $patientId)
    {
        try {
            $doctorUserMap = DB::table('docexa_medical_establishments_medical_user_map')->where('id', $id)->first()->medical_user_id;
            $doctorData = Doctor::where('pharmaclient_id', $doctorUserMap)->first();
            if ($doctorData) {
                $patientExist = Patientmaster::where('patient_id', $patientId)->first();
                if ($patientExist) {
                    $rx = new RecordPrescriptionEmr();
                    $data = $rx->getRecordPrescriptionList($id, $patientId);
                    return response()->json(['status' => true, 'message' => 'Data retrived', 'data' => $data], 200);
                } else {
                    return response()->json(['status' => false, 'message' => 'Patient not found with this id'], 400);
                }
            } else {
                return response()->json(['status' => false, 'message' => 'Doctor with this id not found'], 400);
            }
        } catch (\Throwable $th) {
            Log::error(['error' => $th]);
            return response()->json(['status' => false, 'message' => 'Internal server error'], 500);
        }
    }


    public function savePrescriptionTos3($id, $patientId, Request $request)
    {
        try {
            Log::info("Upload record");
            $req = $request->all();
            $doctorUserMap = DB::table('docexa_medical_establishments_medical_user_map')->where('id', $id)->first()->medical_user_id;
            $doctorData = Doctor::where('pharmaclient_id', $doctorUserMap)->first();
            if ($doctorData) {
                $patientExist = Patientmaster::where('patient_id', $patientId)->first();
                if ($patientExist) {
                    $file = $request->hasFile('upload_file');
                    if ($file) {
                        $file = $request->file('upload_file');
                        $FileName = $file->getClientOriginalName();

                        $extension = pathinfo($FileName, PATHINFO_EXTENSION);

                        $customFileName = $patientId . '-rx-' . Carbon::now()->timestamp . '.' . $extension;
                        $filePath = 'records/' . $customFileName;
                        Log::info(['filePath', $filePath]);

                        $connectionString = $_ENV['AZURE_STORAGE_CONNECTION_STRING'];
                        $containerName = '';

                        $blobClient = BlobRestProxy::createBlobService($connectionString);

                        $content = fopen($file->getRealPath(), 'r');
                        $blobClient->createBlockBlob($containerName, $filePath, $content);

                        $uploadedFileUrl = "https://docexa.blob.core.windows.net/{$filePath}";

                        if ($uploadedFileUrl) {
                            $filepathSaved = $uploadedFileUrl;
                            return response()->json(['status' => true, 'message' => "records records uploaded successfully", 'file' => $uploadedFileUrl], 200);
                        }
                        return response()->json(["status" => false, 'code' => 500, 'message' => "Somthing went wrong try again"], 500);
                    }
                } else {
                    return response()->json(['status' => false, 'message' => 'Patient with this id not found'], 400);
                }
            } else {
                return response()->json(['status' => false, 'message' => 'Doctor with this id not found'], 400);
            }
        } catch (\Throwable $th) {
            Log::error(['error' => $th]);
            return response()->json(['status' => false, 'message' => 'Internal server error', 'error' => $th->getMessage()], 500);
        }
    }

    public function getTodaysApppointments(Request $request)
    {
        try {
            $input = $request->all();
            $doctorUserMap = DB::table('docexa_medical_establishments_medical_user_map')->where('id', $input['user_map_id'])->first()->medical_user_id;
            $doctorData = Doctor::where('pharmaclient_id', $doctorUserMap)->first();
            if ($doctorData) {
                $res = new AppointmentDetails();
                $data = $res->getTodaysAppointment($request);

                if (count($data) > 0) {
                    return response()->json(['status' => true, 'message' => 'Data fetched successfully', 'data' => $data], 200);
                } else {
                    return response()->json(['status' => false, 'message' => 'Data not found', 'data' => []], 200);
                }
            } else {
                return response()->json(['status' => false, 'message' => 'Doctor not found with this Id'], 401);
            }
        } catch (\Throwable $th) {
            Log::error(['error' => $th]);
            return response()->json(['status' => false, 'errorMessage' => $th->getMessage(), 'message' => 'Internal server error'], 500);
        }
    }
    public function getTodaysApppointmentsv2(Request $request)
    {
        try {
            $input = $request->all();
            $doctorUserMap = DB::table('docexa_medical_establishments_medical_user_map')->where('id', $input['user_map_id'])->first()->medical_user_id;
            $doctorData = Doctor::where('pharmaclient_id', $doctorUserMap)->first();
            if ($doctorData) {
                $res = new AppointmentDetails();
                $data = $res->getTodaysAppointmentv2($request);

                if (count($data) > 0) {
                    return response()->json(['status' => true, 'message' => 'Data fetched successfully', 'data' => $data], 200);
                } else {
                    return response()->json(['status' => false, 'message' => 'Data not found', 'data' => []], 200);
                }
            } else {
                return response()->json(['status' => false, 'message' => 'Doctor not found with this Id'], 401);
            }
        } catch (\Throwable $th) {

            Log::error(['error' => $th]);
            return response()->json(['status' => false, "errorMessage" => $th->getMessage(), 'message' => 'Internal server error'], 500);
            return response()->json(['status' => false, 'errorMessage' => $th->getMessage(), 'message' => 'Internal server error'], 500);
        }
    }



    public function PrescriptionViewv1($id, $patientId, $booking_id)
    {
        try {
            $patientData = Patientmaster::where('patient_id', $patientId)->first();
            if ($patientData) {
                $pres = new PrescriptionData();
                $data = $pres->getViewOfPrescription($id, $patientId, $booking_id);
                Log::info(['data' => $data]);
                $dataForPatient = [];
                Log::info(['patient_data' => $patientData]);
                if ($data) {
                    $dataForPatient = [
                        'patient_name' => $patientData->patient_name ? $patientData->patient_name : '',
                        'mobile_no' => $patientData->mobile_no ? $patientData->mobile_no : '',
                        'age' => $patientData->age ? $patientData->age : '',
                        'gender' => $patientData->gender ? (1 ? "Male" : (2 ? "Female" : "Other")) : ""
                    ];
                    Log::info(['data for patient' => $dataForPatient]);

                    $dataOfDoctor = [];
                    $doctorUserMap = DB::table('docexa_medical_establishments_medical_user_map')->where('id', $id)->first()->medical_user_id;
                    $doctorData = Doctor::where('pharmaclient_id', $doctorUserMap)->first();
                    Log::info(['doctor dataa' => $doctorData]);
                    $spe = [];
                    $qualification = '';

                    $signurldata = DoctorPrecriptionData::where('user_map_id', $id)->first();
                    $signuture = '';
                    if ($signurldata) {
                        $signuture = $signurldata->sign_url;
                    }

                    Log::info(['signitureeee' => $signuture]);

                    if ($doctorData) {
                        $specialities = DB::table('docexa_doctor_specialization')->where('pharmaclient_id', $doctorData->pharmaclient_id)->get();
                        $qualification = $doctorData->qualification;
                        if (count($specialities) > 0) {
                            foreach ($specialities as $speciality) {
                                $spe[] = $speciality->specialization ? $speciality->specialization : 0;
                            }
                        }


                        $clinicName = DB::table('docexa_clinic_user_map')->where('user_map_id', $id)->first()->clinic_name;

                        $dataOfDoctor = [
                            'pharmaclient_name' => ($doctorData->pharmaclient_name || $doctorData->last_name) ? $doctorData->pharmaclient_name . " " . $doctorData->last_name : '',
                            'mobile_no' => $doctorData->mobile_no ? $doctorData->mobile_no : '',
                            'specialization' => $spe,
                            'qualification' => $qualification,
                            'sign' => $signuture ? $signuture : '',
                            'clinic_name' => $clinicName

                        ];
                    }
                    Log::info(['data for doctor' => $dataOfDoctor]);
                    // dd($dataOfDoctor);
                    $patinetDataForRx = [];

                    $vitalsData = DB::table('docexa_vital_record')->where('prescription_id', $data->id)->get();
                    Log::info(['vital dataa' => $vitalsData]);
                    $vitals = [];

                    if (count($vitalsData) > 0) {
                        foreach ($vitalsData as $vital) {
                            $vitals[] = [
                                'vitalname' => $vital->vital_name ? $vital->vital_name : '',
                                'value' => $vital->value ? $vital->value : ''
                            ];
                        }
                    }

                    $drugsData = PrescriptionItems::where('prescription_id', $data->id)->get();
                    Log::info(['data of drugs' => $drugsData]);
                    $dataForDrugs = [];

                    if ($drugsData) {
                        foreach ($drugsData as $drugdata) {
                            $medicationItemName = Medication::where('id', $drugdata->medication_id)->first()->medication_name;
                            $dataForDrugs[] = [
                                'medication' => $medicationItemName . " " . $drugdata->timing . " " . $drugdata->duration . " " . $drugdata->doses,
                                'name' => $medicationItemName,
                                'timing' => $drugdata->timing,
                                'duration' => $drugdata->duration ? $drugdata->duration . "days" : '',
                                'doses' => $drugdata->doses,
                            ];
                        }
                    }
                    $diagnosis = [];
                    // $decodedJson = json_decode($data->diagnosis_row, true);

                    $diagnosisRow = json_decode($data->diagnosis_row, true);
                    // $diagnosisRow = json_decode($diagnosisRow,true);


                    Log::info(['diagnosticroww' => $diagnosisRow]);
                    foreach ($diagnosisRow as $diagnosisData) {
                        Log::info(['dddd' => $diagnosisData['data']['Diagnosis_days']]);
                        $diagnosis[] = [
                            'name' => $diagnosisData['name'] ? $diagnosisData['name'] : '',
                            'diagnosis_days' => isset($diagnosisData['name']) ? $diagnosisData['data']['Diagnosis_days'] . " " . (isset($diagnosisData['data']['Diagnosis_duration']) ? $diagnosisData['data']['Diagnosis_duration'] : '') : ''
                        ];
                    }
                    $symptoms = [];
                    $symptomsRow = json_decode($data->complaints_row, true);
                    // $symptomsRow = json_decode($symptomsRow,true);
                    Log::info(['symptomsss' => $symptomsRow]);
                    foreach ($symptomsRow as $symptomsData) {
                        $symptoms[] = [
                            'name' => $symptomsData['name'] ? $symptomsData['name'] : '',
                            'symptoms_days' => isset($symptomsData['data']['Symptoms_days']) ? ($symptomsData['data']['Symptoms_days'] . " " . (isset($symptomsData['data']['Symptoms_duration']) ? $symptomsData['data']['Symptoms_duration'] : '')) : '',
                            'severity' => isset($symptomsData['data']['severity']) ? $symptomsData['data']['severity'] : '',
                        ];
                    }

                    $advices = [];
                    $adviceArray = explode(", ", $data->advice);
                    foreach ($adviceArray as $advice) {
                        $advices[] = $advice;
                    }

                    $investigations = [];
                    $investigationArray = explode(", ", $data->test_requested);

                    foreach ($investigationArray as $investigation) {
                        $investigations[] = $investigation;
                    }

                    $doctorHandle = DB::table('docexa_medical_establishments_medical_user_map')->where('id', $id)->first()->handle;
                    $url = $_ENV['APP_HANDLE'] . $doctorHandle . '/patient_mobile' . '/' . $patientData->mobile_no;

                    $QrCodeOfFollow = QrCode::generate($url);
                    $svgBase64 = base64_encode($QrCodeOfFollow);

                    Log::info(['qr' => $QrCodeOfFollow, 'qrcodeurl' => $url]);


                    $patinetDataForRx = [
                        'follow_up' => $data->follow_up,
                        'test_requested' => $investigations,
                        'advice' => $advices,
                        'diagnosis' => $diagnosis,
                        'date' => date("d-m-Y", strtotime($data->date)),
                        'symptoms' => $symptoms,
                        'vitals' => $vitals,
                        'dataForDrugs' => $dataForDrugs,
                        'medical_history' => json_decode($data->medical_history),
                        'lifestyle' => $data->lifestyle,
                        'qr' => $svgBase64

                    ];

                    $prescriptionData = [
                        'patient' => $dataForPatient,
                        'doctor' => $dataOfDoctor,
                        'rx' => $patinetDataForRx,
                    ];

                    // dd($prescriptionData);
                    $PrescriptionLayout = PrescriptionLayout::where('user_map_id', $id)->first();


                    if ($PrescriptionLayout) {
                        $dynamicCss = $PrescriptionLayout;
                    } else {
                        $dynamicCss = [
                            "language" => "english",
                            "font_family" => "Arial",
                            "font_size" => "12",
                            "footer_alignment" => "right",
                            "prescription_template" => "double",
                            "medicine_template" => "single",
                            "investigation_template" => "dfg",
                            "letter_head" => true,
                            "signuture" => true,
                            "top_margin" => "1",
                            "bottom_margin" => "1",
                            "left_margin" => "1",
                            "right_margin" => "1"
                        ];
                    }
                    //  id, user_map_id, font_family, font_size, footer_alignment, prescription_template, medicine_template, investigation_template, letter_head, signuture, top_margin, bottom_margin, left_margin, right_margin, language, created_at, updated_at
                    //  return view('prescriptionViewV3', [ 'data' => $prescriptionData,
                    //  'css' =>$dynamicCss
                    //  ])->render();

                    // return View::make('prescriptionViewV3', ['data' => $prescriptionData,                    'css' => $dynamicCss
                    //   ])->render();

                    $html = view('prescriptionViewV3', [
                        'data' => $prescriptionData,
                        'css' => $dynamicCss
                    ])->render();


                    Log::info(['dataaa' => $html]);

                    $cssPath = '/var/www/html/STAGINGDOCEXA/docexa/public/css/prescriptionpreview.css';

                    // $dompdf = new Mpdf();

                    $stylesheet = file_get_contents($cssPath);

                    // $dompdf->WriteHTML($stylesheet, 1);
                    // $dompdf->WriteHTML($html, 2);
                    // $dompdf->Output('Prescription.pdf', 'D'); 


                    $dompdf = new Dompdf();
                    $dompdf->loadHtml($html);

                    $dompdf->set_option('isHtml5ParserEnabled', true);
                    $dompdf->set_option('isRemoteEnabled', true);

                    $dompdf->render();
                    $dompdf->stream('Prescription.pdf', array('Attachment' => true));
                } else {
                    return response()->json(['status' => false, 'messsage' => 'Prescription data not found'], 400);
                }
            } else {
                return response()->json(['status' => false, 'messsage' => 'Patient not found'], 400);
            }
        } catch (\Throwable $th) {
            Log::info(["error" => $th]);
            return response()->json(['status' => false, 'message' => "Internal server error"], 500);
        }
    }

    public function scheduleAppointmentv9(Request $request)
    {

        Log::info(['scheduleAppointment' => $request]);
        $res = new AppointmentDetails();
        $data = $res->scheduleappointmentv9($request);
        Log::info([$data]);
        return response()->json(['status' => 'success', 'data' => $data], 200);
    }
    public function PrescriptionViewv2($id, $patientId, $booking_id)
    {
        try {
            $patientData = Patientmaster::where('patient_id', $patientId)->first();
            if ($patientData) {
                $pres = new PrescriptionData();
                $data = $pres->getViewOfPrescription($id, $patientId, $booking_id);
                Log::info(['data' => $data]);
                $dataForPatient = [];
                Log::info(['patient_data' => $patientData]);

                if ($data) {
                    $dataForPatient = [
                        'patient_name' => $patientData->patient_name ? $patientData->patient_name : '',
                        'mobile_no' => $patientData->mobile_no ? $patientData->mobile_no : '',
                        'age' => $patientData->age ? $patientData->age : '',
                        'gender' => $patientData->gender == 1 ? "Male" : ($patientData->gender == 2 ? "Female" : "Other")
                    ];
                    Log::info(['data for patient' => $dataForPatient]);

                    $dataOfDoctor = [];
                    $doctorUserMap = DB::table('docexa_medical_establishments_medical_user_map')->where('id', $id)->first()->medical_user_id;
                    $doctorData = Doctor::where('pharmaclient_id', $doctorUserMap)->first();
                    Log::info(['doctor dataa' => $doctorData]);
                    $spe = [];
                    $qualification = '';

                    $signurldata = DoctorPrecriptionData::where('user_map_id', $id)->first();
                    $signuture = '';
                    if ($signurldata) {
                        $signuture = $signurldata->sign_url;
                    }

                    Log::info(['signitureeee' => $signuture]);

                    if ($doctorData) {
                        $specialities = DB::table('docexa_doctor_specialization')->where('pharmaclient_id', $doctorData->pharmaclient_id)->get();
                        $qualification = $doctorData->qualification;
                        if (count($specialities) > 0) {
                            foreach ($specialities as $speciality) {
                                $spe[] = $speciality->specialization ? $speciality->specialization : 0;
                            }
                        }


                        $clinicName = DB::table('docexa_clinic_user_map')->where('user_map_id', $id)->first()->clinic_name;

                        $LetterHeadForDoctor = Db::table('docexa_doctor_precription_data')->where('user_map_id', $id)->first()->header;


                        $dataOfDoctor = [
                            'pharmaclient_name' => ($doctorData->pharmaclient_name || $doctorData->last_name) ? $doctorData->pharmaclient_name . " " . $doctorData->last_name : '',
                            'mobile_no' => $doctorData->mobile_no ? $doctorData->mobile_no : '',
                            'specialization' => $spe,
                            'qualification' => $qualification,
                            'sign' => $signuture ? $signuture : '',
                            'clinic_name' => $clinicName,
                            'letterhead' => $LetterHeadForDoctor

                        ];
                    }
                    Log::info(['data for doctor' => $dataOfDoctor]);
                    // dd($dataOfDoctor);
                    $patinetDataForRx = [];

                    $vitalsData = DB::table('docexa_vital_record')->where('prescription_id', $data->id)->get();
                    Log::info(['vital dataa' => $vitalsData]);
                    $vitals = [];

                    if (count($vitalsData) > 0) {
                        foreach ($vitalsData as $vital) {
                            $vitals[] = [
                                'vitalname' => $vital->vital_name ? $vital->vital_name : '',
                                'value' => $vital->value ? $vital->value : ''
                            ];
                        }
                    }

                    $drugsData = PrescriptionItems::where('prescription_id', $data->id)->get();
                    Log::info(['data of drugs' => $drugsData]);
                    $dataForDrugs = [];

                    // dd($drugsData);
                    if ($drugsData) {
                        foreach ($drugsData as $drugdata) {
                            $medicationItemName = Medication::where('id', $drugdata->medication_id)->first()->medication_name;
                            $dataForDrugs[] = [
                                'medication' => $medicationItemName . " " . $drugdata->timing . " " . $drugdata->duration . " " . $drugdata->doses,
                                'name' => $medicationItemName,
                                'timing' => $drugdata->timing,
                                'duration' => $drugdata->duration ? $drugdata->duration . "days" : '',
                                'doses' => $drugdata->doses ? $drugdata->doses : null,
                            ];
                        }
                    }
                    // dd($dataForDrugs);
                    $diagnosis = [];
                    // $decodedJson = json_decode($data->diagnosis_row, true);

                    $diagnosisRow = json_decode($data->diagnosis_row, true);
                    // $diagnosisRow = json_decode($diagnosisRow,true);


                    Log::info(['diagnosticroww' => $diagnosisRow]);
                    foreach ($diagnosisRow as $diagnosisData) {
                        Log::info(['dddd' => $diagnosisData['data']['Diagnosis_days']]);
                        $diagnosis[] = [
                            'name' => $diagnosisData['name'] ? $diagnosisData['name'] : '',
                            'diagnosis_days' => isset($diagnosisData['name']) ? $diagnosisData['data']['Diagnosis_days'] . " " . (isset($diagnosisData['data']['Diagnosis_duration']) ? $diagnosisData['data']['Diagnosis_duration'] : '') : ''
                        ];
                    }
                    $symptoms = [];
                    $symptomsRow = json_decode($data->complaints_row, true);
                    // $symptomsRow = json_decode($symptomsRow,true);
                    Log::info(['symptomsss' => $symptomsRow]);
                    foreach ($symptomsRow as $symptomsData) {
                        $symptoms[] = [
                            'name' => $symptomsData['name'] ? $symptomsData['name'] : '',
                            'symptoms_days' => isset($symptomsData['data']['Symptoms_days']) ? ($symptomsData['data']['Symptoms_days'] . " " . (isset($symptomsData['data']['Symptoms_duration']) ? $symptomsData['data']['Symptoms_duration'] : '')) : '',
                            'severity' => isset($symptomsData['data']['severity']) ? $symptomsData['data']['severity'] : '',
                        ];
                    }

                    $advices = [];
                    $adviceArray = explode(", ", $data->advice);
                    foreach ($adviceArray as $advice) {
                        $advices[] = $advice;
                    }

                    $investigations = [];
                    $investigationArray = explode(", ", $data->test_requested);

                    foreach ($investigationArray as $investigation) {
                        $investigations[] = $investigation;
                    }

                    $doctorHandle = DB::table('docexa_medical_establishments_medical_user_map')->where('id', $id)->first()->handle;
                    $url = $_ENV['APP_HANDLE'] . $doctorHandle . '/patient_mobile' . '/' . $patientData->mobile_no;

                    $QrCodeOfFollow = QrCode::generate($url);
                    $svgBase64 = base64_encode($QrCodeOfFollow);

                    Log::info(['qr' => $QrCodeOfFollow, 'qrcodeurl' => $url]);


                    $patinetDataForRx = [
                        'follow_up' => $data->follow_up,
                        'test_requested' => $investigations,
                        'advice' => $advices,
                        'diagnosis' => $diagnosis,
                        'date' => date("d-m-Y", strtotime($data->date)),
                        'symptoms' => $symptoms,
                        'vitals' => $vitals,
                        'dataForDrugs' => $dataForDrugs,
                        'medical_history' => $data->medical_history,
                        'lifestyle' => $data->lifestyle,
                        'qr' => $svgBase64

                    ];

                    $prescriptionData = [
                        'patient' => $dataForPatient,
                        'doctor' => $dataOfDoctor,
                        'rx' => $patinetDataForRx,
                    ];
                    Log::info(['pessssssssssssscriptiondata', $prescriptionData]);

                    // dd($prescriptionData);
                    $PrescriptionLayout = PrescriptionLayout::where('user_map_id', $id)->first();


                    if ($PrescriptionLayout) {
                        $dynamicCss = $PrescriptionLayout;
                    } else {
                        $dynamicCss = [
                            "language" => "english",
                            "font_family" => "Arial",
                            "font_size" => "12",
                            "footer_alignment" => "right",
                            "prescription_template" => "double",
                            "medicine_template" => "single",
                            "investigation_template" => "dfg",
                            "letter_head" => true,
                            "signuture" => true,
                            "top_margin" => "1",
                            "bottom_margin" => "1",
                            "left_margin" => "1",
                            "right_margin" => "1"
                        ];
                    }
                    //  id, user_map_id, font_family, font_size, footer_alignment, prescription_template, medicine_template, investigation_template, letter_head, signuture, top_margin, bottom_margin, left_margin, right_margin, language, created_at, updated_at
                    //  return view('prescriptionViewV3', [ 'data' => $prescriptionData,
                    //  'css' =>$dynamicCss
                    //  ])->render();

                    // return View::make('prescriptionViewV3', ['data' => $prescriptionData,                    'css' => $dynamicCss
                    //   ])->render();

                    $html = view('prescriptionViewV3', [
                        'data' => $prescriptionData,
                        'css' => $dynamicCss
                    ])->render();


                    Log::info(['dataaa' => $html]);

                    $cssPath = '/var/www/html/STAGINGDOCEXA/docexa/public/css/prescriptionpreview.css';

                    // $dompdf = new Mpdf();

                    $stylesheet = file_get_contents($cssPath);

                    // $dompdf->WriteHTML($stylesheet, 1);
                    // $dompdf->WriteHTML($html, 2);
                    // $dompdf->Output('Prescription.pdf', 'D'); 


                    $dompdf = new Dompdf();
                    $dompdf->loadHtml($html);

                    $dompdf->set_option('isHtml5ParserEnabled', true);
                    $dompdf->set_option('isRemoteEnabled', true);

                    $dompdf->render();
                    $dompdf->stream('Prescription.pdf', array('Attachment' => true));
                } else {
                    return response()->json(['status' => false, 'messsage' => 'Prescription data not found'], 400);
                }
            } else {
                return response()->json(['status' => false, 'messsage' => 'Patient not found'], 400);
            }
        } catch (\Throwable $th) {
            Log::info(["error" => $th]);
            return response()->json(['status' => false, 'message' => "Internal server error"], 500);
        }
    }

    public function PrescriptionViewv3($id, $patientId, $booking_id)
    {
        try {
            $patientData = Patientmaster::where('patient_id', $patientId)->first();
            if ($patientData) {
                $pres = new PrescriptionData();
                $data = $pres->getViewOfPrescription($id, $patientId, $booking_id);
                Log::info(['data' => $data]);
                $dataForPatient = [];
                Log::info(['patient_data' => $patientData]);

                if ($data) {
                    $dataForPatient = [
                        'patient_name' => $patientData->patient_name ? $patientData->patient_name : '',
                        'mobile_no' => $patientData->mobile_no ? $patientData->mobile_no : '',
                        'age' => $patientData->age ? $patientData->age : '',
                        'gender' => $patientData->gender == 1 ? "Male" : ($patientData->gender == 2 ? "Female" : "Other")
                    ];
                    Log::info(['data for patient' => $dataForPatient]);

                    $dataOfDoctor = [];
                    $doctorUserMap = DB::table('docexa_medical_establishments_medical_user_map')->where('id', $id)->first()->medical_user_id;
                    $doctorData = Doctor::where('pharmaclient_id', $doctorUserMap)->first();
                    Log::info(['doctor dataa' => $doctorData]);
                    $spe = [];
                    $qualification = '';

                    $signurldata = DoctorPrecriptionData::where('user_map_id', $id)->first();
                    $signuture = '';
                    if ($signurldata) {
                        $signuture = $signurldata->sign_url;
                    }

                    Log::info(['signitureeee' => $signuture]);

                    if ($doctorData) {
                        $specialities = DB::table('docexa_doctor_specialization')->where('pharmaclient_id', $doctorData->pharmaclient_id)->get();
                        $qualification = $doctorData->qualification;
                        if (count($specialities) > 0) {
                            foreach ($specialities as $speciality) {
                                $spe[] = $speciality->specialization ? $speciality->specialization : 0;
                            }
                        }


                        $clinicName = DB::table('docexa_clinic_user_map')->where('user_map_id', $id)->first()->clinic_name;

                        $LetterHeadForDoctor = Db::table('docexa_doctor_precription_data')->where('user_map_id', $id)->first()->header;


                        $dataOfDoctor = [
                            'pharmaclient_name' => ($doctorData->pharmaclient_name || $doctorData->last_name) ? $doctorData->pharmaclient_name . " " . $doctorData->last_name : '',
                            'mobile_no' => $doctorData->mobile_no ? $doctorData->mobile_no : '',
                            'specialization' => $spe,
                            'qualification' => $qualification,
                            'sign' => $signuture ? $signuture : '',
                            'clinic_name' => $clinicName,
                            'letterhead' => $LetterHeadForDoctor

                        ];
                    }
                    Log::info(['data for doctor' => $dataOfDoctor]);
                    // dd($dataOfDoctor);
                    $patinetDataForRx = [];

                    $vitalsData = DB::table('docexa_vital_record')->where('prescription_id', $data->id)->get();
                    Log::info(['vital dataa' => $vitalsData]);
                    $vitals = [];

                    if (count($vitalsData) > 0) {
                        foreach ($vitalsData as $vital) {
                            $vitals[] = [
                                'vitalname' => $vital->vital_name ? $vital->vital_name : '',
                                'value' => $vital->value ? $vital->value : ''
                            ];
                        }
                    }

                    $drugsData = PrescriptionItems::where('prescription_id', $data->id)->get();
                    Log::info(['data of drugs' => $drugsData]);
                    $dataForDrugs = [];

                    if ($drugsData) {
                        foreach ($drugsData as $drugdata) {
                            $medicationItemName = Medication::where('id', $drugdata->medication_id)->first()->medication_name;
                            $dataForDrugs[] = [
                                'medication' => $medicationItemName . " " . $drugdata->timing . " " . $drugdata->duration . " " . $drugdata->doses,
                                'name' => $medicationItemName,
                                'timing' => $drugdata->timing,
                                'duration' => $drugdata->duration ? $drugdata->duration . "days" : '',
                                'doses' => $drugdata->doses,
                            ];
                        }
                    }
                    $diagnosis = [];
                    // $decodedJson = json_decode($data->diagnosis_row, true);

                    $diagnosisRow = json_decode($data->diagnosis_row, true);
                    // $diagnosisRow = json_decode($diagnosisRow,true);


                    Log::info(['diagnosticroww' => $diagnosisRow]);
                    foreach ($diagnosisRow as $diagnosisData) {
                        Log::info(['dddd' => $diagnosisData['data']['Diagnosis_days']]);
                        $diagnosis[] = [
                            'name' => $diagnosisData['name'] ? $diagnosisData['name'] : '',
                            'diagnosis_days' => isset($diagnosisData['name']) ? $diagnosisData['data']['Diagnosis_days'] . " " . (isset($diagnosisData['data']['Diagnosis_duration']) ? $diagnosisData['data']['Diagnosis_duration'] : '') : ''
                        ];
                    }
                    $symptoms = [];
                    $symptomsRow = json_decode($data->complaints_row, true);
                    // $symptomsRow = json_decode($symptomsRow,true);
                    Log::info(['symptomsss' => $symptomsRow]);
                    foreach ($symptomsRow as $symptomsData) {
                        $symptoms[] = [
                            'name' => $symptomsData['name'] ? $symptomsData['name'] : '',
                            'symptoms_days' => isset($symptomsData['data']['Symptoms_days']) ? ($symptomsData['data']['Symptoms_days'] . " " . (isset($symptomsData['data']['Symptoms_duration']) ? $symptomsData['data']['Symptoms_duration'] : '')) : '',
                            'severity' => isset($symptomsData['data']['severity']) ? $symptomsData['data']['severity'] : '',
                        ];
                    }

                    $advices = [];
                    $adviceArray = explode(", ", $data->advice);
                    foreach ($adviceArray as $advice) {
                        $advices[] = $advice;
                    }

                    $investigations = [];
                    $investigationArray = explode(", ", $data->test_requested);

                    foreach ($investigationArray as $investigation) {
                        $investigations[] = $investigation;
                    }

                    $doctorHandle = DB::table('docexa_medical_establishments_medical_user_map')->where('id', $id)->first()->handle;
                    $url = $_ENV['APP_HANDLE'] . $doctorHandle . '/patient_mobile' . '/' . $patientData->mobile_no;

                    $QrCodeOfFollow = QrCode::generate($url);
                    $svgBase64 = base64_encode($QrCodeOfFollow);

                    Log::info(['qr' => $QrCodeOfFollow, 'qrcodeurl' => $url]);


                    $patinetDataForRx = [
                        'follow_up' => $data->follow_up,
                        'test_requested' => $investigations,
                        'advice' => $advices,
                        'diagnosis' => $diagnosis,
                        'date' => date("d-m-Y", strtotime($data->date)),
                        'symptoms' => $symptoms,
                        'vitals' => $vitals,
                        'dataForDrugs' => $dataForDrugs,
                        'medical_history' => $data->medical_history,
                        'lifestyle' => $data->lifestyle,
                        'qr' => $svgBase64

                    ];

                    $prescriptionData = [
                        'patient' => $dataForPatient,
                        'doctor' => $dataOfDoctor,
                        'rx' => $patinetDataForRx,
                    ];
                    Log::info(['pessssssssssssscriptiondata', $prescriptionData]);

                    // dd($prescriptionData);
                    $PrescriptionLayout = PrescriptionLayout::where('user_map_id', $id)->first();


                    if ($PrescriptionLayout) {
                        $dynamicCss = $PrescriptionLayout;
                    } else {
                        $dynamicCss = [
                            "language" => "english",
                            "font_family" => "Arial",
                            "font_size" => "12",
                            "footer_alignment" => "right",
                            "prescription_template" => "double",
                            "medicine_template" => "single",
                            "investigation_template" => "dfg",
                            "letter_head" => true,
                            "signuture" => true,
                            "top_margin" => "1",
                            "bottom_margin" => "1",
                            "left_margin" => "1",
                            "right_margin" => "1"
                        ];
                    }
                    //  id, user_map_id, font_family, font_size, footer_alignment, prescription_template, medicine_template, investigation_template, letter_head, signuture, top_margin, bottom_margin, left_margin, right_margin, language, created_at, updated_at
                    //  return view('prescriptionViewV3', [ 'data' => $prescriptionData,
                    //  'css' =>$dynamicCss
                    //  ])->render();

                    //  return View::make('prescriptionViewV3', ['data' => $prescriptionData,                    'css' => $dynamicCss
                    //   ])->render();

                    $html = view('prescriptionViewV3', [
                        'data' => $prescriptionData,
                        'css' => $dynamicCss
                    ])->render();


                    Log::info(['dataaa' => $html]);

                    $cssPath = '/var/www/html/STAGINGDOCEXA/docexa/public/css/prescriptionpreview.css';

                    // $dompdf = new Mpdf();

                    $stylesheet = file_get_contents($cssPath);

                    // $dompdf->WriteHTML($stylesheet, 1);
                    // $dompdf->WriteHTML($html, 2);
                    // $dompdf->Output('Prescription.pdf', 'D'); 


                    $dompdf = new Dompdf();
                    $dompdf->loadHtml($html);

                    $dompdf->set_option('isHtml5ParserEnabled', true);
                    $dompdf->set_option('isRemoteEnabled', true);

                    $dompdf->render();
                    $dompdf->stream('Prescription.pdf', array('Attachment' => true));
                } else {
                    return response()->json(['status' => false, 'messsage' => 'Prescription data not found'], 400);
                }
            } else {
                return response()->json(['status' => false, 'messsage' => 'Patient not found'], 400);
            }
        } catch (\Throwable $th) {
            Log::info(["error" => $th]);
            return response()->json(['status' => false, 'message' => "Internal server error"], 500);
        }
    }
    public function addaggrementFlag(Request $request, $esteblishmentUserMapID)
    {
        try {
            $input = $request->all();
            $agree = Clinic::where('user_map_id', $esteblishmentUserMapID)->first();

            if ($agree) {
                $agree->is_aggrement = $input['is_aggrement'];
                $save = $agree->save();
            } else {
                $agree = new Clinic();
                $agree->is_aggrement = $input['is_aggrement'];
                $agree->user_map_id = $esteblishmentUserMapID;
                $save = $agree->save();
            }

            if ($save) {
                return response()->json(['status' => true, 'message' => "Flag updated successfully", 'code' => 200], 200);
            } else {
                return response()->json(['status' => false, 'message' => "Something went wrong", 'code' => 400], 400);
            }
        } catch (\Throwable $th) {
            Log::info(["error" => $th]);
            return response()->json(['status' => false, 'message' => "Internal server error"], 500);
        }
    }



    public function getaggrementFlag($esteblishmentUserMapID)
    {
        try {
            // $result = DocexaDoctorAggrement::where('user_map_id', $esteblishmentUserMapID)->get();
            $result = Clinic::select('is_aggrement', 'user_map_id')
                ->where('user_map_id', $esteblishmentUserMapID)
                ->first();
            // $result = Clinic::where('user_map_id', $esteblishmentUserMapID)->first();

            $data = [
                [
                    'is_aggrement' => $result->is_aggrement,
                    'user_map_id' => $result->user_map_id,
                ]
            ];

            if ($result) {
                return response()->json(['status' => true, 'message' => "data retrived successfully", 'code' => 200, 'data' => $data], 200);
            } else {
                return response()->json(['status' => false, 'message' => "something went wrong", 'code' => 400], 400);
            }
        } catch (\Throwable $th) {
            Log::info(["error" => $th]);
            return response()->json(['status' => false, 'message' => "Internal server error"], 500);
        }
    }

    public function getSeenPrescription(Request $request)
    {
        try {
            $input = $request->all();
            $doctorUserMap = DB::table('docexa_medical_establishments_medical_user_map')->where('id', $input['user_map_id'])->first()->medical_user_id;
            $doctorData = Doctor::where('pharmaclient_id', $doctorUserMap)->first();
            if ($doctorData) {
                $res = new Prescription();
                $data = $res->getSeenPrescription($request);
                // dd($data);
                if (count($data) > 0) {
                    return response()->json(['status' => true, 'message' => 'Data fetched successfully', 'data' => $data], 200);
                } else {
                    return response()->json(['status' => false, 'message' => 'Data not found', 'data' => []], 200);
                }
            } else {
                return response()->json(['status' => false, 'message' => 'Doctor not found with this Id'], 401);
            }
        } catch (\Throwable $th) {
            Log::error(['error' => $th]);
            return response()->json(['status' => false, 'message' => 'Internal server error'], 500);
        }
    }


    public function createAppointmentV4(Request $request)
    {
        $res = new AppointmentDetails();

        $data = $res->createappointmentV4($request);
        // return $data;
        return response()->json(['status' => 'success', 'data' => $data], 200);
        // 
    }

    public function getCalendarAppointments(Request $request)
    {
        try {

            // date_default_timezone_set('Asia/Kolkata');

            // var_dump(Carbon::now()->format('Y-m-d H:i:s'));
            // var_dump(date('Y-m-d H:i:s'));
            // var_dump(date_default_timezone_get());

            // die;
            // Optional date range filter
            $startDate = $request->query('start_date'); // e.g., 2025-06-01
            $endDate = $request->query('end_date');
            $doctor_id = $request->query('doctor_id');

            $query = DB::table('docexa_patient_booking_details as booking')
                ->join('docexa_appointment_sku_details', 'booking.booking_id', '=', 'docexa_appointment_sku_details.booking_id')
                ->join('docexa_doctor_master', 'booking.doctor_id', '=', 'docexa_doctor_master.pharmaclient_id')
                ->leftJoin('staff as staff', 'staff.id', '=', 'booking.staff_id')

                ->leftJoin('consult_type_master as consult', 'booking.consult_type_id', '=', 'consult.id')
                ->select(
                    'booking.booking_id',
                    'booking.bookingidmd5',
                    'booking.date',
                    // DB::raw("now()"),
                    DB::raw("CAST(docexa_appointment_sku_details.start_booking_time AS CHAR) AS start_booking_time"),
                    'docexa_appointment_sku_details.end_booking_time',
                    'booking.patient_name',
                    'booking.status',
                    'booking.cancellation_reason',
                    'booking.schedule_remark',
                    'docexa_doctor_master.pharmaclient_name',
                    'booking.doctor_id',
                    'staff.staff_name as staff_name',
                    'booking.patient_id',
                    'consult.name as consult_type',
                    DB::raw("IFNULL(booking.duration, TIMESTAMPDIFF(MINUTE, docexa_appointment_sku_details.start_booking_time, docexa_appointment_sku_details.end_booking_time)) as duration_minutes"),
                    // DB::raw("ELT(FLOOR(1 + (RAND() * 4)), 15, 30, 60, 180) as duration_minutes"),

                )
                ->where('booking.user_map_id', $doctor_id)
                ->orderBy('booking.date')
                ->orderBy('booking.start_time');


            $query->where(DB::raw('date(booking.date)'), $startDate);


            // dd(vsprintf(str_replace('?', "'%s'", $query->toSql()), $query->getBindings()));
            $appointments = $query->get();
            $clinicId = DB::table('docexa_clinic_user_map')->where('user_map_id', $doctor_id)->first()->id ?? null;
            $cosultType = DB::table('consult_type_master')->select('id', 'name')->get();

            return response()->json([
                "success" => true,
                "data" => [
                    'times' => $this->getSlots($doctor_id, $clinicId, $startDate),
                    'consult_types' => $cosultType,
                    'appointments' => $appointments
                ],
            ], 200);
        } catch (\Throwable $th) {
            Log::error(['error' => $th]);
            return response()->json(['status' => false, "errorMessage" => $th->getMessage(), 'message' => 'Internal server error'], 500);
        }
    }
    public function getCalenderAppointmentDetails(Request $request)
    {
        try {

            $input = $request->all();

            $bookingID  = $request->query('booking_id');
            $patientId  = $request->query('patient_id');
            $doctorID   = $request->query('doctor_id');


            // dd($bookingID, $patientId, $doctorID, $userMapID);
            if (!$bookingID || !$patientId || !$doctorID) {
                return response()->json(['status' => false, 'message' => 'Missing required headers'], 400);
            }
            $patientDate = null;
            $patientApi = new PatientApi();
            $response = $patientApi->getPatientById($patientId);
            $data = $response->getData();

            if ($data->status == true) {
                $patientDate = $data->data;
            } else {
                $patientDate = [];
            }
            // dd($patientDate);
            $query = DB::table('docexa_patient_booking_details as booking')
                ->join('docexa_appointment_sku_details', 'booking.booking_id', '=', 'docexa_appointment_sku_details.booking_id')
                ->leftJoin('consult_type_master as consult', 'booking.consult_type_id', '=', 'consult.id')
                ->leftJoin('staff as staff', 'staff.id', '=', 'booking.staff_id')
                ->leftJoin('docexa_appointment_status_master as statusmaster', 'statusmaster.id', '=', 'booking.status')
                ->select(
                    'booking.booking_id',
                    'booking.bookingidmd5',
                    'booking.date',
                    'booking.status',
                    'docexa_appointment_sku_details.start_booking_time',
                    'docexa_appointment_sku_details.end_booking_time',
                    'booking.patient_name',
                    'booking.doctor_id',
                    'booking.partial_services',
                    'consult.name as consult_type',
                    'statusmaster.status_text as status_name',
                    'staff.staff_name as staff_name',
                    DB::raw("IFNULL(booking.duration, TIMESTAMPDIFF(MINUTE, docexa_appointment_sku_details.start_booking_time, docexa_appointment_sku_details.end_booking_time)) as duration_minutes"),

                    // DB::raw("TIMESTAMPD/IFF(MINUTE, docexa_appointment_sku_details.start_booking_time, docexa_appointment_sku_details.end_booking_time) as duration_minutes")
                )
                ->where('booking.bookingidmd5', $bookingID);
            // dd($query->toSql(), $query->getBindings());
            $appointment = $query->first();
            $partialServices = $appointment->partial_services != null ? ServiceMaster::whereIn('id', json_decode($appointment->partial_services))
                // ->where('status', 1)
                ->get('name') : [];
            $appointment->partial_services = $partialServices;
            return response()->json(['status' => false, 'message' => 'Appointment  found', 'data' => [
                'appointment' => $appointment,
                'patient' => $patientDate,
            ]], 200);
        } catch (\Throwable $th) {
            Log::error(['error' => $th]);

            return response()->json(['status' => false, "errorMessage" => $th->getMessage(), 'message' => 'Internal server error'], 500);
        }
    }

    public function checkIn(Request $request)
    {
        // Validate required booking_id
        // Manual validation for booking_id
        $bookingId = $request->input('booking_id');
        if (!$bookingId) {
            return response()->json([
                'status' => false,
                'message' => 'The booking_id field is required and must be an integer.'
            ], 422);
        }

        try {

            // Check if booking exists
            $booking = DB::table('docexa_patient_booking_details')
                ->where('booking_id', $bookingId)
                ->first();

            if (!$booking) {
                return response()->json([
                    'status' => false,
                    'message' => 'Booking not found.'
                ], 404);
            }

            // Update check-in status and time
            $checkInTime = Carbon::now();

            DB::table('docexa_patient_booking_details')
                ->where('booking_id', $bookingId)
                ->update([
                    'check_in' => 1,
                    'check_in_time' => $checkInTime,
                    'updated_at' => $checkInTime
                ]);

            return response()->json([
                'status' => true,
                'message' => 'Check-in successful.',
                'data' => [
                    'booking_id' => $bookingId,
                    'check_in_time' => $checkInTime->toDateTimeString()
                ]
            ]);
        } catch (\Exception $e) {
            \Log::error('Check-in error: ' . $e->getMessage());

            return response()->json([
                'status' => false,
                'message' => 'Server error: ' . $e->getMessage()
            ], 500);
        }
    }

    public function getRemarks()
    {
        $remarks = DB::table('cancel_remarks')
            ->get();
        return response()->json([
            'status' => true,
            'data' => $remarks
        ]);
    }

    public function getSlots($mapId, $clinicID, $startDate)
    {

        // $slot = DB::table('docexa_slot_master')->where('user_map_id', $mapId)->first();
        // Calculate day of week from $startDate (expects format 'Y-m-d')
        if ($startDate) {
            $dayId = Carbon::parse($startDate)->isoWeekday();
        } else {
            $dayId = Carbon::now()->isoWeekday();
        }
        $slot = Slotmaster::where(array("user_map_id" => $mapId, 'clinicID' => $clinicID, 'day_id' => $dayId))->first();

        // return $slot; 
        if (!$slot) {
            return [];
        }

        $start = Carbon::createFromFormat('H:i:s', $slot->start_time);
        $end = Carbon::createFromFormat('H:i:s', $slot->end_time);
        $interval = $slot->slot_size;
        $slots = [];

        while ($start->lt($end)) {
            $slotStart = $start->format('H:i');
            $slotEnd = $start->copy()->addMinutes($interval);

            if ($slotEnd->gt($end)) {
                break;
            }

            $slots[] = [
                'from' => $slotStart,
                'to' => $slotEnd->format('H:i')
            ];

            $start->addMinutes($interval);
        }
        return $slots;
    }

    public function uploadReceipe(Request $request)
    {
        try {
            Log::info("Upload record");

            $file = $request->hasFile('upload_file');
            if ($file) {
                $file = $request->file('upload_file');
                $FileName = $file->getClientOriginalName();
                $extension = pathinfo($FileName, PATHINFO_EXTENSION);

                $customFileName = 'receipe' . Carbon::now()->timestamp . '.' . $extension;
                $filePath = 'Receipe/' . $customFileName;

                $connectionString = $_ENV['AZURE_STORAGE_CONNECTION_STRING'];
                $containerName = '';

                $blobClient = BlobRestProxy::createBlobService($connectionString);

                $content = fopen($file->getRealPath(), 'r');
                $blobClient->createBlockBlob($containerName, $filePath, $content);

                $uploadedFileUrl = "https://docexa.blob.core.windows.net/{$filePath}";

                if ($uploadedFileUrl) {
                    return response()->json(['status' => true, 'message' => "receipe records uploaded successfully", 'file' => $uploadedFileUrl], 200);
                }
            }
            return response()->json(["status" => false, 'code' => 500, 'message' => "Somthing went wrong try again"], 500);
        } catch (\Throwable $th) {
            Log::error(['error' => $th]);
            return response()->json(['status' => false, 'message' => 'Internal server error'], 500);
        }
    }


    public function getwithdrawDetails($usermapId)
    {
        try {
            $data = WithdraModel::where('user_map_id', $usermapId)->get();

            if ($data) {
                return response()->json(['status' => true, 'message' => "data retrived successfully", 'data' => $data], 200);
            } else {
                return response()->json(['status' => false, 'message' => "data not found", 'data' => []], 200);
            }
        } catch (\Throwable $th) {
            Log::info(['error' => $th]);
            return response()->json(["status" => false, "message" => "Internal server error"], 500);
        }
    }
    public function getPatientByMobilenumber($esteblishmentusermapID, $mobileNumber)
    {
        try {
            // dd($mobileNumber,$esteblishmentusermapID);
            $pm = new Patientmaster();
            $data = $pm->getPatientByMobileNumber($esteblishmentusermapID, $mobileNumber);
            if ($data) {
                return response()->json(['status' => true, 'code' => 200, 'data' => $data], 200);
            }
            return response()->json(['status' => false, 'code' => 400, 'message' => 'No patient records found'], 200);
        } catch (\Throwable $th) {
            return response()->json(['status' => false, 'code' => 500, 'message' => "Internal Server Error", "error" => $th->getMessage()], 500);
        }
    }

    public function getCancelledApt(Request $request)
    {
        try {
            $input = $request->all();
            $doctorUserMap = DB::table('docexa_medical_establishments_medical_user_map')->where('id', $input['user_map_id'])->first()->medical_user_id;
            $doctorData = Doctor::where('pharmaclient_id', $doctorUserMap)->first();
            if ($doctorData) {
                $res = new AppointmentDetails();
                $data = $res->getCancelledApt($request);
                request:

                if (count($data) > 0) {
                    return response()->json(['status' => true, 'message' => 'Data fetched successfully', 'data' => $data], 200);
                } else {
                    return response()->json(['status' => false, 'message' => 'Data not found', 'data' => []], 200);
                }
            } else {
                return response()->json(['status' => false, 'message' => 'Doctor not found with this Id'], 401);
            }
        } catch (\Throwable $th) {
            Log::error(['error' => $th]);
            return response()->json(['status' => false, 'message' => 'Internal server error'], 500);
        }
    }


    public function getTodaysApppointmentsV1(Request $request)
    {
        try {
            $input = $request->all();
            $doctorUserMap = DB::table('docexa_medical_establishments_medical_user_map')->where('id', $input['user_map_id'])->first()->medical_user_id;
            $doctorData = Doctor::where('pharmaclient_id', $doctorUserMap)->first();
            if ($doctorData) {
                $res = new AppointmentDetails();
                $data = $res->getTodaysAppointmentV1($request);

                if (count($data) > 0) {
                    return response()->json(['status' => true, 'message' => 'Data fetched successfully', 'data' => $data], 200);
                } else {
                    return response()->json(['status' => false, 'message' => 'Data not found', 'data' => []], 200);
                }
            } else {
                return response()->json(['status' => false, 'message' => 'Doctor not found with this Id'], 401);
            }
        } catch (\Throwable $th) {
            Log::error(['error' => $th]);
            return response()->json(['status' => false, 'message' => 'Internal server error'], 500);
        }
    }

    public function searchInTodaysApppointmentsV1(Request $request)
    {
        try {
            $input = $request->all();
            $key = $request->query('key');
            $value = $request->query('value');
            $doctorUserMap = DB::table('docexa_medical_establishments_medical_user_map')->where('id', $input['user_map_id'])->first()->medical_user_id;
            $doctorData = Doctor::where('pharmaclient_id', $doctorUserMap)->first();
            if ($doctorData) {
                $res = new AppointmentDetails();
                $data = $res->getTodaySearchAppointmentV1($request, $key, $value);

                if (count($data) > 0) {
                    return response()->json(['status' => true, 'message' => 'Data fetched successfully', 'data' => $data], 200);
                } else {
                    return response()->json(['status' => false, 'message' => 'Data not found', 'data' => []], 200);
                }
            } else {
                return response()->json(['status' => false, 'message' => 'Doctor not found with this id', 'code' => 400], 400);
            }
        } catch (\Throwable $th) {
            Log::error(['error' => $th]);
            return response()->json(['status' => false, 'message' => 'Internal server error', 'error' => $th->getMessage(), 'code' => 500], 500);
        }
    }

    public function getDashboardAnalysis($esteblishmentUserMapID)
    {
        try {
            $last7DaysRecordsOfSeenPrescription = DB::table('docexa_patient_booking_details')
                ->where('status', 4)
                ->where('user_map_id', $esteblishmentUserMapID)
                ->whereRaw('created_date >= CURDATE() - INTERVAL 7 DAY')
                ->count();

            $last7daysRecordsOfTotalSeenPrescriptionWhethereOrNot = DB::table('prescription')
                ->where('user_map_id', $esteblishmentUserMapID)
                ->whereRaw('created_at >= CURDATE() - INTERVAL 7 DAY')
                ->count();

            $last7DaysRecordOfAppointmentsTotal = DB::table('docexa_patient_booking_details')
                ->whereIn('status', [2, 4])
                ->where('user_map_id', $esteblishmentUserMapID)
                ->whereRaw('created_date >= CURDATE() - INTERVAL 7 DAY')
                ->count();

            $last7DaysRecordOfNewPatient = DB::table('docexa_patient_details')
                ->where('created_by_doctor', $esteblishmentUserMapID)
                ->whereRaw('created_at >= CURDATE() - INTERVAL 7 DAY')
                ->count();

            $totalPatientCount = DB::table('docexa_patient_doctor_relation')->where('user_map_id', $esteblishmentUserMapID)
                ->count();


            return response()->json([
                'status' => true,
                'message' => 'Data fetched successfully',
                'data' => [
                    "totalPatientCount" => $totalPatientCount,
                    "last7DaysRecordOfNewPatient" => $last7DaysRecordOfNewPatient,
                    "last7DaysRecordOfAppointmentsTotal" => $last7DaysRecordOfAppointmentsTotal,
                    "last7DaysRecordsOfSeenPrescription" => $last7DaysRecordsOfSeenPrescription,
                    "last7daysRecordsOfTotalSeenPrescriptionWhethereOrNot" => $last7daysRecordsOfTotalSeenPrescriptionWhethereOrNot
                ]
            ], 200);
        } catch (\Throwable $th) {
            Log::error(['error' => $th]);
            return response()->json(['status' => false, 'message' => 'Internal server error', 'error' => $th->getMessage(), 'code' => 500], 500);
        }
    }


    public function getPatientsWithoutScheduledApt(Request $request, $page, $limit)
    {
        try {
            $offset = ($page - 1) * $limit;
            $input = $request->all();
            // $query = DB::table('prescription as p')
            // ->leftJoin('docexa_patient_booking_details as d', function ($join) {
            //     $join->on('p.patient_id', '=', 'd.patient_id')
            //         ->whereColumn('d.date', '=', 'p.follow_up')
            //         //  ->where('d.user_map_id',$usermapId)
            //         ->whereIn('d.status', [1, 2, 5]);
            // })
            // ->leftJoin('docexa_patient_details as patientdata', 'p.patient_id', '=', 'patientdata.patient_id') 
            // ->whereBetween('p.follow_up',[$input['start_date'] , $input['end_date']])
            // ->where('p.user_map_id', $input['usermapid'])
            // ->whereNull('d.patient_id')
            // ->select('patientdata.*' , 'p.follow_up');
            // ->offset($offset)
            // ->limit($limit);

            //         $lastAppointments = DB::table('docexa_patient_booking_details')
            // ->select('patient_id', DB::raw('MAX(date) as last_appointment_date'))
            // ->groupBy('patient_id');


            // $lastAppointments = DB::table('docexa_patient_booking_details as sub')
            // ->select('sub.*')
            // ->whereRaw('sub.date = (SELECT MAX(inner_sub.date) 
            //                          FROM docexa_patient_booking_details as inner_sub 
            //                  WHERE inner_sub.patient_id = sub.patient_id)');    

            // $query = DB::table('prescription as p')
            // ->leftJoin('docexa_patient_booking_details as d', function ($join) {
            //     $join->on('p.patient_id', '=', 'd.patient_id')
            //         ->whereColumn('d.date', '=', 'p.follow_up')
            //         ->whereIn('d.status', [1, 2, 5]);
            // })
            // ->leftJoin('docexa_patient_details as patientdata', 'p.patient_id', '=', 'patientdata.patient_id')
            // ->leftJoinSub($lastAppointments, 'last_appointment', function ($join) {
            //     $join->on('p.patient_id', '=', 'last_appointment.patient_id');
            // })
            // ->whereBetween('p.follow_up', [$input['start_date'], $input['end_date']])
            // ->where('p.user_map_id', $input['usermapid'])
            // ->whereNull('d.patient_id')
            // ->select(
            //     'patientdata.*',
            //     'p.follow_up',
            //     'last_appointment.*'
            // );


            // Precompute the latest appointments for each patient
            $latestAppointments = DB::table('docexa_patient_booking_details')
                ->select('patient_id', DB::raw('MAX(date) as last_appointment_date'))
                // ->whereIn('status', [1, 2, 5])  // Filter by valid status early
                ->groupBy('patient_id');

            // Main query
            $query = DB::table('prescription as p')
                ->leftJoin('docexa_patient_booking_details as d', function ($join) {
                    $join->on('p.patient_id', '=', 'd.patient_id')
                        ->whereColumn('d.date', '=', 'p.follow_up');
                    // ->whereIn('d.status', [1, 2, 5]);
                })
                ->leftJoin('docexa_patient_details as patientdata', 'p.patient_id', '=', 'patientdata.patient_id')
                ->leftJoinSub($latestAppointments, 'last_appointment', function ($join) {
                    $join->on('p.patient_id', '=', 'last_appointment.patient_id');
                })
                ->leftJoin('docexa_patient_booking_details as last_booking', function ($join) {
                    $join->on('last_booking.patient_id', '=', 'last_appointment.patient_id')
                        ->whereColumn('last_booking.date', '=', 'last_appointment.last_appointment_date');
                })
                ->whereBetween('p.follow_up', [$input['start_date'], $input['end_date']])
                ->where('p.user_map_id', $input['usermapid'])
                ->whereNull('d.patient_id')
                ->select(
                    'patientdata.*',
                    'p.follow_up',
                    'last_booking.*'
                )
                ->orderBy('p.follow_up', 'asc');;


            if (!empty($input['key'] == 'mobile')) {
                $query->where('patientdata.mobile_no', 'LIKE', '%' . $input['value'] . '%');
            }
            if (!empty($input['key'] == 'patient_name')) {
                $query->where('patientdata.patient_name', 'LIKE', '%' . $input['value'] . '%');
            }


            $patients = $query->get();
            $totalCount = $query->count();

            if (count($patients) > 0) {
                return response()->json(['status' => true, 'message' => 'Data fetched successfully', 'data' => $patients, 'totalCount' => $totalCount], 200);
            } else {
                return response()->json(['status' => false, 'message' => 'Data not found', 'data' => []], 200);
            }
        } catch (\Throwable $th) {
            Log::error(['error' => $th]);
            return response()->json(['status' => false, 'message' => 'Internal server error', 'error' => $th->getMessage(), 'code' => 500], 500);
        }
    }
    public function addLanguage(Request $request)
    {
        try {
            $input = $request->all();
            $patient = Patientmaster::find($input['patient_id']);
            $patient->language = $input['language'];
            $save = $patient->save();

            if ($save) {
                return response()->json(['status' => true, 'message' => 'data added successfully',  'code' => 200], 200);
            } else {
                return response()->json(['status' => false, 'message' => 'data not found', 'code' => 200], 200);
            }
        } catch (\Throwable $th) {
            return response()->json(['status' => false, 'message' => "Internal server error", 'error' => $th->getMessage()], 500);
        }
    }

    public function UploadRecordMicroSoftAzuree($id, $patientId, Request $request)
    {
        try {
            Log::info("Upload record");
            $req = $request->all();
            $doctorUserMap = DB::table('docexa_medical_establishments_medical_user_map')->where('id', $id)->first()->medical_user_id;
            $doctorData = Doctor::where('pharmaclient_id', $doctorUserMap)->first();
            if ($doctorData) {
                $patientExist = Patientmaster::where('patient_id', $patientId)->first();
                if ($patientExist) {
                    $file = $request->hasFile('upload_file');
                    if ($file) {
                        $file = $request->file('upload_file');
                        $FileName = $file->getClientOriginalName();

                        $extension = pathinfo($FileName, PATHINFO_EXTENSION);

                        $customFileName = $patientId . '-rx-' . Carbon::now()->timestamp . '.' . $extension;
                        $filePath = 'records/' . $customFileName;

                        $fileSaved = Storage::disk('s3')->put($filePath, file_get_contents($file));
                        if ($fileSaved) {
                            $rx = new RecordPrescriptionEmr();
                            $rx->patient_id = $patientId;
                            $rx->user_map_id = $id;
                            $rx->notes = $req['notes'];
                            $rx->patient_id = $patientId;
                            $rx->upload_file_name = $customFileName;
                            $rx->upload_file = Storage::disk('s3')->url($filePath);
                            $save = $rx->save();
                            if ($save) {
                                $res = $rx->getRecordPrescriptionList($id, $patientId);
                                $filepathSaved = Storage::disk('s3')->url($filePath);
                                return response()->json(['status' => true, 'message' => "records records uploaded successfully", "data" => $res, 'file' => $filepathSaved], 200);
                            }
                        }
                        return response()->json(["status" => false, 'code' => 500, 'message' => "Somthing went wrong try again"], 500);
                    }
                } else {
                    return response()->json(['status' => false, 'message' => 'Patient with this id not found'], 400);
                }
            } else {
                return response()->json(['status' => false, 'message' => 'Doctor with this id not found'], 400);
            }
        } catch (\Throwable $th) {
            Log::error(['error' => $th]);
            return response()->json(['status' => false, 'message' => 'Internal server error'], 500);
        }
    }

    public function UploadRecordMicroSoftAzure($id, $patientId, Request $request)
    {
        try {
            Log::info(["Upload record", $request->all(), $request->hasFile('upload_file')]);

            $req = $request->all();
            $doctorUserMap = DB::table('docexa_medical_establishments_medical_user_map')->where('id', $id)->first()->medical_user_id;
            $doctorData = Doctor::where('pharmaclient_id', $doctorUserMap)->first();

            if ($doctorData) {
                $patientExist = Patientmaster::where('patient_id', $patientId)->first();

                if ($patientExist) {
                    $file = $request->hasFile('upload_file');
                    if ($file) {
                        $file = $request->file('upload_file');
                        $FileName = $file->getClientOriginalName();
                        Log::info(['FileName', $FileName]);
                        $extension = pathinfo($FileName, PATHINFO_EXTENSION);
                        Log::info(['extension', $extension]);
                        $customFileName = $patientId . '-rx-' . Carbon::now()->timestamp . '.' . $extension;
                        $filePath = 'records/' . $customFileName;

                        Log::info(['filePath', $filePath]);

                        $connectionString = $_ENV['AZURE_STORAGE_CONNECTION_STRING'];
                        $containerName = '';

                        $blobClient = BlobRestProxy::createBlobService($connectionString);

                        $content = fopen($file->getRealPath(), 'r');
                        $blobClient->createBlockBlob($containerName, $filePath, $content);

                        // Prepare the URL for the uploaded file in Azure
                        $uploadedFileUrl = "https://docexa.blob.core.windows.net/{$filePath}";

                        $rx = new RecordPrescriptionEmr();
                        $rx->patient_id = $patientId;
                        $rx->user_map_id = $id;
                        $rx->notes = $req['notes'];
                        $rx->upload_file_name = $customFileName;
                        $rx->upload_file = $uploadedFileUrl;

                        $save = $rx->save();

                        if ($save) {
                            $res = $rx->getRecordPrescriptionList($id, $patientId);
                            return response()->json(['status' => true, 'message' => "Record uploaded successfully", "data" => $res, 'file' => $uploadedFileUrl], 200);
                        }
                    }
                    return response()->json(["status" => false, 'code' => 500, 'message' => "Something went wrong, try again"], 500);
                } else {
                    return response()->json(['status' => false, 'message' => 'Patient with this ID not found'], 400);
                }
            } else {
                return response()->json(['status' => false, 'message' => 'Doctor with this ID not found'], 400);
            }
        } catch (\Throwable $th) {
            Log::error(['error' => $th]);
            return response()->json(['status' => false, 'message' => 'Internal server error', 'error' => $th->getMessage()], 500);
        }
    }

    public function signUploadMicrosoftAzure(Request $request, $id)
    {

        try {
            Log::info('signUpload');
            $input = $request->all();
            $doctorUserMap = DB::table('docexa_medical_establishments_medical_user_map')->where('id', $id)->first()->medical_user_id;
            $doctorData = Doctor::where('pharmaclient_id', $doctorUserMap)->first();

            Log::info(['doctorExist' => $doctorData]);
            if ($doctorData) {
                $file = $request->hasFile('upload_file');
                if ($file) {



                    $file = $request->file('upload_file');
                    $FileName = $file->getClientOriginalName();
                    $extension = pathinfo($FileName, PATHINFO_EXTENSION);
                    $customFileName = $id . '-signuture-' . $this->generateTimestamp() . '.' . $extension;

                    $filePath = 'signutures/' . $customFileName;

                    $connectionString = $_ENV['AZURE_STORAGE_CONNECTION_STRING'];
                    $containerName = '';
                    $blobClient = BlobRestProxy::createBlobService($connectionString);
                    $content = fopen($file->getRealPath(), 'r');
                    Log::info(['blobClient', $blobClient->createBlockBlob($containerName, $filePath, $content)]);
                    $uploadedFileUrl = "https://docexa.blob.core.windows.net/{$filePath}";

                    if ($uploadedFileUrl) {
                        Log::info(['filedaved' => $uploadedFileUrl]);
                        $sign = new DoctorPrecriptionData();
                        $IsSignExist = DoctorPrecriptionData::where('user_map_id', $id)->first();

                        if ($IsSignExist) {
                            Log::info(['already exist' => $IsSignExist]);
                            $IsSignExist->sign_url = $uploadedFileUrl;
                            // $IsSignExist->header = $input['header'];
                            // $IsSignExist->footer = $input['footer'];
                            $IsSignExist->save();
                            return response()->json(['status' => true, 'message' => 'Data uploaded successfully', "url" => $uploadedFileUrl], 200);
                        } else {
                            Log::info(['new' => $IsSignExist]);
                            $sign->user_map_id = $id;
                            $sign->sign_image_name = $FileName;
                            $sign->sign_url = $uploadedFileUrl;
                            // $sign->header = $input['header'];
                            // $sign->footer = $input['footer'];
                            $save = $sign->save();
                            Log::info(['signuture saved' => $save]);
                            return response()->json(['status' => true, 'message' => 'Data uploaded successfully', "url" => $uploadedFileUrl], 200);
                        }
                    } else {
                        return response()->json(['status' => false, 'message' => 'Failed to upload Signature Image.'], 400);
                    }
                }
            } else {
                return response()->json(['status' => false, 'message' => 'Doctor not found'], 400);
            }
        } catch (\Throwable $th) {
            Log::error(['error' => $th]);
            return response()->json(['status' => false, 'message' => 'Internal server error'], 500);
        }
    }

    public function createAppointmentwalkinV5(Request $request)
    {

        $res = new AppointmentDetails();
        $data = $res->createAppointmentwalkinV5($request);
        return response()->json(['status' => 'success', 'data' => $data], 200);
        // 
    }


    public function getTodaysApppointmentsForParticularPatient(Request $request)
    {
        try {
            $input = $request->all();
            $doctorUserMap = DB::table('docexa_medical_establishments_medical_user_map')->where('id', $input['user_map_id'])->first()->medical_user_id;
            $doctorData = Doctor::where('pharmaclient_id', $doctorUserMap)->first();
            if ($doctorData) {
                $res = new AppointmentDetails();
                $data = $res->getTodaysApppointmentsForParticularPatient($request);

                if (count($data) > 0) {
                    return response()->json(['status' => true, 'message' => 'Data fetched successfully', 'data' => $data], 200);
                } else {
                    return response()->json(['status' => false, 'message' => 'Data not found', 'data' => []], 200);
                }
            } else {
                return response()->json(['status' => false, 'message' => 'Doctor not found with this Id'], 401);
            }
        } catch (\Throwable $th) {
            Log::error(['error' => $th]);
            return response()->json(['status' => false, 'message' => 'Internal server error'], 500);
        }
    }

    public function listappointmentupdatedForParticularPatient(Request $request)
    {

        $res = new AppointmentDetails();
        $data = $res->listappointmentupdatedForParticularPatient($request);
        return response()->json(['status' => 'success', 'data' => $data], 200);
    }
}
