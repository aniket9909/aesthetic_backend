<?php

/**
 * Docexa Doctor Micro Service API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: satish.soni@globalspace.in
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

namespace App\Http\Controllers;

use Illuminate\Http\Response;
use Illuminate\Http\Request;
use App\Medicalestablishmentsmedicalusermap;
use App\Doctor;
use App\User;
use App\Medicalestablishments;
use App\DoctorAddressDetail;
use App\Slotmaster;
use App\Clinic;
use App\DoctorAbout;
use App\DoctorAward;
use App\DoctorEducation;
use App\DoctorExperience;
use App\DoctorServices;
use App\DoctorSpecialization;
use App\PrescriptionData;
use App\Prescriptiontemplate;
use DateTime;
use DB;
use Log;
use URL;
use Symfony\Component\HttpKernel\Exception\HttpException;
use Illuminate\Support\Facades\Http;

class UsersApi extends Controller
{

    /**
     * Constructor
     */
    public function __construct()
    {
    }
    /**
     * @OA\Get(
     * path="/establishments/users/{esteblishmentusermapID}/profile",
     * summary="get doctor data",
     * description="",
     * operationId="getprofile",
     * tags={"Profile"},
     * @OA\Parameter(
     *         name="esteblishmentusermapID",
     *         in="path",
     *         description="esteblishmentusermapID",
     *         required=true,
     *         example=65960,
     *         @OA\Schema(type="number")
     *     ),
     * @OA\Response(
     *         response="200",
     *         description="Returns doctors data",
     * ),
     * @OA\Response(
     *    response=400,
     *    description="information not found response" 
     * )
     * )
     */
    public function getprofile($esteblishmentusermapID)
    {

        try {
            $medical_establishment = Medicalestablishmentsmedicalusermap::where(array("id" => $esteblishmentusermapID))->first();
            if (isset($medical_establishment->medical_establishment_id))
                $medical_establishment_id = $medical_establishment->medical_establishment_id;
            else
                return response()->json(['status' => "fail", 'message' => "user map not found"], 400);
            $Medicaldata = Medicalestablishmentsmedicalusermap::where(array("medical_establishment_id" => $medical_establishment_id, 'role' => 'doctor'))->first();
            return response()->json(['status' => "success", 'doctor' => $this->autologin($esteblishmentusermapID), 'id' => $medical_establishment_id, 'handle' => $_ENV['APP_HANDLE'] . $Medicaldata->handle], 200);
        } catch (\Exception $e) {

            throw new HttpException(500, $e->getMessage());
        }
    }
    /**
     * @OA\Put(
     * path="/establishments/users/{esteblishmentusermapID}/prescription_config/{themeID}",
     * summary="get prescription data",
     * description="",
     * operationId="prescription_config_set",
     * tags={"Profile"},
     * @OA\Parameter(
     *         name="esteblishmentusermapID",
     *         in="path",
     *         description="esteblishmentusermapID",
     *         required=true,
     *         example=65960,
     *         @OA\Schema(type="number")
     *     ),
     * @OA\Parameter(
     *         name="themeID",
     *         in="path",
     *         description="themeID",
     *         required=true,
     *         example=1,
     *         @OA\Schema(type="number")
     *     ),
     * @OA\Response(
     *         response="200",
     *         description="Returns doctors data",
     * ),
     * @OA\Response(
     *    response=400,
     *    description="information not found response" 
     * )
     * )
     */
    public function setprescriptiontheme($esteblishmentusermapID,$themeID)
    {

        try {
            $medical_establishment = Medicalestablishmentsmedicalusermap::where(array("id" => $esteblishmentusermapID))->first();
            $doctor = Doctor::find($medical_establishment->medical_user_id);
            $doctor->prescription_theme = $themeID;
            $doctor->save();
            return $this->getprescriptiontheme($esteblishmentusermapID);
        } catch (\Exception $e) {

            throw new HttpException(500, $e->getMessage());
        }
    }
    /**
     * @OA\Get(
     * path="/establishments/users/{esteblishmentusermapID}/prescription_config",
     * summary="get prescription data",
     * description="",
     * operationId="prescription_config_get",
     * tags={"Profile"},
     * @OA\Parameter(
     *         name="esteblishmentusermapID",
     *         in="path",
     *         description="esteblishmentusermapID",
     *         required=true,
     *         example=65960,
     *         @OA\Schema(type="number")
     *     ),
     * @OA\Parameter(
     *         name="themeID",
     *         in="path",
     *         description="themeID",
     *         required=true,
     *         example=1,
     *         @OA\Schema(type="number")
     *     ),
     * @OA\Response(
     *         response="200",
     *         description="Returns doctors data",
     * ),
     * @OA\Response(
     *    response=400,
     *    description="information not found response" 
     * )
     * )
     */
    public function getprescriptiontheme($esteblishmentusermapID)
    {

        try {
            $medical_establishment = Medicalestablishmentsmedicalusermap::where(array("id" => $esteblishmentusermapID))->first();
            
            
            $Medicaldata = Doctor::find($medical_establishment->medical_user_id);
            
            return response()->json(['status' => "success",'theme'=>Prescriptiontemplate::find($Medicaldata->prescription_theme)],200);
        } catch (\Exception $e) {

            throw new HttpException(500, $e->getMessage());
        }
    }
    /**
     * @OA\Get(
     * path="/establishments/users/{esteblishmentusermapID}/task",
     * summary="get task data",
     * description="",
     * operationId="gettask",
     * tags={"Profile"},
     * @OA\Parameter(
     *         name="esteblishmentusermapID",
     *         in="path",
     *         description="esteblishmentusermapID",
     *         required=true,
     *         example=65960,
     *         @OA\Schema(type="number")
     *     ),
     * @OA\Response(
     *         response="200",
     *         description="Returns task data",
     * ),
     * @OA\Response(
     *    response=400,
     *    description="information not found response" 
     * )
     * )
     */
    public function gettask($esteblishmentusermapID)
    {

        try {
/*
            $task = [
                [
                    "action" => "profile",
                    "message" => "Your profile incomplete, kindly complete this",
                    "flag" => "danger"
                ],
                [
                    "action" => "prescription",
                    "message" => "write your first prescription",
                    "flag" => "notice"
                ],
                [
                    "action" => "link",
                    "link" => "http://stagingvm.docexa.com/",
                    "message" => "",
                    "image" => "http://docexa.com/assets/img/images/vd.png",
                    "flag" => "notice"
                ]
            ];
*/
            $task = [];
            
            $prescription = PrescriptionData::where('user_map_id',$esteblishmentusermapID)->count();
            if($prescription < 1){
                $task[] =  [
                    "action"=>"prescription",
                    "message"=>"write your first prescription",
                    "flag"=>"notice"
                ];
            }
            $clinic_address = Clinic::where(array("user_map_id" => $esteblishmentusermapID))->count();;
            $medical_data = DB::table('docexa_medical_establishments')
            ->Join('docexa_medical_establishments_medical_user_map', 'docexa_medical_establishments_medical_user_map.medical_establishment_id', '=', 'docexa_medical_establishments.id')
            ->Join('docexa_doctor_master', 'docexa_medical_establishments_medical_user_map.medical_user_id', '=', 'docexa_doctor_master.pharmaclient_id')
            ->select('docexa_doctor_master.medical_registration_no', 'docexa_doctor_master.mrn_council_year', 'docexa_doctor_master.mrn_council_state_id', 'docexa_medical_establishments_medical_user_map.id', 'docexa_medical_establishments_medical_user_map.handle', 'docexa_medical_establishments_medical_user_map.medical_establishment_id', 'docexa_medical_establishments_medical_user_map.medical_user_id')
            ->where('docexa_medical_establishments_medical_user_map.id', $esteblishmentusermapID)->first();
            $medical_details = isset($medical_data->medical_registration_no)?1:0;
            $consulation_field = "";
            $bank_details = "";
            $profile = "";
            if($clinic_address < 1){
                $task[] = [
                    "action"=>"clinic_address",
                    "message"=>"Your Clinic profile is incomplete, kindly complete this",
                    "flag"=>"danger"
                ];
            }else if($medical_details < 1){
                $task[] = [
                    "action"=>"medical_details",
                    "message"=>"Your Medical details are incomplete, kindly complete this",
                    "flag"=>"danger"
                ];
            }else if($consulation_field < 1){
                $task[] = [
                    "action"=>"consulation_field",
                    "message"=>"Your Consultation details are incomplete, kindly complete this",
                    "flag"=>"danger"
                ];
            }else if($bank_details < 1){
                $task[] = [
                    "action"=>"bank_details",
                    "message"=>"Your Bank details are incomplete, kindly complete this",
                    "flag"=>"danger"
                ];
            }else if($profile < 1){
                $task[] = [
                    "action"=>"profile",
                    "message"=>"Your profile is incomplete, kindly complete this",
                    "flag"=>"danger"
                ];
            }
            

            $doctor = $this->autologin($esteblishmentusermapID);
            if(isset($doctor['mobile_no'])){
            $task[] = [
                        "action"=>"link",
                        "link"=>"http://vd.docexa.com/auth?m=".$doctor['mobile_no'],
                        "message"=>"",
                        "image"=>"http://vd.docexa.com/assets/images/vd.png",
                        "flag"=>"notice"
                ];
            }
            return response()->json(['status' => "success", 'task' => $task], 200);
        } catch (\Exception $e) {
            throw new HttpException(500, $e->getMessage());
        }
    }
    /** 
     * @OA\Put(
     * path="/establishments/users/{esteblishmentusermapID}/profile",
     * summary="update doctor data",
     * description="",
     * operationId="updateprofile",
     * tags={"Profile"},
     * * @OA\Parameter(
     *         name="esteblishmentusermapID",
     *         in="path",
     *         description="esteblishmentusermapID",
     *         required=true,
     *         example=65960,
     *         @OA\Schema(type="number")
     *     ),
     * @OA\RequestBody(
     *  required=true,
     *  description="Pass doctor details",
     *  @OA\JsonContent(
     *      type="object",
     *     @OA\Property(property="is_user_doctor", type="number", example="1"),
     * *      @OA\Property(property="first_name", type="string", example="satish"),
     *       @OA\Property(property="last_name", type="string", example="soni"),
     *       @OA\Property(property="gender", type="integer", example="1"),
     *      @OA\Property(property="doctor_profile_pic", type="file", example=""),
     *      @OA\Property(property="doctor_pic", type="file", example=""),
     *      @OA\Property(property="email", type="text", example="satish.soni@globalspace.in"),
     *      @OA\Property(property="mobile_no", type="text", example="7208613316")
     *  ),
     * ),
     * @OA\Response(
     *         response="200",
     *         description="Returns doctors data",
     * ),
     * @OA\Response(
     *    response=400,
     *    description="information not found response" 
     * )
     * )
     */
    public function updateprofile($esteblishmentusermapID, Request $request)
    {

        $data = $this->updateprofiledata($esteblishmentusermapID, $request);
        return response()->json($data->original, 200);
    }
    public function autologin($esteblishment_user_map_id)
    {
        // var_dump($esteblishment_user_map_id);die;
        $tabdata = DB::table('docexa_medical_establishments')
            ->Join('docexa_medical_establishments_medical_user_map', 'docexa_medical_establishments_medical_user_map.medical_establishment_id', '=', 'docexa_medical_establishments.id')
            ->Join('docexa_doctor_master', 'docexa_medical_establishments_medical_user_map.medical_user_id', '=', 'docexa_doctor_master.pharmaclient_id')
            ->select('docexa_doctor_master.mobile_no', 'docexa_doctor_master.email_id', 'docexa_doctor_master.gender_id', 'docexa_doctor_master.image', 'docexa_doctor_master.pharmaclient_name', 'docexa_doctor_master.last_name', 'docexa_doctor_master.pharmaclient_image', 'docexa_medical_establishments_medical_user_map.id', 'docexa_medical_establishments_medical_user_map.handle', 'docexa_medical_establishments_medical_user_map.medical_establishment_id', 'docexa_medical_establishments_medical_user_map.medical_user_id')
            ->where('docexa_medical_establishments_medical_user_map.id', $esteblishment_user_map_id)

            ->get()->first();
        $location = Clinic::where(array("user_map_id" => $esteblishment_user_map_id))->first();
        $city = '';
        $address = null;
        $state = '';
        if (isset($location->id)) {
            if (isset($location->cities->name)) {
                $city = $location->cities->name;
            }
            if (isset($location->states->state_name)) {
                $state = $location->states->state_name;
            }
            $address = ($location->address && $location->address != null) ? $location->address : null;
        }
        // var_dump($tabdata);die;
        if (isset($tabdata->medical_establishment_id)) {
            $response = [
                'esteblishment_id' => $tabdata->medical_establishment_id,
                'esteblishment_user_map_id' => $tabdata->id,
                'medical_user_id' => $tabdata->medical_user_id,
                'handle' => $_ENV['APP_HANDLE'] . $tabdata->handle,
                'first_name' => $tabdata->pharmaclient_name,
                'last_name' => $tabdata->last_name,
                'mobile_no' => $tabdata->mobile_no,
                'email' => $tabdata->email_id,
                'city' => $city,
                'state' => $state,
                'address' => $address,
                'clinic' => Clinic::where(array("user_map_id" => $esteblishment_user_map_id))->with(['cities', 'states'])->get(),
                'profilePicture' => (strpos($tabdata->image, 'docexa_default_image') !== false) ? URL::Asset('upload/doctor/profile/' . $tabdata->image) : $tabdata->image,
                'gender' => $tabdata->gender_id
            ];
            return $response;
        } else {
            return [];
        }
    }
    public function updateprofiledata($esteblishmentusermapID, $request)
    {
        $data = $request->input();
        $medical_establishment_id = Medicalestablishmentsmedicalusermap::where(array("id" => $esteblishmentusermapID))->first()->medical_establishment_id;
        //var_dump($medical_establishment_id);die;
        $id = $medical_establishment_id;
        $Medicaldata = Medicalestablishmentsmedicalusermap::where(array("medical_establishment_id" => $id, 'role' => 'doctor'))->first();
        if (!isset($Medicaldata->medical_user_id)) {
            return response()->json(['status' => "fail", 'msg' => "Medical establishment didn't found"], 200);
        }

        $doctor = Doctor::find($Medicaldata->medical_user_id);

        if (isset($data['doctor_profile_pic']))
            $doctor->pharmaclient_image = $data['doctor_profile_pic'];
        if (isset($data['doctor_pic']) && $data['doctor_pic'] != null)
            $doctor->image = $data['doctor_pic'];
        $doctor->pharmaclient_name = $data['first_name'];
        $doctor->last_name = $data['last_name'];
        //$doctor->email_id = $data['email'];
        $doctor->gender_id = $data['gender'];
        $doctor->mobile_no = isset($data['mobile_no']) ? $data['mobile_no'] : '';
        $doctor->save();
        return response()->json(['status' => "success", 'doctor' => $this->autologin($Medicaldata->id), 'id' => $id, 'handle' => $_ENV['APP_HANDLE'] . $Medicaldata->handle], 200);
    }


    /**
     * @OA\Get(
     * path="/establishments/users/{esteblishmentusermapID}/medicalinfo",
     * summary="get doctor data",
     * description="",
     * operationId="getmedicalinfo",
     * tags={"Profile"},
     * @OA\Parameter(
     *         name="esteblishmentusermapID",
     *         in="path",
     *         description="esteblishmentusermapID",
     *         required=true,
     *         example=65960,
     *         @OA\Schema(type="number")
     *     ),
     * @OA\Response(
     *         response="200",
     *         description="Returns doctors data",
     * ),
     * @OA\Response(
     *    response=400,
     *    description="information not found response" 
     * )
     * )
     */
    public function getmedicalinfo($esteblishmentusermapID)
    {

        try {
            $medical_establishment_id = Medicalestablishmentsmedicalusermap::where(array("id" => $esteblishmentusermapID))->first()->medical_establishment_id;

            $Medicaldata = Medicalestablishmentsmedicalusermap::where(array("medical_establishment_id" => $medical_establishment_id, 'role' => 'doctor'))->first();
            return response()->json(['status' => "success", 'medicalinfo' => $this->medicalinfo($esteblishmentusermapID), 'id' => $medical_establishment_id, 'handle' => $_ENV['APP_HANDLE'] . $Medicaldata->handle], 200);
        } catch (\Exception $e) {
            throw new HttpException(500, $e->getMessage());
        }
    }
    /**
     * @OA\Put(
     * path="/establishments/users/{esteblishmentusermapID}/medicalinfo",
     * summary="update doctor data",
     * description="",
     * operationId="updatemedicalinfo",
     * tags={"Profile","Doctor Registration APIs"},
     * * @OA\Parameter(
     *         name="esteblishmentusermapID",
     *         in="path",
     *         description="esteblishmentusermapID",
     *         required=true,
     *         example=65960,
     *         @OA\Schema(type="number")
     *     ),
     * @OA\RequestBody(
     *  required=true,
     *  description="Pass doctor details",
     *  @OA\JsonContent(
     *      type="object",
     *     @OA\Property(property="is_user_doctor", type="number", example="1"),
     * *      @OA\Property(property="medical_registration_no", type="string", example="10001"),
     *       @OA\Property(property="medical_registration_year", type="string", example="2000"),
     *       @OA\Property(property="medical_registration_state_id", type="integer", example="1")
     *  ),
     * ),
     * @OA\Response(
     *         response="200",
     *         description="Returns doctors data",
     * ),
     * @OA\Response(
     *    response=400,
     *    description="information not found response" 
     * )
     * )
     */
    public function updatemedicalinfo($esteblishmentusermapID, Request $request)
    {
        $data = $request->input();
        $medical_establishment_id = Medicalestablishmentsmedicalusermap::where(array("id" => $esteblishmentusermapID))->first()->medical_establishment_id;
        //var_dump($medical_establishment_id);die;
        $id = $medical_establishment_id;
        $Medicaldata = Medicalestablishmentsmedicalusermap::where(array("medical_establishment_id" => $id, 'role' => 'doctor'))->first();
        if (!isset($Medicaldata->medical_user_id)) {
            return response()->json(['status' => "fail", 'msg' => "Medical establishment didn't found"], 200);
        }
        $doctor = Doctor::find($Medicaldata->medical_user_id);

        $doctor->medical_registration_no = $data['medical_registration_no'];
        $doctor->mrn_council_year = $data['medical_registration_year'];
        $doctor->mrn_council_state_id = $data['medical_registration_state_id'];
        $doctor->save();
        return response()->json(['status' => "success", 'medicalinfo' => $this->medicalinfo($esteblishmentusermapID), 'id' => $medical_establishment_id, 'handle' => $_ENV['APP_HANDLE'] . $Medicaldata->handle], 200);
    }
    public function medicalinfo($esteblishment_user_map_id)
    {
        // var_dump($esteblishment_user_map_id);die;
        $tabdata = DB::table('docexa_medical_establishments')
            ->Join('docexa_medical_establishments_medical_user_map', 'docexa_medical_establishments_medical_user_map.medical_establishment_id', '=', 'docexa_medical_establishments.id')
            ->Join('docexa_doctor_master', 'docexa_medical_establishments_medical_user_map.medical_user_id', '=', 'docexa_doctor_master.pharmaclient_id')
            ->select('docexa_doctor_master.medical_registration_no', 'docexa_doctor_master.mrn_council_year', 'docexa_doctor_master.mrn_council_state_id', 'docexa_medical_establishments_medical_user_map.id', 'docexa_medical_establishments_medical_user_map.handle', 'docexa_medical_establishments_medical_user_map.medical_establishment_id', 'docexa_medical_establishments_medical_user_map.medical_user_id')
            ->where('docexa_medical_establishments_medical_user_map.id', $esteblishment_user_map_id)

            ->get()->first();
        // var_dump($tabdata);die;
        if (isset($tabdata->medical_establishment_id)) {
            $response = [
                'esteblishment_id' => $tabdata->medical_establishment_id,
                'esteblishment_user_map_id' => $tabdata->id,
                'medical_user_id' => $tabdata->medical_user_id,
                'handle' => $_ENV['APP_HANDLE'] . $tabdata->handle,
                'medical_registration_no' => $tabdata->medical_registration_no,
                'medical_registration_year' => $tabdata->mrn_council_year,
                'medical_registration_state_id' => $tabdata->mrn_council_state_id,
                'medical_registration_state' => ($tabdata->mrn_council_state_id != null) ? (DB::table('docexa_medical_council_state_master')->where('medical_council_state_id', $tabdata->mrn_council_state_id)->first()->medical_council_state_name) : "",
            ];
            return $response;
        } else {
            return [];
        }
    }
    /**
     * @OA\Get(
     * path="/establishments/users/{esteblishmentusermapID}/address",
     * summary="get doctor data",
     * description="",
     * operationId="getaddress",
     * tags={"Profile"},
     * @OA\Parameter(
     *         name="esteblishmentusermapID",
     *         in="path",
     *         description="esteblishmentusermapID",
     *         required=true,
     *         example=65960,
     *         @OA\Schema(type="number")
     *     ),
     * @OA\Response(
     *         response="200",
     *         description="Returns doctors data",
     * ),
     * @OA\Response(
     *    response=400,
     *    description="information not found response" 
     * )
     * )
     */
    public function getaddress($esteblishmentusermapID)
    {

        try {
            $medical_establishment_id = Medicalestablishmentsmedicalusermap::where(array("id" => $esteblishmentusermapID))->first()->medical_establishment_id;

            $Medicaldata = Medicalestablishmentsmedicalusermap::where(array("medical_establishment_id" => $medical_establishment_id, 'role' => 'doctor'))->first();

            return response()->json(['status' => "success", 'addressinfo' => $this->addressinfo($esteblishmentusermapID), 'id' => $medical_establishment_id, 'handle' => $_ENV['APP_HANDLE'] . $Medicaldata->handle], 200);
        } catch (\Exception $e) {
            throw new HttpException(500, $e->getMessage());
        }
    }
    /**
     * @OA\Put(
     * path="/establishments/users/{esteblishmentusermapID}/address",
     * summary="update doctor data",
     * description="",
     * operationId="updateaddressinfo",
     * tags={"Profile","Doctor Registration APIs"},
     * * @OA\Parameter(
     *         name="esteblishmentusermapID",
     *         in="path",
     *         description="esteblishmentusermapID",
     *         required=true,
     *         example=65960,
     *         @OA\Schema(type="number")
     *     ),
     * @OA\RequestBody(
     *  required=true,
     *  description="Pass doctor details",
     *  @OA\JsonContent(
     *      type="object",
     *     @OA\Property(property="is_user_doctor", type="number", example="1"),
     *     @OA\Property(property="sublocality_level_1", type="string", example="MBP"),
     *      @OA\Property(property="sublocality_level_2", type="string", example="Mahape"),
     *     @OA\Property(property="city_id", type="integer", example="1"),
     *     @OA\Property(property="state_id", type="integer", example="1"),
     *     @OA\Property(property="lat", type="integer", example="1"),
     *     @OA\Property(property="long", type="integer", example="1"),
     *       @OA\Property(property="postal_code", type="integer", example="421203"),
     *       @OA\Property(property="clinic_name", type="string", example="clinic name"),
     *  ),
     * ),
     * @OA\Response(
     *         response="200",
     *         description="Returns doctors data",
     * ),
     * @OA\Response(
     *    response=400,
     *    description="information not found response" 
     * )
     * )
     */
    public function updateaddress($esteblishmentusermapID, Request $request)
    {
        $data = $request->input();
        $medical_establishment_id = Medicalestablishmentsmedicalusermap::where(array("id" => $esteblishmentusermapID))->first()->medical_establishment_id;
        $id = $medical_establishment_id;
        $Medicaldata = Medicalestablishmentsmedicalusermap::where(array("medical_establishment_id" => $id, 'role' => 'doctor'))->first();
        $this->updateaddressinfo($esteblishmentusermapID, $data);
        return response()->json(['status' => "success", 'addressinfo' => $this->addressinfo($esteblishmentusermapID), 'id' => $medical_establishment_id, 'handle' => $_ENV['APP_HANDLE'] . $Medicaldata->handle], 200);
    }
    public function updateaddressinfo($esteblishmentusermapID, $data)
    {
        $medical_establishment_id = Medicalestablishmentsmedicalusermap::where(array("id" => $esteblishmentusermapID))->first()->medical_establishment_id;
        //var_dump($medical_establishment_id);die;
        $id = $medical_establishment_id;
        $Medicaldata = Medicalestablishmentsmedicalusermap::where(array("medical_establishment_id" => $id, 'role' => 'doctor'))->first();
        if (!isset($Medicaldata->medical_user_id)) {
            return response()->json(['status' => "fail", 'msg' => "Medical establishment didn't found"], 200);
        }
        $establishment = Medicalestablishments::find($Medicaldata->medical_establishment_id);
        $address = DoctorAddressDetail::find($establishment->address_id);
        $flag = 0;
        if (!isset($address->address_id)) {
            $address = new DoctorAddressDetail();
            $flag = 1;
        }
        $address->sublocality_level_1 = $data['sublocality_level_1'];
        $address->sublocality_level_2 = $data['sublocality_level_2'];
        $address->city = $data['city_id'];
        $address->state_id = $data['state_id'];
        $address->postal_code = $data['postal_code'];
        $address->longitude = $data['long'];
        $address->latitude = $data['lat'];
        $address->clinic_name = $data['clinic_name'];



        $address->save();
        if ($flag == 1)
            Medicalestablishments::where('id', $Medicaldata->medical_establishment_id)->update(['address_id' => $address->id]);
    }

    public function addressinfo($esteblishment_user_map_id)
    {
        //var_dump($esteblishment_user_map_id);
        //die;
        $tabdata = DB::table('docexa_medical_establishments')
            ->Join('docexa_medical_establishments_medical_user_map', 'docexa_medical_establishments_medical_user_map.medical_establishment_id', '=', 'docexa_medical_establishments.id')
            ->Join('docexa_addresses', 'docexa_addresses.id', 'docexa_medical_establishments.address_id')
            ->select('docexa_addresses.clinic_name', 'docexa_addresses.latitude', 'docexa_addresses.longitude', 'docexa_addresses.address', 'docexa_addresses.sublocality_level_1', 'docexa_addresses.sublocality_level_2', 'docexa_addresses.city', 'docexa_addresses.state_id', 'docexa_addresses.postal_code', 'docexa_medical_establishments_medical_user_map.id', 'docexa_medical_establishments_medical_user_map.handle', 'docexa_medical_establishments_medical_user_map.medical_establishment_id', 'docexa_medical_establishments_medical_user_map.medical_user_id')
            ->where('docexa_medical_establishments_medical_user_map.id', $esteblishment_user_map_id)
            ->get()->first();
        // var_dump($tabdata);
        //die;
        if (isset($tabdata->medical_establishment_id)) {
            $response = [
                'esteblishment_id' => $tabdata->medical_establishment_id,
                'esteblishment_user_map_id' => $tabdata->id,
                'medical_user_id' => $tabdata->medical_user_id,
                'handle' => $_ENV['APP_HANDLE'] . $tabdata->handle,
                'sublocality_level_1' => $tabdata->sublocality_level_1,
                'sublocality_level_2' => $tabdata->sublocality_level_2,
                'city_id' => (string)$tabdata->city,
                'address' => $tabdata->address,
                'clinic_name' => $tabdata->clinic_name,
                'lat' => $tabdata->latitude,
                'long' => $tabdata->longitude,

                'city' => ($tabdata->city != null) ? (DB::table('city_master')->where('id', $tabdata->city)->first()->name) : "",
                'state_id' => $tabdata->state_id,
                'state' => ($tabdata->state_id != null) ? (DB::table('docexa_state_master')->where('state_id', $tabdata->state_id)->first()->state_name) : "",
                'postal_code' => $tabdata->postal_code,
            ];
            return $response;
        } else {
            return [];
        }
    }
    /**
     * @OA\Get(
     * path="/search/pincode/{pincode}",
     * summary="search pincode",
     * description="",
     * operationId="searchpincode",
     * tags={"Public"},
     *  @OA\Parameter(
     *         name="pincode",
     *         in="path",
     *         description="pincode",
     *         required=true,
     *         example=421204,
     *         @OA\Schema(type="number")
     *     ),
     * @OA\Response(
     *         response="200",
     *         description="Returns pincode data",
     * ),
     * @OA\Response(
     *    response=400,
     *    description="information not found response" 
     * )
     * )
     */
    public function getaddressbypincode($pincode)
    {
        $api_url = "https://api.postalpincode.in/pincode/" . urlencode($pincode);

        if ($api_url) {
            $url = $api_url;
            $ch = curl_init($url);
            curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: application/json'));
            curl_setopt($ch, CURLOPT_URL, $url);
            curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
            $output = curl_exec($ch);
            $info = curl_getinfo($ch);
            $http_result = $info['http_code'];
            curl_close($ch);
            return response()->json(['status' => 'success', 'data' => json_decode($output)], 200);
        }
        return response()->json(['status' => 'failure'], 404);
    }
    /**
     * @OA\Get(
     * path="/establishments/users/{esteblishmentusermapID}/bookingslots/{clinicID}",
     * summary="get doctor data",
     * description="",
     * operationId="getbookingslots",
     * tags={"Profile","Doctor Booking Slots"},
     * @OA\Parameter(
     *         name="esteblishmentusermapID",
     *         in="path",
     *         description="esteblishmentusermapID",
     *         required=true,
     *         example=65960,
     *         @OA\Schema(type="number")
     *     ),
     * @OA\Parameter(
     *         name="clinicID",
     *         in="path",
     *         description="clinicID",
     *         required=true,
     *         example=65960,
     *         @OA\Schema(type="number")
     *     ),
     * @OA\Response(
     *         response="200",
     *         description="Returns doctors data",
     * ),
     * @OA\Response(
     *    response=400,
     *    description="information not found response" 
     * )
     * )
     */
    public function bookingslots($esteblishmentusermapID, $clinicID)
    {

        $slots = Slotmaster::where(array("user_map_id" => $esteblishmentusermapID, 'clinicID' => $clinicID))->get();
        $data = array();
        foreach ($slots as $slot) {
            $slotmaster = new Slotmaster();
            $start_time = new DateTime(
                date('Y-m-d H:i', strtotime($slot->start_time))
            );
            $end_time = new DateTime(
                date('Y-m-d H:i', strtotime($slot->end_time))
            );
            $start_time = $start_time->format('H:i');
            $end_time = $end_time->format('H:i');
            if ((int)$slot->slot_size) {
                $slot->slot = $slotmaster->selectTimesofDaydefault($start_time, $end_time, $slot->slot_size . "  minutes");
                $data[] = $slot;
            }
        }
        return response()->json(['status' => "success",  'data' => $data], 200);
    }
    /**
     * @OA\Put(
     *  path="/establishments/users/{esteblishmentusermapID}/bookingslots",
     *  summary="update doctor data",
     *  description="",
     *  operationId="updatebookingslots",
     *  tags={"Profile","Doctor Booking Slots"},
     *  @OA\Parameter(
     *      name="esteblishmentusermapID",
     *      in="path",
     *      description="esteblishmentusermapID",
     *      required=true,
     *      example=65960,
     *      @OA\Schema(type="number")
     *  ),
     *  @OA\RequestBody(
     *  required=true,
     *  description="Pass slot details",
     *  @OA\JsonContent(
     *      type="object",
     *      @OA\Property(
     *          property="slots",
     *          type="array",
     * example={{
     *                 "user_map_id":65960,
     *                  "start_time": "16:00:00",
     *                  "end_time": "19:00:00",
     *                  "slot_size": "5",
     *                  "clinicID": "5",
     *                  "day_id": "1",
     *                }, {
     *                  "user_map_id":65960,
     *                  "start_time": "08:00:00",
     *                  "end_time": "13:00:00",
     *                  "slot_size": "15",
     *                  "clinicID": "5",
     *                  "day_id": "2"
     *                }},
     *          @OA\Items(
     *              @OA\Property(property="user_map_id", type="integer", example="65960"),
     *              @OA\Property(property="start_time", type="string", example="08:00:00"),
     *              @OA\Property(property="end_time", type="string", example="23:00:00"),
     *              @OA\Property(property="slot_size", type="integer", example="15"),
     *              @OA\Property(property="clinicID", type="integer", example="clinicID"),
     *              @OA\Property(property="day_id", type="integer", example="1")
     *          ),
     *          @OA\Items(  
     *              @OA\Property(property="user_map_id", type="integer", example="65960"),
     *              @OA\Property(property="start_time", type="string", example="08:00:00"),
     *              @OA\Property(property="end_time", type="string", example="23:00:00"),
     *              @OA\Property(property="slot_size", type="integer", example="15"),
     *              @OA\Property(property="clinicID", type="integer", example="clinicID"),
     *              @OA\Property(property="day_id", type="integer", example="1")
     *          ),
     *      ),
     *  ),
     * ),
     * @OA\Response(
     *         response="200",
     *         description="Returns doctors data",
     * ),
     * @OA\Response(
     *    response=400,
     *    description="information not found response" 
     * )
     * )
     */
    public function updatebookingslots($esteblishmentusermapID, Request $request)
    {
        $data = $request->all();
        //Slotmaster::where(array("user_map_id" => $esteblishmentusermapID))->delete();
        foreach ($data['slots'] as $slots) {
            if ((int)$slots['slot_size']) {
                $insert[] = $slots;
            }
        }
        Slotmaster::insert($insert);
        return response()->json(['status' => "success"], 200);
    }
    /**
     * @OA\Delete(
     *  path="/establishments/users/{esteblishmentusermapID}/bookingslots/{id}",
     *  summary="delete slot data",
     *  description="",
     *  operationId="deletebookingslots",
     *  tags={"Profile","Doctor Booking Slots"},
     *  @OA\Parameter(
     *      name="esteblishmentusermapID",
     *      in="path",
     *      description="esteblishmentusermapID",
     *      required=true,
     *      example=65960,
     *      @OA\Schema(type="number")
     *  ),
     *  @OA\Parameter(
     *      name="id",
     *      in="path",
     *      description="id = 0 if all delete",
     *      required=true,
     *      example=59508,
     *      @OA\Schema(type="number")
     *  ),
     * @OA\Response(
     *         response="200",
     *         description="Returns doctors data",
     * ),
     * @OA\Response(
     *    response=400,
     *    description="information not found response" 
     * )
     * )
     */
    public function deletebookingslots($esteblishmentusermapID, $id = 0)
    {
        $slot = Slotmaster::where(array("user_map_id" => $esteblishmentusermapID))->first();
        if ($id == 0)
            Slotmaster::where(array("user_map_id" => $esteblishmentusermapID))->delete();
        else
            Slotmaster::where(array("user_map_id" => $esteblishmentusermapID, "id" => $id))->delete();
        return $this->bookingslots($esteblishmentusermapID, $slot->clinic_id);
    }
    /**
     * @OA\Get(
     * path="/establishments/users/{esteblishmentusermapID}/profilesettings",
     * summary="get doctor data",
     * description="",
     * operationId="getprofilesettings",
     * tags={"Profile"},
     * @OA\Parameter(
     *         name="esteblishmentusermapID",
     *         in="path",
     *         description="esteblishmentusermapID",
     *         required=true,
     *         example=65960,
     *         @OA\Schema(type="number")
     *     ),
     * @OA\Response(
     *         response="200",
     *         description="Returns doctors data",
     * ),
     * @OA\Response(
     *    response=400,
     *    description="information not found response" 
     * )
     * )
     */
    public function getprofilesettings($esteblishmentusermapID)
    {

        try {
            $medical_establishment = Medicalestablishmentsmedicalusermap::where(array("id" => $esteblishmentusermapID))->first();
            if (isset($medical_establishment->medical_establishment_id))
                $medical_establishment_id = $medical_establishment->medical_establishment_id;
            else
                return response()->json(['status' => "fail", 'message' => "user map not found"], 400);
            $Medicaldata = Medicalestablishmentsmedicalusermap::where(array("medical_establishment_id" => $medical_establishment_id, 'role' => 'doctor'))->first();
            $tabdata = DB::table('docexa_medical_establishments')
                ->Join('docexa_medical_establishments_medical_user_map', 'docexa_medical_establishments_medical_user_map.medical_establishment_id', '=', 'docexa_medical_establishments.id')
                ->Join('docexa_doctor_master', 'docexa_medical_establishments_medical_user_map.medical_user_id', '=', 'docexa_doctor_master.pharmaclient_id')
                ->select('docexa_doctor_master.mobile_no', 'docexa_doctor_master.email_id', 'docexa_doctor_master.gender_id', 'docexa_doctor_master.image', 'docexa_doctor_master.pharmaclient_name', 'docexa_doctor_master.last_name', 'docexa_doctor_master.pharmaclient_image', 'docexa_medical_establishments_medical_user_map.id', 'docexa_medical_establishments_medical_user_map.handle', 'docexa_medical_establishments_medical_user_map.medical_establishment_id', 'docexa_medical_establishments_medical_user_map.medical_user_id')
                ->where('docexa_medical_establishments_medical_user_map.id', $esteblishmentusermapID)

                ->get()->first();
            $location = Clinic::where(array("user_map_id" => $esteblishmentusermapID))->first();
            $city = '';
            $address = null;
            $state = '';
            if (isset($location->id)) {
                if (isset($location->cities->name)) {
                    $city = $location->cities->name;
                }
                if (isset($location->states->state_name)) {
                    $state = $location->states->state_name;
                }
                $address = ($location->address && $location->address != null) ? $location->address : null;
            }
            // var_dump($tabdata);die;
            if (isset($tabdata->medical_establishment_id)) {
                $doctor = Doctor::find($tabdata->medical_user_id);
                $response = [
                    'esteblishment_id' => $tabdata->medical_establishment_id,
                    'esteblishment_user_map_id' => $tabdata->id,
                    'medical_user_id' => $tabdata->medical_user_id,
                    'handle' => $_ENV['APP_HANDLE'] . $tabdata->handle,
                    'first_name' => $tabdata->pharmaclient_name,
                    'last_name' => $tabdata->last_name,
                    'mobile_no' => $tabdata->mobile_no,
                    'email' => $tabdata->email_id,
                    'city' => $city,
                    'state' => $state,
                    'address' => $address,
                    'clinic' => Clinic::where(array("user_map_id" => $esteblishmentusermapID))->with(['cities', 'states'])->get(),
                    'profilePicture' => (strpos($tabdata->image, 'docexa_default_image') !== false) ? URL::Asset('upload/doctor/profile/' . $tabdata->image) : $tabdata->image,
                    'gender' => $tabdata->gender_id,
                    'medical_registration_no' => $doctor->medical_registration_no,
                    'mrn_council_year' => $doctor->medical_registration_year,
                    'mrn_council_state_id' => $doctor->medical_registration_state_id,
                    'about_me' => isset($doctor->aboutme->about_me)?$doctor->aboutme->about_me:'',
                    'instagram' => isset($doctor->aboutme->instagram)?$doctor->aboutme->instagram:'',
                    'facebook' => isset($doctor->aboutme->facebook)?$doctor->aboutme->facebook:'',
                    'linkedin' => isset($doctor->aboutme->linkedin)?$doctor->aboutme->linkedin:'',
                    'twitter' => isset($doctor->aboutme->twitter)?$doctor->aboutme->twitter:'',
                    'banner' => isset($doctor->aboutme->cover_img)?$doctor->aboutme->cover_img:'',
                    'youtube' => isset($doctor->aboutme->youtube)?$doctor->aboutme->youtube:'',
                    'video' => isset($doctor->aboutme->video)?$doctor->aboutme->video:'',
                    'education' => isset($doctor->education)?$doctor->education:[],
                    'award' => isset($doctor->award)?$doctor->award:[],
                    'experience' => isset($doctor->experienced)?$doctor->experienced:[],
                    'services' => isset($doctor->service)?$doctor->service:[],
                    'specialization' => isset($doctor->specialization)?$doctor->specialization:[],
                    
                ];
            } else {
                $response = [];
            }
            return response()->json(['status' => "success", 'data' => $response, 'id' => $medical_establishment_id, 'handle' => $_ENV['APP_HANDLE'] . $Medicaldata->handle], 200);
        } catch (\Exception $e) {

            throw new HttpException(500, $e->getMessage());
        }
    }
    /**
     * @OA\Put(
     * path="/establishments/users/{esteblishmentusermapID}/profilesettings",
     * summary="update doctor data",
     * description="",
     * operationId="updateprofilesettings",
     * tags={"Profile"},
     * * @OA\Parameter(
     *         name="esteblishmentusermapID",
     *         in="path",
     *         description="esteblishmentusermapID",
     *         required=true,
     *         example=65960,
     *         @OA\Schema(type="number")
     *     ),
     * @OA\RequestBody(
     *  required=true,
     *  description="Pass doctor details",
     *  @OA\JsonContent(
     *      type="object",
     *     @OA\Property(property="is_user_doctor", type="number", example="1"),
     *     @OA\Property(property="first_name", type="string", example="satish"),
     *     @OA\Property(property="last_name", type="string", example="soni"),
     *     @OA\Property(property="gender", type="integer", example="1"),
     *     @OA\Property(property="doctor_profile_pic", type="file", example=""),
     *     @OA\Property(property="doctor_pic", type="file", example=""),
     *     @OA\Property(property="email", type="text", example="satish.soni@globalspace.in"),
     *     @OA\Property(property="mobile_no", type="text", example="7208613316"),
     *     @OA\Property(property="medical_registration_no", type="string", example="10001"),
     *     @OA\Property(property="medical_registration_year", type="string", example="2000"),
     *     @OA\Property(property="medical_registration_state_id", type="integer", example="1"),
     *     @OA\Property(property="about_me", type="string", example="text"),
     *     @OA\Property(property="facebook", type="string", example="text"),
     *     @OA\Property(property="instagram", type="string", example="text"),
     *     @OA\Property(property="linkedin", type="string", example="text"),
     *     @OA\Property(property="twitter", type="string", example="text"),
     *     @OA\Property(property="youtube", type="string", example="text"),
     *     @OA\Property(property="video", type="string", example="text"),
     *     @OA\Property(property="banner", type="string", example="text"),
     *     @OA\Property(
     *                property="experience",
     *                type="array",
     *                @OA\Items(
     *                      @OA\Property(
     *                         property="hospitalName",
     *                         type="string",
     *                         example=""
     *                      ),
     *                      @OA\Property(
     *                         property="fromDate",
     *                         type="string",
     *                         example=""
     *                      ),
     *                      @OA\Property(
     *                         property="toDate",
     *                         type="string",
     *                         example=""
     *                      ),
     *                      @OA\Property(
     *                         property="designation",
     *                         type="number",
     *                         example=""
     *                      ),
     *                ),
     *      ),
     *     @OA\Property(
     *                property="specialization",
     *                type="array",
     *                @OA\Items(
     *                      @OA\Property(
     *                         property="specialization",
     *                         type="string",
     *                         example=""
     *                      ),
     *                ),
     *      ),
     *     @OA\Property(
     *                property="services",
     *                type="array",
     *                @OA\Items(
     *                      @OA\Property(
     *                         property="services",
     *                         type="string",
     *                         example=""
     *                      ),
     *                ),
     *      ),
     *     @OA\Property(
     *                property="education",
     *                type="array",
     *                @OA\Items(
     *                      @OA\Property(
     *                         property="degree",
     *                         type="string",
     *                         example=""
     *                      ),
     *                      @OA\Property(
     *                         property="institute",
     *                         type="string",
     *                         example=""
     *                      ),
     *                      @OA\Property(
     *                         property="year",
     *                         type="string",
     *                         example=""
     *                      ),
     *                ),
     *      ),
     *     @OA\Property(
     *                property="award",
     *                type="array",
     *                @OA\Items(
     *                      @OA\Property(
     *                         property="awardName",
     *                         type="string",
     *                         example=""
     *                      ),
     *                      @OA\Property(
     *                         property="year",
     *                         type="string",
     *                         example=""
     *                      ),
     *                ),
     *      ),
     *      ),
     * ),
     * @OA\Response(
     *         response="200",
     *         description="Returns doctors data",
     * ),
     * @OA\Response(
     *    response=400,
     *    description="information not found response" 
     * )
     * )
     */
    public function updateprofilesettings($esteblishmentusermapID, Request $request)
    {
//to test
        $data = $request->input();
        $medical_establishment_id = Medicalestablishmentsmedicalusermap::where(array("id" => $esteblishmentusermapID))->first()->medical_establishment_id;
        //var_dump($medical_establishment_id);die;
        $id = $medical_establishment_id;
        $Medicaldata = Medicalestablishmentsmedicalusermap::where(array("medical_establishment_id" => $id, 'role' => 'doctor'))->first();
        if (!isset($Medicaldata->medical_user_id)) {
            return response()->json(['status' => "fail", 'msg' => "Medical establishment didn't found"], 200);
        }

        $doctor = Doctor::find($Medicaldata->medical_user_id);

        if (isset($data['doctor_profile_pic']))
            $doctor->pharmaclient_image = $data['doctor_profile_pic'];
        if (isset($data['doctor_pic']) && $data['doctor_pic'] != null)
            $doctor->image = $data['doctor_pic'];
        $doctor->pharmaclient_name = $data['first_name'];
        $doctor->last_name = $data['last_name'];
        $doctor->email_id = $data['email'];
        $doctor->gender_id = $data['gender'];
        $doctor->mobile_no = isset($data['mobile_no']) ? $data['mobile_no'] : '';
        $doctor->medical_registration_no = $data['medical_registration_no'];
        $doctor->mrn_council_year = $data['medical_registration_year'];
        $doctor->mrn_council_state_id = $data['medical_registration_state_id'];
        $doctor->save();

        $about = DoctorAbout::firstOrNew(array('pharmaclient_id' => $Medicaldata->medical_user_id));
        $about->about_me = $data['about_me'];
        $about->facebook = $data['facebook'];
        $about->instagram = $data['instagram'];
        $about->linkedin = $data['linkedin'];
        $about->twitter = $data['twitter'];
        $about->youtube = $data['youtube'];
        $about->video = $data['video'];
        $about->cover_img = $data['banner'];
        $about->save();

        if (isset($data['experience'])) {
            foreach ($data['experience'] as $exp) {
                $experience = new DoctorExperience();
                $experience->pharmaclient_id = $Medicaldata->medical_user_id;
                $experience->organization = $exp['hospitalName'];
                $experience->from_date = $exp['fromDate'];
                $experience->to_date = $exp['toDate'];
                $experience->designation = $exp['designation'];
                $experience->save();
            }
        }

        if (isset($data['services'])) {
            DoctorServices::where('pharmaclient_id', $Medicaldata->medical_user_id)->delete();
            foreach ($data['services'] as $service) {
                $services = new DoctorServices();
                $services->pharmaclient_id = $Medicaldata->medical_user_id;
                $services->services = $service['services'];
                $services->save();
            }
        }

        if (isset($data['specialization'])) {
            DoctorSpecialization::where('pharmaclient_id', $Medicaldata->medical_user_id)->delete();
            foreach ($data['specialization'] as $special) {
                $specialization = new DoctorSpecialization();
                $specialization->pharmaclient_id = $Medicaldata->medical_user_id;
                $specialization->specialization = $special['specialization'];
                $specialization->save();
            }
        }

        if (isset($data['award'])) {
            foreach ($data['award'] as $award) {
                $awardtab = new DoctorAward();
                $awardtab->pharmaclient_id = $Medicaldata->medical_user_id;
                $awardtab->award_name = $award['awardName'];
                $awardtab->year = $award['year'];
                $awardtab->save();
            }
        }

        if (isset($data['education'])) {
            foreach ($data['education'] as $edu) {
                $education = new DoctorEducation();
                $education->pharmaclient_id = $Medicaldata->medical_user_id;
                $education->qualification = $edu['degree'];
                $education->university = $edu['institute'];
                $education->year = $edu['year'];
                $education->save();
            }
        }


        return $this->getprofilesettings($esteblishmentusermapID);
    }
    /**
     * @OA\Delete(
     *  path="/establishments/users/{esteblishmentusermapID}/profilesettings/awards/{id}",
     *  summary="delete award data",
     *  description="",
     *  operationId="deleteawards",
     *  tags={"Profile"},
     *  @OA\Parameter(
     *      name="esteblishmentusermapID",
     *      in="path",
     *      description="esteblishmentusermapID",
     *      required=true,
     *      example=65960,
     *      @OA\Schema(type="number")
     *  ),
     *  @OA\Parameter(
     *      name="id",
     *      in="path",
     *      description="",
     *      required=true,
     *      example=1,
     *      @OA\Schema(type="number")
     *  ),
     * @OA\Response(
     *         response="200",
     *         description="Returns doctors data",
     * ),
     * @OA\Response(
     *    response=400,
     *    description="information not found response" 
     * )
     * )
     */
    public function deleteawards($esteblishmentusermapID,$id)
    {
        $awardtab = DoctorAward::find($id)->delete();
        return $this->getprofilesettings($esteblishmentusermapID);
    }
    /**
     * @OA\Delete(
     *  path="/establishments/users/{esteblishmentusermapID}/profilesettings/experience/{id}",
     *  summary="exp  data",
     *  description="",
     *  operationId="deleteexp",
     *  tags={"Profile"},
     *  @OA\Parameter(
     *      name="esteblishmentusermapID",
     *      in="path",
     *      description="esteblishmentusermapID",
     *      required=true,
     *      example=65960,
     *      @OA\Schema(type="number")
     *  ),
     *  @OA\Parameter(
     *      name="id",
     *      in="path",
     *      description="",
     *      required=true,
     *      example=1,
     *      @OA\Schema(type="number")
     *  ),
     * @OA\Response(
     *         response="200",
     *         description="Returns doctors data",
     * ),
     * @OA\Response(
     *    response=400,
     *    description="information not found response" 
     * )
     * )
     */
    public function deleteexp($esteblishmentusermapID,$id)
    {
        $exp = DoctorExperience::find($id)->delete();
        return $this->getprofilesettings($esteblishmentusermapID);
    }
    /**
     * @OA\Delete(
     *  path="/establishments/users/{esteblishmentusermapID}/profilesettings/education/{id}",
     *  summary="delete education data",
     *  description="",
     *  operationId="deleteedu",
     *  tags={"Profile"},
     *  @OA\Parameter(
     *      name="esteblishmentusermapID",
     *      in="path",
     *      description="esteblishmentusermapID",
     *      required=true,
     *      example=65960,
     *      @OA\Schema(type="number")
     *  ),
     *  @OA\Parameter(
     *      name="id",
     *      in="path",
     *      description="",
     *      required=true,
     *      example=1,
     *      @OA\Schema(type="number")
     *  ),
     * @OA\Response(
     *         response="200",
     *         description="Returns doctors data",
     * ),
     * @OA\Response(
     *    response=400,
     *    description="information not found response" 
     * )
     * )
     */
    public function deleteedu($esteblishmentusermapID,$id)
    {
        $edu = DoctorEducation ::find($id)->delete();
        return $this->getprofilesettings($esteblishmentusermapID);
    }
}
