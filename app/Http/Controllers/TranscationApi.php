<?php

/**
 * Docexa Doctor Micro Service API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: satish.soni@globalspace.in
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

namespace App\Http\Controllers;

use App\AppointmentDetails;
use Illuminate\Http\Response;
use Illuminate\Http\Request;
use App\Transcation;
use DB;
use App\Doctor;
use Illuminate\Support\Facades\Validator;
use Carbon\Carbon;



use Log;

class TranscationApi extends Controller
{

    /**
     * Constructor
     */
    public function __construct()
    {
    }

    /**
     * Operation sync
     *
     * @return Http response
     */
    /**

     * @OA\Get(
     * path="/establishments/users/{esteblishmentusermapID}/transcation/paid",
     * tags={"Transcation"},
     *      @OA\Parameter(
     *         name="esteblishmentusermapID",
     *         in="path",
     *         description="esteblishmentusermapID",
     *         required=true,
     *         example="6257",
     *         @OA\Items(type="number")
     *     ),
     *      @OA\Parameter(
     *         name="s",
     *         in="query",
     *         description="all",
     *         required=false,
     *         example="all",
     *         @OA\Items(type="string")
     *     ),
     *      @OA\Parameter(
     *         name="order",
     *         in="query",
     *         description="order by month or date",
     *         required=false,
     *         example="date",
     *         @OA\Items(type="string")
     *     ),
     *      @OA\Parameter(
     *         name="date",
     *         in="query",
     *         description="date range",
     *         example="2021/12/10-2021/12/10",
     *         required=false,
     *         @OA\Items(type="string")
     *     ),
     * @OA\Response(
     *         response="400",
     *         description="Error: Bad request. required parameters is not supplied.", 
     *     ),
     * )
     */
    public function paid($esteblishmentusermapID, Request $request)
    {
        $request_tag = $request->all();
        //var_dump($request_tag);die;
        $query = DB::table('docexa_patient_booking_details As dpbd')
            ->join('docexa_patient_credit_history As dpch', 'dpch.credit_history_id', 'dpbd.credit_history_id', 'left')
            ->select("dpbd.patient_name", "dpbd.bookingidmd5 as booking_id", "cost", "dpch.transaction_id", "dpbd.status", "dpbd.payment_mode", "dpbd.created_by")
            ->selectRaw("date_format(dpbd.created_date,'%d %b %Y %h:%i %p') as created_date")
            ->selectRaw("date_format(dpbd.created_date,'%b %Y') as order_date");
        if (isset($request_tag['date']) && $request_tag['date']!="") {
            $date = explode("-",$request_tag['date']);
            $from = date($date[0]); 
            $to = date($date[1]);
            $query->whereBetween(DB::raw('date(dpbd.created_date)'),[$from, $to]);
        }
        if (isset($request_tag['s'])) {
            $query->where('dpbd.patient_name','like',$request_tag['s'].'%');
        }
        $trans = $query->where('dpbd.user_map_id', $esteblishmentusermapID)->orderBy('dpbd.created_date', 'DESC')->get();
        //var_dump($trans);die;
        if (!count($trans) > 0)
            return response()->json(['status' => 'fail', 'message' => "No record found"], 200);
        if (isset($request_tag['order']) && $request_tag['order'] == 'month') {
            foreach ($trans as $tran) {
                $order[$tran->order_date][] = $tran;
            }
            foreach ($order as $key => $or) {
                $push['key'] = $key;
                $push['data'] = $or;
                $orders[] = $push; 
            }
            $data['order'] = $orders;
        } else {
            $data['order'] = $trans;
        }

        $data['total'] = 0;
        foreach ($trans as $tran) {
            $data['total'] += $tran->cost;
        }
        return response()->json(['status' => 'success', 'data' => $data], 200);
    }
    /**

     * @OA\Get(
     * path="/establishments/users/{esteblishmentusermapID}/transcation/wallet/paid",
     * tags={"Transcation"},
     *      @OA\Parameter(
     *         name="esteblishmentusermapID",
     *         in="path",
     *         description="esteblishmentusermapID",
     *         required=true,
     *         example="6257",
     *         @OA\Items(type="number")
     *     ),
     *      @OA\Parameter(
     *         name="s",
     *         in="query",
     *         description="all",
     *         required=false,
     *         example="all",
     *         @OA\Items(type="string")
     *     ),
     *      @OA\Parameter(
     *         name="order",
     *         in="query",
     *         description="order by month or date",
     *         required=false,
     *         example="date",
     *         @OA\Items(type="string")
     *     ),
     *      @OA\Parameter(
     *         name="date",
     *         in="query",
     *         description="date range",
     *         example="2021/12/10-2021/12/10",
     *         required=false,
     *         @OA\Items(type="string")
     *     ),
     * @OA\Response(
     *         response="400",
     *         description="Error: Bad request. required parameters is not supplied.", 
     *     ),
     * )
     */
    public function walletpaid($esteblishmentusermapID, Request $request)
    {
        $request_tag = $request->all();
        //var_dump($request_tag);die;
        $query = DB::table('docexa_patient_booking_details As dpbd')
            ->join('docexa_patient_credit_history As dpch', 'dpch.credit_history_id', 'dpbd.credit_history_id', 'left')
            ->select("dpbd.patient_name", "dpbd.bookingidmd5 as booking_id", "cost", "dpch.transaction_id", "dpbd.status", "dpbd.payment_mode", "dpbd.created_by")
            ->selectRaw("date_format(dpbd.created_date,'%d %b %Y %h:%i %p') as created_date")
            ->selectRaw("date_format(dpbd.created_date,'%b %Y') as order_date");
        if (isset($request_tag['date']) && $request_tag['date']!="") {
            $date = explode("-",$request_tag['date']);
            $from = date($date[0]); 
            $to = date($date[1]);
            $query->whereBetween(DB::raw('date(dpbd.created_date)'),[$from, $to]);
        }
        if (isset($request_tag['s'])) {
            $query->where('dpbd.patient_name','like',$request_tag['s'].'%');
        }
        $trans = $query->where('dpbd.user_map_id', $esteblishmentusermapID)->orderBy('dpbd.created_date', 'DESC')->get();
        //var_dump($trans);die;
        if (!count($trans) > 0)
            return response()->json(['status' => 'fail', 'message' => "No record found"], 200);
        if (isset($request_tag['order']) && $request_tag['order'] == 'month') {
            foreach ($trans as $tran) {
                $order[$tran->order_date][] = $tran;
            }
            foreach ($order as $key => $or) {
                $push['key'] = $key;
                $push['data'] = $or;
                $orders[] = $push; 
            }
            $data['order'] = $orders;
        } else {
            $data['order'] = $trans;
        }

        $data['total'] = 0;
        foreach ($trans as $tran) {
            $data['total'] += $tran->cost;
        }
        return response()->json(['status' => 'success', 'data' => $data], 200);
    }
    /**

     * @OA\Get(
     * path="/establishments/users/{esteblishmentusermapID}/transcation/refund",
     * tags={"Transcation"},
     *      @OA\Parameter(
     *         name="esteblishmentusermapID",
     *         in="path",
     *         description="esteblishmentusermapID",
     *         required=true,
     *         example="6257",
     *         @OA\Items(type="number")
     *     ),
     *      @OA\Parameter(
     *         name="s",
     *         in="query",
     *         description="all",
     *         required=false,
     *         example="all",
     *         @OA\Items(type="string")
     *     ),
     *      @OA\Parameter(
     *         name="order",
     *         in="query",
     *         description="order by month or date",
     *         required=false,
     *         example="date",
     *         @OA\Items(type="string")
     *     ),
     *      @OA\Parameter(
     *         name="date",
     *         in="query",
     *         description="date range",
     *         example="2021/12/10-2021/12/10",
     *         required=false,
     *         @OA\Items(type="string")
     *     ),
     * @OA\Response(
     *         response="400",
     *         description="Error: Bad request. required parameters is not supplied.", 
     *     ),
     * )
     */
    public function refund($esteblishmentusermapID, Request $request)
    {
        $request_tag = $request->all();
        $query = DB::table('docexa_patient_booking_details As dpbd')
            ->join('docexa_patient_credit_history As dpch', 'dpch.credit_history_id', 'dpbd.credit_history_id', 'left')
            ->select("dpbd.patient_name", "dpbd.bookingidmd5 as booking_id", "cost", "dpch.transaction_id", "dpbd.status", "dpbd.payment_mode", "dpbd.created_by")
            ->selectRaw("date_format(dpbd.created_date,'%d %b %Y %h:%i %p') as created_date")
            ->selectRaw("date_format(dpbd.created_date,'%b %Y') as order_date");
            $query->where(function($query){
                $query->where('dpbd.status', 3);
                $query->orwhere('dpbd.status', 6);
            });
            if (isset($request_tag['date']) && $request_tag['date']!="") {
                $date = explode("-",$request_tag['date']);
                $from = date($date[0]);
                $to = date($date[1]);
                $query->whereBetween(DB::raw('date(dpbd.created_date)'),[$from, $to]);
            }
            if (isset($request_tag['s'])) {
                $query->where('dpbd.patient_name','like',$request_tag['s'].'%');
            }
            $trans = $query->where('dpbd.user_map_id', $esteblishmentusermapID)->orderBy('dpbd.created_date', 'DESC')->get();

        if (!count($trans) > 0)
            return response()->json(['status' => 'fail', 'message' => "No record found"], 200);
        if (isset($request_tag['order']) && $request_tag['order'] == 'month') {
            foreach ($trans as $tran) {
                $order[$tran->order_date][] = $tran;
            }
            foreach ($order as $key => $or) {
                $push['key'] = $key;
                $push['data'] = $or;
                $orders[] = $push; 
            }
            $data['order'] = $orders;
        } else {
            $data['order'] = $trans;
        }
        $data['total'] = 0;
        foreach ($trans as $tran) {
            $data['total'] += $tran->cost;
        }
        return response()->json(['status' => 'success', 'data' => $data], 200);
    }
    /**

     * @OA\Get(
     * path="/establishments/users/{esteblishmentusermapID}/transcation/withdraw",
     * tags={"Transcation"},
     *      @OA\Parameter(
     *         name="esteblishmentusermapID",
     *         in="path",
     *         description="esteblishmentusermapID",
     *         required=true,
     *         example="6257",
     *         @OA\Items(type="number")
     *     ),
     *      @OA\Parameter(
     *         name="s",
     *         in="query",
     *         description="all",
     *         required=false,
     *         example="all",
     *         @OA\Items(type="string")
     *     ),
     *      @OA\Parameter(
     *         name="order",
     *         in="query",
     *         description="order by month or date",
     *         required=false,
     *         example="date",
     *         @OA\Items(type="string")
     *     ),
     *      @OA\Parameter(
     *         name="date",
     *         in="query",
     *         description="date range",
     *         example="2021/12/10-2021/12/10",
     *         required=false,
     *         @OA\Items(type="string")
     *     ),
     * @OA\Response(
     *         response="400",
     *         description="Error: Bad request. required parameters is not supplied.", 
     *     ),
     * )
     */
    public function withdraw($esteblishmentusermapID, Request $request)
    {
        $request_tag = $request->all();
        $query = DB::table('docexa_patient_booking_details As dpbd')
            ->join('docexa_patient_credit_history As dpch', 'dpch.credit_history_id', 'dpbd.credit_history_id', 'left')
            ->select("dpbd.patient_name", "dpbd.bookingidmd5 as booking_id", "cost", "dpch.transaction_id", "dpbd.status", "dpbd.payment_mode", "dpbd.created_by")
            ->selectRaw("date_format(dpbd.created_date,'%d %b %Y %h:%i %p') as created_date")
            ->selectRaw("date_format(dpbd.created_date,'%b %Y') as order_date");
            $query->where(function($query){
                $query->where('dpbd.status', 4);
            });
            if (isset($request_tag['date']) && $request_tag['date']!="") {
                $date = explode("-",$request_tag['date']);
                $from = date($date[0]);
                $to = date($date[1]);
                $query->whereBetween(DB::raw('date(dpbd.created_date)'),[$from, $to]);
            }
            if (isset($request_tag['s'])) {
                $query->where('dpbd.patient_name','like',$request_tag['s'].'%');
            }
            $trans = $query->where('dpbd.user_map_id', $esteblishmentusermapID)->orderBy('dpbd.created_date', 'DESC')->get();

        if (!count($trans) > 0)
            return response()->json(['status' => 'fail', 'message' => "No record found"], 200);
        if (isset($request_tag['order']) && $request_tag['order'] == 'month') {
            foreach ($trans as $tran) {
                $order[$tran->order_date][] = $tran;
            }
            foreach ($order as $key => $or) {
                $push['key'] = $key;
                $push['data'] = $or;
                $orders[] = $push; 
            }
            $data['order'] = $orders;
        } else {
            $data['order'] = $trans;
        }
        $data['withdraw'] = 0;
        $data['pending'] = 0;
        foreach ($trans as $tran) {
            $data['pending'] += $tran->cost;
            
        }
        //$data['pending'] = 100;
        return response()->json(['status' => 'success', 'data' => $data], 200);
    }

    /**
     * @OA\Post(
     * path="/establishments/users/{esteblishmentusermapID}/transcation/withdraw/request",
     * tags={"Transcation"},
     * @OA\RequestBody(
     *  required=true,
     *  description="Pass withdraw details",
     *  @OA\JsonContent(
     *      type="object",
     *      @OA\Property(property="amount", type="number", example="100"),
     *      @OA\Property(property="remark", type="string", example="text")
     *  ),
     * ),
     * @OA\Response(
     *         response="200",
     *         description="Returns success",
     *     ),
     * @OA\Response(
     *         response="400",
     *         description="Error: Bad request. required parameters is not supplied.",    
     *    @OA\JsonContent(
     *       @OA\Property(property="message", type="string", example="user not found")
     *        )
     *     ),
     * )
     */
    public function withdraw_request(Request $request)
    {

        return response()->json(['status' => 'success', 'data' => []], 200);
    }


    public function getTranscationHistoryOfDoctor(Request $request){
       try {

        $validator = Validator::make($request->all(), [
            'user_map_id' => 'required'
         ]);

         if ($validator->fails()) {
            return response()->json(['status' => false, 'message' => 'Validation failed', 'errors' => $validator->errors()], 200);
         }

        $input = $request->all();
        $user_map_id = $input['user_map_id'];
        $from_date = $input['from_date'];
        $to_date = $input['to_date'];

          $doctorUserMap = DB::table('docexa_medical_establishments_medical_user_map')->where('id', $user_map_id)->first()->medical_user_id;
          
        //    $doctorExist = Doctor::find($doctorUserMap);
        $doctorExist = Doctor::where('pharmaclient_id',$doctorUserMap)->first();

           Log::info(['doctor exist' => $doctorExist]);

           if($doctorExist){
            $trasn = new AppointmentDetails();
            $data = $trasn ->getTranscationHistory($user_map_id,$from_date,$to_date);
            if($data){
                return  response()->json(['status' => true , "message" => "Data retrived successfully" , "data" => $data],200);
            }else{
                return  response()->json(['status' => false , "message" => "Data not found" , "data" => []],200);
            }
        }else{
            return  response()->json(['status' => false , "message" => "user not found"],400);
        }
       } catch (\Throwable $th) {
          Log::error(['error' => $th]);
          return response()->json(['status' => false , "message" => "Internal serve error" , "error" => $th->getMessage()],500);
       }
    }

  
    public function updateTranscationDetails(Request $request){
        try {
            $input = $request->only(['user_map_id', 'booking_id', 'transaction_type', 'refund_date' ,'refund_amount']);

        $validator = Validator::make($input, [
            'user_map_id' => 'required',
            'booking_id' => 'required',
        ]);

        if ($validator->fails()) {
            return response()->json(['status' => false, 'message' => $validator->errors()->first()], 400);
        }

            $doctorUserMap = DB::table('docexa_medical_establishments_medical_user_map')
            ->where('id', $input['user_map_id'])
            ->first()
            ->medical_user_id;

            $doctorExist = Doctor::where('pharmaclient_id',$doctorUserMap)->first();
            Log::info(['doctor exist' => $doctorExist]);

            if($doctorExist){
               $creditedOrNot = Db::table('docexa_patient_booking_details')
               ->where('user_map_id',$input['user_map_id'])
               ->where('booking_id' , $input['booking_id'])
               ->first()->credit_history_id;

               if($creditedOrNot){
                // got credit_history_id which states that if the credit history id is avaliable then only the tranction will be exit in the docexa_patient_credit_history_tables
                DB::table('docexa_patient_credit_history')
                ->where('booking_id', $input['booking_id'])
                ->limit(1)
                ->update([
                  'transaction_type' => $input['transaction_type'],
                  'refund_date' => Carbon ::now(),
                  'refund_amount' => $input['refund_amount']                
                ]);

                $data =   DB::table('docexa_patient_credit_history')->where('booking_id',$input['booking_id'])->first();
               
                return response()->json(['status' => true , "message" => "Transaction updated successfully." , "data" => $data],200);
                
            }else{
                return  response()->json(['status' => false , "message"=> "Transaction not found"]);
               }
            }else{
                return  response()->json(['status' => false , "message" => "Doctor not found"],400);
            }

        } catch (\Throwable $th) {
            Log::error(['error' => $th]);
            return response()->json(['status' => false , "message" => "Internal serve error"],500);
        }
    }
}
