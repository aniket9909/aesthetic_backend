<?php

/**
 * Docexa Doctor Micro Service API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: satish.soni@globalspace.in
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

namespace App\Http\Controllers;

use Illuminate\Http\Response;
use Illuminate\Http\Request;
use Carbon\Carbon;
use App\Medicalestablishmentsmedicalusermap;
use App\Speciality;
use App\Slotmaster;
use App\DoctorAbout;
use DateTime;
use DB;
use URL;
class GorogaApi extends Controller
{

    /**
     * Constructor
     */
    public function __construct()
    {
    }
/**
     * @OA\Get(
     * path="/search/doctors",
     * tags={"GOROGA"},
     * @OA\Parameter(
     *         name="results_type",
     *         in="query",
     *         description="doctor",
     *         required=true,
     *         example="doctor",
     *         @OA\Schema(type="string")
     *     ),
     * @OA\Parameter(
     *         name="q",
     *         in="query",
     *         description="search query",
     *         required=true,
     *         example="search query",
     *         @OA\Schema(type="string")
     *     ),
     * @OA\Parameter(
     *         name="city",
     *         in="query",
     *         description="doctor",
     *         required=true,
     *         example="mumbai",
     *         @OA\Schema(type="string")
     *     ),
     * @OA\Response(
     *         response="200",
     *         description="doctor detail",
     *    @OA\JsonContent(
     *       @OA\Property(property="success", type="string", example="success")
     *        )
     *     ),
     * @OA\Response(
     *         response="400",
     *         description="Error: Bad request. required parameters is not supplied.",    
     *    @OA\JsonContent(
     *       @OA\Property(property="error", type="string", example="esteblishment User Map ID not found")
     *        )
     *     ),
     * )
     */
    public function doctor_search(Request $request)
    {
        $data = $request->all();
        $usermap = new Medicalestablishmentsmedicalusermap();
        $tabdatas = DB::table('docexa_doctor_master')
        ->Join('docexa_medical_establishments_medical_user_map', 'docexa_medical_establishments_medical_user_map.medical_user_id', '=', 'docexa_doctor_master.pharmaclient_id')
        // ->Join('docexa_doctor_master', 'docexa_medical_establishments_medical_user_map.medical_user_id', '=', 'docexa_doctor_master.pharmaclient_id')
        // ->Join('docexa_speciality_master', 'docexa_speciality_master.speciality_id', '=', 'docexa_doctor_master.speciality_id')
        // ->select('docexa_doctor_master.mobile_no','docexa_doctor_master.email_id','docexa_doctor_master.medical_registration_no', 'docexa_doctor_master.speciality_id', 'docexa_doctor_master.image', 'docexa_doctor_master.pharmaclient_name', 'docexa_doctor_master.last_name', 'docexa_doctor_master.address', 'docexa_doctor_master.pharmaclient_image', 'docexa_medical_establishments_medical_user_map.id', 'docexa_medical_establishments_medical_user_map.handle', 'docexa_medical_establishments_medical_user_map.medical_establishment_id', 'docexa_medical_establishments_medical_user_map.medical_user_id', 'docexa_medical_establishments.address_id')
        ->where('docexa_doctor_master.is_goroga', true)
        // ->where('docexa_doctor_master.pharmaclient_id', '66060')
        ->get();
        $finaldata = array();
        if (count($tabdatas) > 0) {
            foreach ($tabdatas as $tabdata) {
                $speciality = Speciality::join('docexa_doctor_speciality_relation', 'docexa_doctor_speciality_relation.speciality_id', 'docexa_speciality_master.speciality_id')
                    ->select('docexa_speciality_master.speciality_name')
                    ->where('docexa_doctor_speciality_relation.user_map_id', $tabdata->id)->pluck('docexa_speciality_master.speciality_name')->implode(',');
                $clinic = $usermap->clinicDetails($tabdata->id); 
                $sku = $usermap->skuDetails($tabdata->id);
                
                $data = [
                    'esteblishment_id' => $tabdata->medical_establishment_id,
                    'esteblishment_user_map_id' => $tabdata->id,
                    'medical_user_id' => $tabdata->medical_user_id,
                    'handle' => $_ENV['APP_HANDLE'] . $tabdata->handle,
                    'first_name' => $tabdata->pharmaclient_name,
                    'overall_experience' => $tabdata->overall_experience,
                    'last_name' => $tabdata->last_name,
                    'email' => $tabdata->email_id,
                    'doctor_mr_no' => $tabdata->medical_registration_no,
                    'mobile_no' => $tabdata->mobile_no,
                    'clinic'=>  (count($clinic)>0)?$clinic[0]:"",
                    'sku'=>  (count($sku)>0)?$sku[0]:"",
                    'about' => DoctorAbout::where(array('pharmaclient_id' => $tabdata->medical_user_id))->first(),
                    'speciality'=>$speciality,
                    'bookingslots'=>(count($clinic)>0)?$this->bookingslots($tabdata->id,$clinic[0]->id):"",
                    'profilePicture' => (strpos($tabdata->image, 'docexa_default_image') !== false) ? URL::Asset('upload/doctor/profile/' . $tabdata->image) : $tabdata->image
               ];
                $finaldata[] = $data;
            }
        }
        return response()->json(['status' => "success", 'data' => $finaldata], 200);
    }
    public function bookingslots($esteblishmentusermapID, $clinicID)
    {

        $slots = Slotmaster::where(array("user_map_id" => $esteblishmentusermapID, 'clinicID' => $clinicID))->get();
        $data = array();
        foreach ($slots as $slot) {
            $slotmaster = new Slotmaster();
            $start_time = new DateTime(
                date('Y-m-d H:i', strtotime($slot->start_time))
            );
            $end_time = new DateTime(
                date('Y-m-d H:i', strtotime($slot->end_time))
            );
            $start_time = $start_time->format('H:i');
            $end_time = $end_time->format('H:i');
            if ((int)$slot->slot_size) {
                $slot->slot = $slotmaster->selectTimesofDaydefault($start_time, $end_time, $slot->slot_size . "  minutes");
                $data[] = $slot;
            }
        }
        return $data;
    }
}
