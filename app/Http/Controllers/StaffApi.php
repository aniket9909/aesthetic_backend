<?php

/**
 * Docexa Doctor Micro Service API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: satish.soni@globalspace.in
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

namespace App\Http\Controllers;

use Illuminate\Http\Response;
use Illuminate\Http\Request;
use App\Staff;
use DB;
use Log;
use URL;
use Symfony\Component\HttpKernel\Exception\HttpException;
use Illuminate\Support\Facades\Http;

class StaffApi extends Controller
{

    /**
     * Constructor
     */
    public function __construct()
    {
    }
    /**
     * @OA\Get(
     * path="/establishments/users/{esteblishmentusermapID}/staff",
     * summary="get staff data",
     * description="",
     * operationId="getstaff",
     * tags={"Staff"},
     * @OA\Parameter(
     *         name="esteblishmentusermapID",
     *         in="path",
     *         description="esteblishmentusermapID",
     *         required=true,
     *         example=68179,
     *         @OA\Schema(type="number")
     *     ),
     * @OA\Response(
     *         response="200",
     *         description="Returns doctors data",
     * ),
     * @OA\Response(
     *    response=400,
     *    description="information not found response" 
     * )
     * )
     */
    public function getstaff($esteblishmentusermapID)
    {

        try {
            $data = Staff::where(array("user_map_id" => $esteblishmentusermapID))->get();
            return response()->json(['status' => "success", 'staff' => $data], 200);
        } catch (\Exception $e) {
            throw new HttpException(500, $e->getMessage());
        }
    }
    /**
     * @OA\Put(
     * path="/establishments/users/{esteblishmentusermapID}/staff/{staffID}",
     * summary="edit staff data",
     * description="",
     * operationId="updatestaff",
     * tags={"Staff"},
     * @OA\Parameter(
     *         name="esteblishmentusermapID",
     *         in="path",
     *         description="esteblishmentusermapID",
     *         required=true,
     *         example=68179,
     *         @OA\Schema(type="number")
     *     ),
     * @OA\Parameter(
     *         name="staffID",
     *         in="path",
     *         description="staffID",
     *         required=true,
     *         example=1,
     *         @OA\Schema(type="number")
     *     ),
     * @OA\RequestBody(
     *  required=true,
     *  description="Pass staff details",
     *  @OA\JsonContent(
     *      type="object",
     *     @OA\Property(property="staff_name", type="string", example="1"),
     *     @OA\Property(property="role_id", type="number", example="1"),
     *      @OA\Property(property="mobile", type="string", example="2902902901"),
     *       @OA\Property(property="email", type="string", example="staff@gmail.com"),
     *       @OA\Property(property="photo", type="string", example="url"),
     *       @OA\Property(property="document", type="string", example="url"),
     *      @OA\Property(property="password", type="string", example="welcome"),
     *  ),
     * ),
     * @OA\Response(
     *         response="200",
     *         description="Returns staff data",
     * ),
     * @OA\Response(
     *    response=400,
     *    description="information not found response" 
     * )
     * )
     */
    public function updatestaff($esteblishmentusermapID,$staffID, Request $request)
    {
        $data = $request->all();
        $staff = Staff::find($staffID);
        $staff->staff_name = $data['staff_name'];
        $staff->email = $data['email'];
        $staff->mobile = $data['mobile'];
        $staff->photo = $data['photo'];
        $staff->role_id = $data['role_id'];
        $staff->document = $data['document'];
        $staff->password = $data['password'];
        $staff->save(); 
        $data = Staff::where(array("user_map_id" => $esteblishmentusermapID))->get();
        return response()->json(['status' => "success", 'staff' => $data], 200);

    }
    /**
     * @OA\Put(
     * path="/establishments/users/{esteblishmentusermapID}/staff",
     * summary="add staff data",
     * description="",
     * operationId="addstaff",
     * tags={"Staff"},
     * @OA\Parameter(
     *         name="esteblishmentusermapID",
     *         in="path",
     *         description="esteblishmentusermapID",
     *         required=true,
     *         example=68179,
     *         @OA\Schema(type="number")
     *     ),
     * @OA\RequestBody(
     *  required=true,
     *  description="Pass staff details",
     *  @OA\JsonContent(
     *      type="object",
     *     @OA\Property(property="staff_name", type="string", example="satish"),
     *      @OA\Property(property="mobile", type="string", example="1231231231"),
     *     @OA\Property(property="role_id", type="number", example="1"),
     *       @OA\Property(property="email", type="string", example="staff@gmail.com"),
     *       @OA\Property(property="photo", type="string", example="url"),
     *       @OA\Property(property="document", type="string", example="url"),
     *      @OA\Property(property="password", type="string", example="welcome"),
     *  ),
     * ),
     * @OA\Response(
     *         response="200",
     *         description="Returns staff data",
     * ),
     * @OA\Response(
     *    response=400,
     *    description="information not found response" 
     * )
     * )
     */
    public function addstaff($esteblishmentusermapID, Request $request)
    {
        $data = $request->all();
        $staff = new Staff();
        $staff->user_map_id = $esteblishmentusermapID;
        $staff->staff_name = $data['staff_name'];
        $staff->mobile = $data['mobile'];
        $staff->email = $data['email'];
        $staff->photo = $data['photo'];
        $staff->role_id = $data['role_id'];
        $staff->document = $data['document'];
        $staff->password = $data['password'];
        $staff->save(); 
        $data = Staff::where(array("user_map_id" => $esteblishmentusermapID))->get();
        return response()->json(['status' => "success", 'staff' => $data], 200);

    }
    /**
     * @OA\Delete(
     * path="/establishments/users/{esteblishmentusermapID}/staff/{staffID}",
     * summary="delete staff data",
     * description="",
     * operationId="deletestaff",
     * tags={"Staff"},
     * @OA\Parameter(
     *         name="esteblishmentusermapID",
     *         in="path",
     *         description="esteblishmentusermapID",
     *         required=true,
     *         example=68179,
     *         @OA\Schema(type="number")
     *     ),
     * @OA\Parameter(
     *         name="staffID",
     *         in="path",
     *         description="staffID",
     *         required=true,
     *         example=56898,
     *         @OA\Schema(type="number")
     *     ),
     * @OA\Response(
     *         response="200",
     *         description="Returns clinic data",
     * ),
     * @OA\Response(
     *    response=400,
     *    description="information not found response" 
     * )
     * )
     */
    public function deletestaff($esteblishmentusermapID,$staffID)
    {
        
        $staff = Staff::find($staffID)->delete();
        $data = Staff::where(array("user_map_id" => $esteblishmentusermapID))->get();
        return response()->json(['status' => "success", 'staff' => $data], 200);

    }
}
