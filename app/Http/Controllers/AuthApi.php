<?php

/**
 * Docexa Doctor Micro Service API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: satish.soni@globalspace.in
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

namespace App\Http\Controllers;

use Illuminate\Http\Response;
use Illuminate\Http\Request;
use App\Doctor;
use App\Medicalestablishmentsmedicalusermap;
use App\Medicalestablishments;
use App\User;
use App\Staff;
use App\Otp;
use DB;
use Log;

class AuthApi extends Controller
{

    /**
     * Constructor
     */
    public function __construct()
    {
    }

    /**
     * Operation generateOTP
     *
     * Send OTP.
     *
     * @param number $mobileno send otp  (required)
     *
     * @return Http response
     */

    /**
     * @OA\Get(
     * path="/auth/public/generateOTP/{mobile}",
     * tags={"Doctor Authentication APIs","Doctor Registration APIs"},
     *    
     * @OA\Parameter(
     *         name="mobile",
     *         in="path",
     *         description="mobile no",
     *         required=true,
     *         example=7208613316,
     *         @OA\Schema(type="number")
     *     ),
     * @OA\Response(
     *         response="200",
     *         description="sent otp to mobile no",
     *    @OA\JsonContent(
     *       @OA\Property(property="success", type="string", example="success")
     *        )
     *     ),
     * @OA\Response(
     *         response="400",
     *         description="Error: Bad request. required parameters is not supplied.",    
     *    @OA\JsonContent(
     *       @OA\Property(property="error", type="string", example="mobile no not found")
     *        )
     *     ),
     * )
     */
    public function isuserregister($mobile)
    {
        $doctor = Doctor::where('mobile_no', $mobile)->first();

        $otp = mt_rand(100000, 999999);
        $ot = new Otp();
        $ot->phone_no = $mobile;
        $ot->otp = $otp;
        $ot->save();
        $msg = "Dear User Your OTP for Docexa is " . $otp;
        $data = $this->sendSms($mobile, $msg);
        return response()->json(['status' => "success"], 200);
    }
    public function generateOTP($mobile)
    {

        if (!isset($mobile)) {
            return response()->json(['status' => 'fail', 'msg' => 'mobile no not found'], 400);
        }

        return $this->isuserregister($mobile);
    }
    /**
     * Operation confirmOTP
     *
     * Send OTP.
     *
     * @param number $mobileno send otp  (required)
     *
     * @return Http response
     */

    /**

     * @OA\Post(
     * path="/auth/public/confirmOTP",
     * tags={"Doctor Authentication APIs"},
     *  @OA\RequestBody(
     *  required=true,
     *  description="Pass login details",
     *  @OA\JsonContent(
     *      type="object",
     *      @OA\Property(property="mobile", type="number", example="7208613316"),
     *      @OA\Property(property="otp", type="number", example="100000"),
     *  ),
     * ),
     * @OA\Response(
     *         response="200",
     *         description="logged in",
     *    @OA\JsonContent(
     *       @OA\Property(property="success", type="string", example="success")
     *        )
     *     ),
     * @OA\Response(
     *         response="400",
     *         description="Error: Bad request. required parameters is not supplied.",    
     *    @OA\JsonContent(
     *       @OA\Property(property="error", type="string", example="mobile no not found")
     *        )
     *     ),
     * )
     */
    public function confirmOTP(Request $request)
    {

        $data = $request->input();
        $ot = Otp::where(array('phone_no' => $data['mobile'], 'otp' => $data['otp']))->first();
        if (isset($ot->otp_id)) {
            $doctor = Doctor::where(array('mobile_no' => $data['mobile']))->first();

            if (isset($doctor->pharmaclient_id)) {
                $usermap = Medicalestablishmentsmedicalusermap::where('medical_user_id', $doctor->pharmaclient_id)->first();
                $user = new User();
                return response()->json(['status' => "success", 'doctor' => $user->autologin($usermap->id)], 200);
            } else {
                return response()->json(['status' => "fail", 'message' => "user not found"], 400);
            }
        } else {
            return response()->json(['status' => "fail", 'message' => "incorrect otp"], 400);
        }
    }
    /**
     * Operation login
     *
     * Send email and password.
     *
     * @param string $email  (required)
     * 
     * @param string $password  (required)
     *
     * @return Http response
     */

    /**

     * @OA\Post(
     * path="/auth/public/login",
     * tags={"Doctor Authentication APIs"},
     *  @OA\RequestBody(
     *  required=true,
     *  description="Pass login details",
     *  @OA\JsonContent(
     *      type="object",
     *      @OA\Property(property="email", type="string", example="rajesh@gmail.com"),
     *      @OA\Property(property="password", type="string", example="welcome"),
     *  ),
     * ),
     * @OA\Response(
     *         response="200",
     *         description="logged in",
     *    @OA\JsonContent(
     *       @OA\Property(property="success", type="string", example="success")
     *        )
     *     ),
     * @OA\Response(
     *         response="400",
     *         description="Error: Bad request. required parameters is not supplied.",    
     *    @OA\JsonContent(
     *       @OA\Property(property="error", type="string", example="mobile no not found")
     *        )
     *     ),
     * )
     */
    public function login(Request $request)
    {

        $data = $request->all();
        $doctor = Doctor::where(array('email_id' => $data['email'], 'password' => md5($data['password'])))->first();
        if (isset($doctor->pharmaclient_id)) {
            $usermap = Medicalestablishmentsmedicalusermap::where('medical_user_id', $doctor->pharmaclient_id)->first();
            $user = new User();
            return response()->json(['status' => "success", 'doctor' => $user->autologin($usermap->id)], 200);
        } else {
            return response()->json(['status' => "fail", 'message' => "incorrect credentials"], 400);
        }
    }
    /**

     * @OA\Post(
     * path="/auth/public/staff/login",
     * tags={"Doctor Authentication Staff APIs"},
     *  @OA\RequestBody(
     *  required=true,
     *  description="Pass login details",
     *  @OA\JsonContent(
     *      type="object",
     *      @OA\Property(property="email", type="string", example="rajesh@gmail.com"),
     *      @OA\Property(property="password", type="string", example="welcome"),
     *  ),
     * ),
     * @OA\Response(
     *         response="200",
     *         description="logged in",
     *    @OA\JsonContent(
     *       @OA\Property(property="success", type="string", example="success")
     *        )
     *     ),
     * @OA\Response(
     *         response="400",
     *         description="Error: Bad request. required parameters is not supplied.",    
     *    @OA\JsonContent(
     *       @OA\Property(property="error", type="string", example="mobile no not found")
     *        )
     *     ),
     * )
     */
    public function assistant_login(Request $request)
    {

        $data = $request->all();
        $doctor = Staff::where(array('email' => $data['email'], 'password' => $data['password']))->first();
        if (isset($doctor->user_map_id)) {
            $user = new User();
            return response()->json(['status' => "success", 'staff'=>$doctor,'doctor' => $user->autologin($doctor->user_map_id)], 200);
        } else {
            return response()->json(['status' => "fail", 'message' => "incorrect credentials"], 400);
        }
    }
    /**
     * Operation change password
     *
     * Send password.
     *
     * @param string $password  (required)
     *
     * @return Http response
     */

    /**

     * @OA\Post(
     * path="/auth/public/{esteblishmentusermapID}/changepassword",
     * tags={"Doctor Authentication APIs"},
     *  @OA\RequestBody(
     *  required=true,
     *  description="Pass password details",
     *  @OA\JsonContent(
     *      type="object",
     *      @OA\Property(property="password", type="string", example="welcome"),
     *  ),
     * ),
     * @OA\Response(
     *         response="200",
     *         description="logged in",
     *    @OA\JsonContent(
     *       @OA\Property(property="success", type="string", example="success")
     *        )
     *     ),
     * @OA\Response(
     *         response="400",
     *         description="Error: Bad request. required parameters is not supplied.",    
     *    @OA\JsonContent(
     *       @OA\Property(property="error", type="string", example="mobile no not found")
     *        )
     *     ),
     * )
     */
    public function changepassword($esteblishmentusermapID, Request $request)
    {

        $data = $request->all();

        $usermap = Medicalestablishmentsmedicalusermap::find($esteblishmentusermapID);

        $doctor = Doctor::find('pharmaclient_id', $usermap->medical_user_id);
        $doctor->password = md5($data['password']);
        $doctor->save();
        $user = new User();
        return response()->json(['status' => "success", 'doctor' => $user->autologin($esteblishmentusermapID)], 200);

        return response()->json(['status' => 'success'], 200);
    }
    /**
     * Operation verify email
     *
     * Send email.
     *
     * @param string $email  (required)
     *
     * @return Http response
     */

    /**

     * @OA\Post(
     * path="/auth/public/verify-email",
     * tags={"Doctor Authentication APIs"},
     *  @OA\RequestBody(
     *  required=true,
     *  description="Pass email details",
     *  @OA\JsonContent(
     *      type="object",
     *      @OA\Property(property="email", type="string", example="welcome"),
     *  ),
     * ),
     * @OA\Response(
     *         response="200",
     *         description="logged in",
     *    @OA\JsonContent(
     *       @OA\Property(property="success", type="string", example="success")
     *        )
     *     ),
     * @OA\Response(
     *         response="400",
     *         description="Error: Bad request. required parameters is not supplied.",    
     *    @OA\JsonContent(
     *       @OA\Property(property="error", type="string", example="mobile no not found")
     *        )
     *     ),
     * )
     */
    public function isemailregister($data)
    {
        $doctor = Doctor::where('email_id', $data['email'])->first();
        if (isset($doctor->pharmaclient_id)) {
            $link = app('firebase.auth')->getPasswordResetLink($data['email']);
            return response()->json(['status' => "success", 'message' => "mail sent to register email"], 200);
        } else {
            return response()->json(['status' => "fail", 'message' => "Email ID not found"], 400);
        }
    }
    public function verifyemail(Request $request)
    {

        $data = $request->all();
        return $this->isemailregister($data);
    }
    /**
     * Operation delete by mobile no
     *
     * Send email.
     *
     * @param string $mobile  (required)
     *
     * @return Http response
     */

    /**

     * @OA\Delete(
     * path="/auth/public/{mobile}",
     * tags={"Doctor Authentication APIs"},
     * @OA\Parameter(
     *         name="mobile",
     *         in="path",
     *         description="mobile no",
     *         required=true,
     *         example=7208613316,
     *         @OA\Schema(type="number")
     *     ),
     * @OA\Response(
     *         response="200",
     *         description="logged in",
     *    @OA\JsonContent(
     *       @OA\Property(property="success", type="string", example="success")
     *        )
     *     ),
     * @OA\Response(
     *         response="400",
     *         description="Error: Bad request. required parameters is not supplied.",    
     *    @OA\JsonContent(
     *       @OA\Property(property="error", type="string", example="mobile no not found")
     *        )
     *     ),
     * )
     */
    public function deleteaccount($mobile)
    {

        $doctor = Doctor::where('mobile_no', $mobile);
        $doc_first = $doctor->first();
        if (isset($doc_first->pharmaclient_id)) {
            $usermap = Medicalestablishmentsmedicalusermap::where('medical_user_id', $doc_first->pharmaclient_id);
            $usermap_first = $usermap->first();
            if (isset($usermap_first->medical_establishment_id)) {
                $medical = Medicalestablishments::find($usermap_first->medical_establishment_id);
                if (isset($medical->id)) {
                    $medical->delete();
                }
                $usermap->delete();
            }
            $doctor->delete();
        }
        return response()->json(['status' => "success"], 400);
    }


    public function loginforStaffAndDoctor(Request $request){
        try {
            $data = $request->all();
            $doctor = Staff::where(array('email' => $data['email'], 'password' => $data['password']))->first();

            if($doctor){
                $data = $request->all();
                $doctor = Staff::where(array('email' => $data['email'], 'password' => $data['password']))->first();
                if (isset($doctor->user_map_id)) {
                    $user = new User();
                    return response()->json(['status' => "success",'flag' => 2, 'staff'=>$doctor,'doctor' => $user->autologin($doctor->user_map_id)], 200);
                } else {
                    return response()->json(['status' => "fail", 'message' => "incorrect credentials"], 400);
                }
            }else{
                Log::info('login input', ['data' => $request]);
                $res = new User();
                $data = $res->login($request);
                Log::info('login output', ['data' => $data]);
                return $data;
            }
            
        } catch (\Throwable $th) {
            Log::info(["error" => $th]);
            return response()->json(['status' => false, 'message' => "Internal server error", 'error' => $th->getMessage()], 500);
        }
    }
}