<?php

/**
 * Docexa Doctor Micro Service API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: satish.soni@globalspace.in
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

namespace App\Http\Controllers;

use Illuminate\Http\Response;
use Illuminate\Http\Request;
use App\Oncall;
use App\Ambulance;
use App\Pathlab;
use App\Nursing;
use App\MedicineCart;
use DB;
use Log;
use Illuminate\Support\Str;

class AppointmentApi extends Controller
{

    /**
     * Constructor
     */
    public function __construct() {}

    /**
     * @OA\Post(
     * path="/establishments/hospital/{hospitalID}/users/{esteblishmentusermapID}/oncall",
     * tags={"Appointment"},
     *    
     * @OA\Parameter(
     *         name="esteblishmentusermapID",
     *         in="path",
     *         description="user map id",
     *         required=true,
     *         example="65887",
     *         @OA\Schema(type="string")
     *     ),
     * @OA\Parameter(
     *         name="hospitalID",
     *         in="path",
     *         description="hospital  id",
     *         required=true,
     *         example="65887",
     *         @OA\Schema(type="string")
     *     ),
     * @OA\RequestBody(
     *  required=true,
     *  description="lead details",
     *  @OA\JsonContent(
     *      type="object",
     *     @OA\Property(property="patient_name", type="string", example="satish soni"),
     *       @OA\Property(property="patient_email_id", type="string", example=""),
     *       @OA\Property(property="patient_mobile_no", type="string", example="27208613316"),
     *       @OA\Property(property="patient_age", type="string", example="20"),
     *      @OA\Property(property="note", type="string", example=""),
     *      @OA\Property(property="timing_preference", type="string", example="after 10"),
     *  ),
     * ),
     * @OA\Response(
     *         response="200",
     *         description="lead detail",
     *    @OA\JsonContent(
     *       @OA\Property(property="success", type="string", example="success")
     *        )
     *     ),
     * @OA\Response(
     *         response="400",
     *         description="Error: Bad request. required parameters is not supplied.",    
     *    @OA\JsonContent(
     *       @OA\Property(property="error", type="string", example="esteblishment User Map ID not found")
     *        )
     *     ),
     * )
     */
    public function createoncallappointment($esteblishmentusermapID, $hospitalID, Request $request)
    {
        $data = $request->all();
        if (!isset($esteblishmentusermapID)) {
            return response()->json(['status' => 'fail', 'msg' => 'esteblishment User Map ID not found'], 400);
        }
        $oncall = new Oncall();

        $oncall->hospital_id = $hospitalID;
        $oncall->patient_name = $data['patient_name'];
        $oncall->patient_age = $data['patient_age'];
        $oncall->patient_mobile_no = $data['patient_mobile_no'];
        $oncall->patient_email_id = $data['patient_email_id'];
        $oncall->note = $data['note'];
        $oncall->timing_preference = $data['timing_preference'];
        $oncall->user_map_id = $esteblishmentusermapID;
        $oncall->save();
        $templatedata = [
            'template' => 'oncall_requested',
            "booking_id" => $oncall->id,
            "type" => 'oncall'
        ];
        $c = new Controller();
        $c->sendNotificationBooking($templatedata);
        $data = Oncall::where('hospital_id', $hospitalID)->get();
        return response()->json(['status' => "success", 'data' => $data], 200);
    }
    /**
     * @OA\Post(
     * path="/establishments/hospital/{hospitalID}/prescription/upload",
     * tags={"Prescription"},
     
     * @OA\Parameter(
     *         name="hospitalID",
     *         in="path",
     *         description="hospital  id",
     *         required=true,
     *         example="65887",
     *         @OA\Schema(type="string")
     *     ),
     * @OA\RequestBody(
     *  required=true,
     *  description="lead details",
     *  @OA\JsonContent(
     *      type="object",
     *     @OA\Property(property="patient_name", type="string", example="satish soni"),
     *       @OA\Property(property="patient_email_id", type="string", example=""),
     *       @OA\Property(property="patient_mobile_no", type="string", example="27208613316"),
     *       @OA\Property(property="address", type="string", example=""),
     *      @OA\Property(property="pincode", type="string", example=""),
     *      @OA\Property(property="prescription_url", type="string", example=""),
     *      @OA\Property(property="is_call", type="string", example=""),
     *      @OA\Property(property="days_of_doses", type="string", example=""),
     *  ),
     * ),
     * @OA\Response(
     *         response="200",
     *         description="lead detail",
     *    @OA\JsonContent(
     *       @OA\Property(property="success", type="string", example="success")
     *        )
     *     ),
     * @OA\Response(
     *         response="400",
     *         description="Error: Bad request. required parameters is not supplied.",    
     *    @OA\JsonContent(
     *       @OA\Property(property="error", type="string", example="esteblishment User Map ID not found")
     *        )
     *     ),
     * )
     */
    public function prescriptionupload($hospitalID, Request $request)
    {
        $data = $request->all();
        if (!isset($hospitalID)) {
            return response()->json(['status' => 'fail', 'msg' => 'esteblishment User Map ID not found'], 400);
        }
        $oncall = new MedicineCart();

        $oncall->hospital_id = $hospitalID;
        $oncall->patient_name = $data['patient_name'];
        $oncall->patient_mobile_no = $data['patient_mobile_no'];
        $oncall->patient_email_id = $data['patient_email_id'];
        $oncall->address = $data['address'];
        $oncall->prescription_url = $data['prescription_url'];
        $oncall->pincode = $data['pincode'];
        $oncall->is_call = $data['is_call'];
        $oncall->days_of_doses = $data['days_of_doses'];

        $oncall->user_map_id = 0;
        $oncall->save();
        // $templatedata = [
        //     'template' => 'oncall_requested',
        //     "booking_id"=>$oncall->id,
        //     "type"=>'oncall'
        // ];
        // $c = new Controller();
        // $c->sendNotificationBooking($templatedata);
        $data = MedicineCart::where('hospital_id', $hospitalID)->get();
        return response()->json(['status' => "success", 'data' => $data], 200);
    }
    /**
     * @OA\Post(
     * path="/establishments/hospital/{hospitalID}/ambulance",
     * tags={"Appointment"},
     
     * @OA\Parameter(
     *         name="hospitalID",
     *         in="path",
     *         description="hospital  id",
     *         required=true,
     *         example="65887",
     *         @OA\Schema(type="string")
     *     ),
     * @OA\RequestBody(
     *  required=true,
     *  description="lead details",
     *  @OA\JsonContent(
     *      type="object",
     *     @OA\Property(property="name", type="string", example="satish soni"),
     *       @OA\Property(property="email", type="string", example=""),
     *       @OA\Property(property="mobile_no", type="string", example="27208613316"),
     *       @OA\Property(property="pincode", type="string", example="20"),
     *      @OA\Property(property="address", type="string", example=""),
     *      @OA\Property(property="message", type="string", example="after 10"),
     *  ),
     * ),
     * @OA\Response(
     *         response="200",
     *         description="lead detail",
     *    @OA\JsonContent(
     *       @OA\Property(property="success", type="string", example="success")
     *        )
     *     ),
     * @OA\Response(
     *         response="400",
     *         description="Error: Bad request. required parameters is not supplied.",    
     *    @OA\JsonContent(
     *       @OA\Property(property="error", type="string", example="esteblishment User Map ID not found")
     *        )
     *     ),
     * )
     */
    public function createambulancebooking($hospitalID, Request $request)
    {
        $data = $request->all();
        if (!isset($hospitalID)) {
            return response()->json(['status' => 'fail', 'msg' => 'esteblishment User Map ID not found'], 400);
        }
        $ambulance = new Ambulance();
        $ambulance->hospital_id = $hospitalID;
        $ambulance->name = $data['name'];
        $ambulance->address = $data['address'];
        $ambulance->email = $data['email'];
        $ambulance->mobile_no = $data['mobile_no'];
        $ambulance->pincode = $data['pincode'];
        $ambulance->message = $data['message'];
        $ambulance->save();

        $templatedata = [
            'template' => 'ambulance_requested',
            "booking_id" => $ambulance->id,
            "type" => 'ambulance'
        ];
        $c = new Controller();
        $c->sendNotificationBooking($templatedata);
        $data = Ambulance::where('hospital_id', $hospitalID)->get();
        return response()->json(['status' => "success", 'data' => $data], 200);
    }
    /**
     * @OA\Post(
     * path="/establishments/hospital/{hospitalID}/pathlab",
     * tags={"Appointment"},
     
     * @OA\Parameter(
     *         name="hospitalID",
     *         in="path",
     *         description="hospital  id",
     *         required=true,
     *         example="65887",
     *         @OA\Schema(type="string")
     *     ),
     * @OA\RequestBody(
     *  required=true,
     *  description="lead details",
     *  @OA\JsonContent(
     *      type="object",
     *     @OA\Property(property="name", type="string", example="satish soni"),
     *       @OA\Property(property="email", type="string", example=""),
     *       @OA\Property(property="mobile_no", type="string", example="27208613316"),
     *       @OA\Property(property="pincode", type="string", example="20"),
     *      @OA\Property(property="address", type="string", example=""),
     *      @OA\Property(property="message", type="string", example="after 10"),
     *  ),
     * ),
     * @OA\Response(
     *         response="200",
     *         description="lead detail",
     *    @OA\JsonContent(
     *       @OA\Property(property="success", type="string", example="success")
     *        )
     *     ),
     * @OA\Response(
     *         response="400",
     *         description="Error: Bad request. required parameters is not supplied.",    
     *    @OA\JsonContent(
     *       @OA\Property(property="error", type="string", example="esteblishment User Map ID not found")
     *        )
     *     ),
     * )
     */
    public function createpathlabbooking($hospitalID, Request $request)
    {
        $data = $request->all();
        if (!isset($hospitalID)) {
            return response()->json(['status' => 'fail', 'msg' => 'esteblishment User Map ID not found'], 400);
        }
        $pathlab = new Pathlab();
        $pathlab->hospital_id = $hospitalID;
        $pathlab->name = $data['name'];
        $pathlab->address = $data['address'];
        $pathlab->email = $data['email'];
        $pathlab->mobile_no = $data['mobile_no'];
        $pathlab->pincode = $data['pincode'];
        $pathlab->message = $data['message'];
        $pathlab->save();
        $templatedata = [
            'template' => 'pathlab_requested',
            "booking_id" => $pathlab->id,
            "type" => 'pathlab'
        ];
        $c = new Controller();
        $c->sendNotificationBooking($templatedata);
        $data = Pathlab::where('hospital_id', $hospitalID)->get();
        return response()->json(['status' => "success", 'data' => $data], 200);
    }
    /**
     * @OA\Post(
     * path="/establishments/hospital/{hospitalID}/nursing",
     * tags={"Appointment"},
     
     * @OA\Parameter(
     *         name="hospitalID",
     *         in="path",
     *         description="hospital  id",
     *         required=true,
     *         example="65887",
     *         @OA\Schema(type="string")
     *     ),
     * @OA\RequestBody(
     *  required=true,
     *  description="lead details",
     *  @OA\JsonContent(
     *      type="object",
     *     @OA\Property(property="name", type="string", example="satish soni"),
     *       @OA\Property(property="email", type="string", example=""),
     *       @OA\Property(property="mobile_no", type="string", example="27208613316"),
     *       @OA\Property(property="pincode", type="string", example="20"),
     *      @OA\Property(property="address", type="string", example=""),
     *      @OA\Property(property="message", type="string", example="after 10"),
     *  ),
     * ),
     * @OA\Response(
     *         response="200",
     *         description="lead detail",
     *    @OA\JsonContent(
     *       @OA\Property(property="success", type="string", example="success")
     *        )
     *     ),
     * @OA\Response(
     *         response="400",
     *         description="Error: Bad request. required parameters is not supplied.",    
     *    @OA\JsonContent(
     *       @OA\Property(property="error", type="string", example="esteblishment User Map ID not found")
     *        )
     *     ),
     * )
     */
    public function createnursingbooking($hospitalID, Request $request)
    {
        $data = $request->all();
        if (!isset($hospitalID)) {
            return response()->json(['status' => 'fail', 'msg' => 'esteblishment User Map ID not found'], 400);
        }
        $nursing = new Nursing();
        $nursing->hospital_id = $hospitalID;
        $nursing->name = $data['name'];
        $nursing->address = $data['address'];
        $nursing->email = $data['email'];
        $nursing->mobile_no = $data['mobile_no'];
        $nursing->pincode = $data['pincode'];
        $nursing->message = $data['message'];
        $nursing->save();
        $templatedata = [
            'template' => 'nursing_requested',
            "booking_id" => $nursing->id,
            "type" => 'nursing'
        ];
        $c = new Controller();
        $c->sendNotificationBooking($templatedata);
        $data = Nursing::where('hospital_id', $hospitalID)->get();
        return response()->json(['status' => "success", 'data' => $data], 200);
    }


    public function getAvaliableSlotsRooms($esteblishmentusermapID, $clinicId, $roomId, $date)
    {
        if (!isset($esteblishmentusermapID)) {
            return response()->json(['status' => 'fail', 'msg' => 'esteblishment User Map ID not found'], 400);
        }
        if (!isset($clinicId)) {
            return response()->json(['status' => 'fail', 'msg' => 'clinic ID not found'], 400);
        }
        if (!isset($roomId)) {
            return response()->json(['status' => 'fail', 'msg' => 'room ID not found'], 400);
        }
        if (!isset($date)) {
            return response()->json(['status' => 'fail', 'msg' => 'date not found'], 400);
        }
        $doctorsApi = new DoctorsApi();
        $all_slots = $doctorsApi->getSlots($esteblishmentusermapID, $clinicId, $date);

        $query = DB::table('docexa_patient_booking_details as booking')
            ->join('docexa_appointment_sku_details', 'booking.booking_id', '=', 'docexa_appointment_sku_details.booking_id')
            ->leftJoin('consult_type_master as consult', 'booking.consult_type_id', '=', 'consult.id')
            ->leftJoin('docexa_appointment_status_master as statusmaster', 'statusmaster.id', '=', 'booking.status')
            ->select(
                'booking.booking_id',
                'booking.bookingidmd5',
                'booking.date',
                'booking.status',
                'docexa_appointment_sku_details.start_booking_time',
                'docexa_appointment_sku_details.end_booking_time',
                'booking.patient_name',
                'booking.doctor_id',
                'consult.name as consult_type',
                'statusmaster.status_text as status_name',
                DB::raw("TIMESTAMPDIFF(MINUTE, docexa_appointment_sku_details.start_booking_time, docexa_appointment_sku_details.end_booking_time) as duration_minutes")
            )
            ->where('booking.user_map_id', $esteblishmentusermapID)
            ->where(DB::raw('date(booking.date)'), $date);

        $bookedSlots = $query->get();

        foreach ($bookedSlots as $booked) {
            $start = \Carbon\Carbon::parse($booked->start_booking_time);
            $end = $start->copy()->addMinutes($booked->duration_minutes);
            // dump($booked->start_booking_time);
            // dump($start);
            // Filter out overlapping slots
            // Convert slot array to desired format and filter out overlapping slots
            $all_slots = array_filter($all_slots, function ($slot) use ($start, $end, $date) {
                $slotStart = \Carbon\Carbon::parse($date . ' ' . $slot['from']);
                $slotEnd = \Carbon\Carbon::parse($date . ' ' . $slot['to']);

                // Keep slots that DO NOT overlap
                return $slotEnd <= $start || $slotStart >= $end;
            });

            // Convert each slot to the requested format: ['slot' => '10:00', 'tag' => 'past', 'count' => 0]
            $all_slots = array_map(function ($slot) {
                return [
                    'slot' => $slot['from'],
                    'tag' => isset($slot['tag']) ? $slot['tag'] : '',
                    'count' => isset($slot['count']) ? $slot['count'] : 0,
                ];
            }, $all_slots);

            // Re-index the array
            $all_slots = array_values($all_slots);
        }

        // $all_slots now only contains available (non-overlapping) time slots

        // dd($all_slots);
        if (count($data) > 0) {
            return response()->json(['status' => "success", 'data' => $all_slots], 200);
        } else {
            return response()->json(['status' => "fail", 'msg' => 'No slots available'], 404);
        }
    }
}
