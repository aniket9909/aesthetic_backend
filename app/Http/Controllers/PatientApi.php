<?php

/**
 * Docexa Doctor Micro Service API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: satish.soni@globalspace.in
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

namespace App\Http\Controllers;

use Illuminate\Http\Response;
use Illuminate\Http\Request;
use App\Patientmaster;
use DB;
use Log;
use Cache;
use Illuminate\Support\Carbon;
use Illuminate\Support\Facades\Validator;


class PatientApi extends Controller
{

    /**
     * Constructor
     */
    public function __construct()
    {
    }
    /**
     * Operation Search patient
     *
     * Search patient OTP.
     *
     * @param string $key  (required)
     *  @param string $value  (required)
     *
     * @return Http response
     */

    /**
     * @OA\Get(
     * path="/patients/search/{key}:{value}",
     * tags={"Patient"},
     *    
     * @OA\Parameter(
     *         name="key",
     *         in="path",
     *         description="key like mobile_no, patient_name, email_id",
     *         required=false,
     *         example="mobile_no",
     *         @OA\Schema(type="string")
     *     ),
     * @OA\Parameter(
     *         name="value",
     *         in="path",
     *         description="value as per key",
     *         required=true,
     *         example=7208613316,
     *         @OA\Schema(type="string")
     *     ),
     * @OA\Response(
     *         response="200",
     *         description="get patient detail",
     *    @OA\JsonContent(
     *       @OA\Property(property="success", type="string", example="success")
     *        )
     *     ),
     * @OA\Response(
     *         response="400",
     *         description="Error: Bad request. required parameters is not supplied.",    
     *    @OA\JsonContent(
     *       @OA\Property(property="error", type="string", example="mobile no not found")
     *        )
     *     ),
     * )
     */

    public function patientExist($patientId)
    {
        try {
            $result = Patientmaster::where('patient_id', $patientId)->exists();
            return response()->json($result, 200);
        } catch (\Throwable $th) {
            // dd($th);
            return response()->json(["status" => false, "message" => "Internal Server Error"], 500);
        }
    }

    public function search($key, $value)
    {
        if ($key == 'patient_name')
            $result = Patientmaster::where('patient_name', 'like', '%' . $value . '%')->first();
        elseif ($key == 'mobile_no') {
            $result = Patientmaster::where('mobile_no', 'like', '%' . $value . '%')->first();
        } else
            $result = Patientmaster::where($key, $value)->first();
        if (!isset($result->patient_id)) {
            return response()->json(['status' => "fail", 'msg' => "Patient didn't found"], 404);
        }


        $pm = new Patientmaster();
        return response()->json(['status' => 'success', 'data' => $pm->search($key, $value)], 200);
    }
    /**

     * @OA\Post(
     * path="/establishments/users/{esteblishmentusermapID}/patient",
     * tags={"Establishments"},
     *    
     * @OA\Parameter(
     *         name="esteblishmentusermapID",
     *         in="path",
     *         description="user map ID",
     *         required=true,
     *         example=65887,
     *         @OA\Schema(type="string")
     *     ),
     * @OA\RequestBody(
     *  required=true,
     *  description="Pass patient details",
     *  @OA\JsonContent(
     *      type="object",
     *      @OA\Property(property="patient_name", type="string", example="satish soni"),
     *      @OA\Property(property="mobile_no", type="number", example="8871148266"),
     *      @OA\Property(property="email_id", type="string", example="rajesh@gmail.com"),
     *      @OA\Property(property="gender", type="number", example="1"),
     *      @OA\Property(property="age", type="number", example="25"),
     * *      @OA\Property(property="address", type="number", example="mumbai"),
     * *      @OA\Property(property="dob", type="number", example="2023-01-01")
     *  ),
     * ),
     * @OA\Response(
     *         response="200",
     *         description="post patient detail",
     *    @OA\JsonContent(
     *       @OA\Property(property="success", type="string", example="success")
     *        )
     *     ),
     * @OA\Response(
     *         response="400",
     *         description="Error: Bad request. required parameters is not supplied.",    
     *    @OA\JsonContent(
     *       @OA\Property(property="error", type="string", example="mobile no not found")
     *        )
     *     ),
     * )
     */
    public function create($esteblishmentusermapID, Request $request)
    {
        $data = $request->input();
        $patient = Patientmaster::where("mobile_no", $data['mobile_no'])->first();
        if (isset($patient->patient_id)) {
            $patient->age = $data['age'];
            $patient->gender = $data['gender'];
            $patient->address = $data['address'];
            $patient->dob = $data['dob'];
            $patient->save();
            $existpatient = DB::table('docexa_patient_doctor_relation')->where(array('user_map_id' => $esteblishmentusermapID, 'patient_id' => $patient->patient_id))->first();
            if (!isset($existpatient->patient_doctor_relation_id)) {
                DB::insert('insert into docexa_patient_doctor_relation (user_map_id,patient_id) values(?,?)', [$esteblishmentusermapID, $patient->patient_id]);
                return response()->json(['status' => 'success', 'message' => "Adding the patient to your list", 'data' => $this->search('patient_id', $patient->patient_id)], 200);
            }
            return response()->json(['status' => 'fail', 'message' => "Patient has already been added to your list", 'data' => $this->search('patient_id', $patient->patient_id)], 200);
        } else {
            $pm = new Patientmaster();
            $pm->patient_name = $data['patient_name'];
            $pm->mobile_no = $data['mobile_no'];
            $pm->email_id = $data['email_id'];
            $pm->age = $data['age'];
            $pm->gender = $data['gender'];
            $pm->address = $data['address'];
            $pm->dob = $data['dob'];
            $pm->save();
            DB::insert('insert into docexa_patient_doctor_relation (user_map_id,patient_id) values(?,?)', [$esteblishmentusermapID, $pm->patient_id]);
            return response()->json(['status' => 'success', 'data' => $this->search('patient_id', $pm->patient_id)], 200);
        }


    }
    /**
     * @OA\Get(
     * path="/establishments/users/{esteblishmentusermapID}/patient",
     * tags={"Establishments"},
     *    
     * @OA\Parameter(
     *         name="esteblishmentusermapID",
     *         in="path",
     *         description="kesteblishmentusermapID",
     *         required=true,
     *         example="65887",
     *         @OA\Schema(type="string")
     *     ),
     * @OA\Response(
     *         response="200",
     *         description="get patient detail",
     *    @OA\JsonContent(
     *       @OA\Property(property="success", type="string", example="success")
     *        )
     *     ),
     * @OA\Response(
     *         response="400",
     *         description="Error: Bad request. required parameters is not supplied.",    
     *    @OA\JsonContent(
     *       @OA\Property(property="error", type="string", example="mobile no not found")
     *        )
     *     ),
     * )
     */
    public function patientlist($esteblishmentusermapID)
    {
        $pm = new Patientmaster();
        return response()->json(['status' => 'success', 'data' => $pm->patientlist($esteblishmentusermapID)], 200);
    }

    public function patientlistv2($esteblishmentusermapID, $page, $limit)
    {
        $pm = new Patientmaster();
        return response()->json(['status' => 'success', 'data' => $pm->patientlistv2($esteblishmentusermapID, $page, $limit)], 200);
    }

    public function generateTimestamp()
    {
        return Carbon::now();
    }
    public function generateOTP($mobile)
    {
        try {
            $rules = [
                'mobile' => 'required|regex:/^[0-9]{10}$/',
            ];

            $validator = Validator::make(['mobile' => $mobile], $rules);

            if ($validator->fails()) {
                return response()->json(['error' => $validator->errors()], 422);
            }
            if ($mobile) {
                $otp = mt_rand(100000, 999999);
                $msg = "Dear User Your OTP for Docexa is " . $otp;
                $data = $this->sendSms($mobile, $msg);
                if ($data) {
                    Log::info(['data' => $data]);
                    Cache::put('otp' . $mobile, $otp, $this->generateTimestamp()->addMinutes(10));
                    return response()->json(['status' => true, 'message' => "Otp sent successfully to the given mobile number"], 200);
                } else {
                    return response()->json(['status' => false, 'message' => "Something went wrong"], 400);
                }
            }
        } catch (\Throwable $th) {
            Log::info(['error' => $th]);
            return response()->json(['status' => false, 'message' => "Internal server error"], 500);
        }
    }

    public function confirmOTP(Request $request)
    {
        try {
            $input = $request->all();
            $cachedOtp = Cache::get('otp' . $input['mobile']);
            Log::info(['catchedOtp' => $cachedOtp]);

            if ($cachedOtp == $input['otp']) {
                $patient = Patientmaster::where(array('mobile_no' => $input['mobile']))->first();
                if (isset($patient->patient_id)) {
                    $user = new Patientmaster();
                    return response()->json(['status' => "success", 'patient' => $user->getuserinfo($patient->patient_id)], 200);
                } else {
                    return response()->json(['status' => "fail", 'message' => "user not found"], 200);
                }
            } else {
                return response()->json(['status' => "fail", 'message' => "incorrect otp"], 400);
            }
        } catch (\Throwable $th) {
            Log::info(['error' => $th]);
            return response()->json(['status' => false, 'message' => "Internal server error"], 500);
        }
    }

    public function confirmOTPv2(Request $request)
    {
        try {
            $input = $request->all();
            $cachedOtp = Cache::get('otp' . $input['mobile']);
            Log::info(['catchedOtp' => $cachedOtp]);

            if ($cachedOtp == $input['otp']) {

                $docexaPatientDoctorRelationExist = DB::table('docexa_patient_details')->where('mobile_no', $input['mobile'])->where('created_by_doctor', $input['user_map_id'])->first();

                Log::info(['mobillll', $docexaPatientDoctorRelationExist]);

                if ($docexaPatientDoctorRelationExist) {

                    $patient = Patientmaster::where(array('mobile_no' => $input['mobile']))->where('created_by_doctor', $input['user_map_id'])->first();
                    if (isset($patient->patient_id)) {
                        $user = new Patientmaster();
                        return response()->json(['status' => "success", 'patient' => $user->getuserinfo($patient->patient_id)], 200);
                    } else {
                        return response()->json(['status' => "fail", 'message' => "user not found"], 200);
                    }
                }

            } else {
                return response()->json(['status' => "fail", 'message' => "incorrect otp"], 400);
            }
        } catch (\Throwable $th) {
            Log::info(['error' => $th]);
            return response()->json(['status' => false, 'message' => "Internal server error"], 500);
        }
    }

    public function searchv2($esteblishmentusermapID, $key, $value, $page, $limit)
    {
        $value = trim(urldecode($value));


        if ($key == 'patient_name') {
            // $result = Patientmaster::where('patient_name', 'like', '%' . $value . '%')->where('created_by_doctor',$esteblishmentusermapID)->first();
            $result = DB::table('docexa_patient_details')->where('patient_name', 'like', '%' . $value . '%')
                ->join('docexa_patient_doctor_relation', 'docexa_patient_doctor_relation.patient_id', '=', 'docexa_patient_details.patient_id')
                ->where('docexa_patient_doctor_relation.user_map_id', $esteblishmentusermapID)
                ->select('docexa_patient_details.*')
                ->first();
        } elseif ($key == 'mobile_no') {
            // $result = Patientmaster::where('mobile_no', 'like', '%' . $value . '%')->where('created_by_doctor',$esteblishmentusermapID)->first();
            $result = DB::table('docexa_patient_details')->where('mobile_no', 'like', '%' . $value . '%')
                ->join('docexa_patient_doctor_relation', 'docexa_patient_doctor_relation.patient_id', '=', 'docexa_patient_details.patient_id')
                ->where('docexa_patient_doctor_relation.user_map_id', $esteblishmentusermapID)
                ->select('docexa_patient_details.*')
                ->first();
        } else {
            // $result = Patientmaster::where($key, $value)->where('created_by_doctor',$esteblishmentusermapID)->first();
            $result = DB::table('docexa_patient_details')->where($key, $value)
                ->join('docexa_patient_doctor_relation', 'docexa_patient_doctor_relation.patient_id', '=', 'docexa_patient_details.patient_id')
                ->where('docexa_patient_doctor_relation.user_map_id', $esteblishmentusermapID)
                ->select('docexa_patient_details.*')
                ->first();
        }
        if (!isset($result->patient_id)) {
            return response()->json(['status' => "fail", 'msg' => "Patient didn't found"], 404);
        }


        $pm = new Patientmaster();
        return response()->json(['status' => 'success', 'data' => $pm->searchv2($esteblishmentusermapID, $key, $value, $page, $limit)], 200);

    }

    public function updatepatientDetails(Request $request, $esteblishmentusermapID, $patientId)
    {
        try {
            $input = $request->all();
            if (!isset($patientId)) {
                echo json_encode(array('message' => 'Patient ID is required.'));
                return;
            }
            $patient = Patientmaster::where('patient_id', $patientId)->first();
            if ($patient) {
                $patient->patient_name =array_key_exists('patient_name', $input) ? $input['patient_name'] :$patient->patient_name;;
                $patient->gender =array_key_exists('gender', $input) ? $input['gender'] :$patient->gender;;
                $patient->mobile_no = array_key_exists('mobile_no', $input) ? $input['mobile_no'] :$patient->mobile_no;;
                $patient->email_id = array_key_exists('email_id', $input) ? $input['email_id'] :$patient->email_id;;
                $patient->dob =array_key_exists('dob', $input) ? $input['dob'] :$patient->dob;;
                $patient->city = array_key_exists('city', $input) ? $input['city'] :$patient->city;;
                $patient->city_id = array_key_exists('city_id', $input) ? $input['city_id'] :$patient->city_id;
                $patient->state = array_key_exists('state', $input) ? $input['state'] :$patient->state;;
                $patient->state_id =array_key_exists('state_id', $input) ? $input['state_id'] :$patient->state_id;;
                $patient->age = array_key_exists('age', $input) ? $input['age'] :$patient->age;;
                $patient->address =array_key_exists('address', $input) ? $input['address'] :$patient->address;;
                $patient->created_by_doctor = $esteblishmentusermapID;
                $patient->flag =array_key_exists('flag', $input) ?( $input['flag'] ?  $input['flag'] :null) :$patient->flag;

                
                // $patient->pincode = $input['pincode'];
                // $patient->occupation = $input['occupation'];
                // $patient->visit_type = $input['visit_type'];
                // $patient->health_id = $input['health_id'];
                // $patient->password = $input['password'];
                // $patient->username = $input['username'];
                // $patient->created_at = $input['created_at'];
                // $patient->patient_from = $input['patient_from;
                // $patient->registration_type = $input['registration_type;
                // $patient->created_date = $input['created_date;
                // $patient->deleted_date = $input['deleted_date;
                // $patient->chemist_id = $input['chemist_id;
                // $patient->device_web_type = $input['device_web_type;
                // $patient->upi_id = $input['upi_id;
                // $patient->updated_at = $input['updated_at ?? date('Y-m-d H:i:s');
                // $patient->patient_image = $input['patient_image'];

                // $patient->height = $input['height;
                // $patient->weight = $input['weight;
                // $patient->valid_from = $input['valid_from;
                // $patient->valid_to = $input['valid_to;
                // $patient->relationship = $input['relationship;
                // $patient->any_chronic_disease = $input['any_chronic_disease;
                // $patient->subscription_fee = $input['subscription_fee;
                // $patient->membership_no = $input['membership_no;
                // $patient->medication = $input['medication;
                // $patient->doctor_flag = $input['doctor_flag;
                // $patient->mode_of_payment = $input['mode_of_payment;
                // $patient->care_context = $input['care_context;
        
                // $patient->created_by_doctor = $input['created_by_doctor;

                if ($patient->update()) {
                    return response()->json(['status' => "true", 'message' => "patient update successfully"], 200);
                } else {
                    return response()->json(['status' => "false", 'message' => "failed to update patient"], 400);
                }
            }else{
                return response()->json(['status' => "false", 'message' => "patient not found"], 200);

            }

        } catch (\Throwable $th) {
            return response()->json(["status" => false, "message" => "Internal Server Error" ,"error" => $th->getMessage() ], 500);

        }
    }


    public function searchv3($esteblishmentusermapID, $key, $value)
    {
        $value = trim(urldecode($value));


        if ($key == 'patient_name') {
            // $result = Patientmaster::where('patient_name', 'like', '%' . $value . '%')->where('created_by_doctor',$esteblishmentusermapID)->first();
            $result = DB::table('docexa_patient_details')->where('patient_name', 'like', '%' . $value . '%')
                ->join('docexa_patient_doctor_relation', 'docexa_patient_doctor_relation.patient_id', '=', 'docexa_patient_details.patient_id')
                ->where('docexa_patient_doctor_relation.user_map_id', $esteblishmentusermapID)
                ->select('docexa_patient_details.*')
                ->first();
        } elseif ($key == 'mobile_no') {
            // $result = Patientmaster::where('mobile_no', 'like', '%' . $value . '%')->where('created_by_doctor',$esteblishmentusermapID)->first();
            $result = DB::table('docexa_patient_details')->where('mobile_no', 'like', '%' . $value . '%')
                ->join('docexa_patient_doctor_relation', 'docexa_patient_doctor_relation.patient_id', '=', 'docexa_patient_details.patient_id')
                ->where('docexa_patient_doctor_relation.user_map_id', $esteblishmentusermapID)
                ->select('docexa_patient_details.*')
                ->first();
        } else {
            // $result = Patientmaster::where($key, $value)->where('created_by_doctor',$esteblishmentusermapID)->first();
            $result = DB::table('docexa_patient_details')->where($key, $value)
                ->join('docexa_patient_doctor_relation', 'docexa_patient_doctor_relation.patient_id', '=', 'docexa_patient_details.patient_id')
                ->where('docexa_patient_doctor_relation.user_map_id', $esteblishmentusermapID)
                ->select('docexa_patient_details.*')
                ->first();
        }
        if (!isset($result->patient_id)) {
            return response()->json(['status' => "fail", 'msg' => "Patient didn't found"], 404);
        }


        $pm = new Patientmaster();
        return response()->json(['status' => 'success', 'data' => $pm->searchv3($esteblishmentusermapID, $key, $value)], 200);

    }


    public function getTotalCountOfPatient($esteblishmentusermapID)
    {
        try {
            $patientCount= DB::table('docexa_patient_doctor_relation')->where('user_map_id', $esteblishmentusermapID)->count();
                if ($patientCount) {
                    return response()->json(['status' => true, 'message' => "data retrived successfully", 'data' => $patientCount], 200);
                } else {
                    return response()->json(['status' => false, 'message' => "data not found", 'data' => []], 200);
                }
            
        } catch (\Throwable $th) {
            Log::info(['error' => $th]);
            return response()->json(["status" => false, "message" => "Internal server error", "error" => $th->getMessage() ], 500);
        }
    }

    public function getPatientById($patientid)
    {
        try {
            $PatientDetails= DB::table('docexa_patient_details')->where('patient_id',$patientid)->first();
                if ($PatientDetails) {
                    return response()->json(['status' => true, 'message' => "data retrived successfully", 'data' => $PatientDetails], 200);
                } else {
                    return response()->json(['status' => false, 'message' => "data not found", 'data' => []], 200);
                }
            
        } catch (\Throwable $th) {
            Log::info(['error' => $th]);
            return response()->json(["status" => false, "message" => "Internal server error", "error" => $th->getMessage() ], 500);
        }
    }

    public function updatepatientDetailsv4(Request $request, $esteblishmentusermapID, $patientId)
    {
        try {
            $input = $request->all();
            if (!isset($patientId)) {
                echo json_encode(array('message' => 'Patient ID is required.'));
                return;
            }
            $patient = Patientmaster::where('patient_id', $patientId)->first();
            if ($patient) {
                $patient->patient_name =array_key_exists('patient_name', $input) ? ( $input['patient_name'] ? $input['patient_name'] :$patient->patient_name) :$patient->patient_name;;
                $patient->gender =array_key_exists('gender', $input) ? ($input['gender'] ? $input['gender'] : $patient->gender) :$patient->gender;;
                $patient->mobile_no = array_key_exists('mobile_no', $input) ?( $input['mobile_no'] ?  $input['mobile_no'] : $patient->mobile_no) :$patient->mobile_no;;
                $patient->email_id = array_key_exists('email_id', $input) ? ($input['email_id'] ?  $input['email_id'] : $patient->email_id) :$patient->email_id ;;
                $patient->dob =array_key_exists('dob', $input) ? ($input['dob'] ? $input['dob'] : $patient-> dob) :$patient->dob;;
                $patient->city = array_key_exists('city', $input) ? ($input['city'] ? $input['city'] : $patient->city ) :$patient->city;;
                $patient->city_id = array_key_exists('city_id', $input) ? ($input['city_id'] ? $input['city_id'] : $patient->city_id) :$patient->city_id;
                $patient->state = array_key_exists('state', $input) ? ($input['state'] ? $input['city_id'] : $patient->state) :$patient->state;;
                $patient->state_id =array_key_exists('state_id', $input) ? ($input['state_id'] ? $input['state_id'] : $patient->state_id) :$patient->state_id;;
                $patient->age = array_key_exists('age', $input) ? ($input['age'] ? $input['age'] : $patient-> age) :$patient->age;;
                $patient->address =array_key_exists('address', $input) ?( $input['address'] ?  $input['address'] : $patient->address) :$patient->address;;
                $patient->created_by_doctor = $esteblishmentusermapID;
                $patient->flag =array_key_exists('flag', $input) ?( $input['flag'] ?  $input['flag'] : $patient->flag) :$patient->flag;;

                if ($patient->update()) {
                    return response()->json(['status' => "true", 'message' => "patient update successfully"], 200);
                } else {
                    return response()->json(['status' => "false", 'message' => "failed to update patient"], 400);
                }
            }else{
                return response()->json(['status' => "false", 'message' => "patient not found"], 200);

            }

        } catch (\Throwable $th) {
            return response()->json(["status" => false, "message" => "Internal Server Error" ,"error" => $th->getMessage() ], 500);

        }
    }

    public function deletePatient($patientId){
        try {
            $result = Patientmaster::Where('patient_id',$patientId)->first();
            if($result){
                $result->deleted_date = Carbon::now();
                $delete =$result->save();
                if($delete){
                    return response()->json(['status' => true, 'message' => "Patient deleted successfully", 'code' =>200],200);
                }else{
                    return response()->json(['status' => false , 'message' => "Something went wrong", 'code' => 400],400);
                }
               
            }                   
        } catch (\Throwable $th) {
            return response()->json(["status" => false, "message" => "Internal Server Error" ,"error" => $th->getMessage() , "code" => 500 ], 500);
        }
    }
    public function patientlistV4($esteblishmentusermapID)
    {
        $pm = new Patientmaster();
        return response()->json(['status' => 'success', 'data' => $pm->patientlistV4($esteblishmentusermapID)], 200);
    }
}