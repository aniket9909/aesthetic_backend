<?php

/**
 * Docexa Doctor Micro Service API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: satish.soni@globalspace.in
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

namespace App\Http\Controllers;

use Illuminate\Http\Response;
use Illuminate\Http\Request;
use Twilio\Rest\Client;

class TwilioVideoCallApi extends Controller
{

    /**
     * Constructor
     */
    public function __construct()
    {
        $accountSid = env('TWILIO_ACCOUNT_SID');
        $apiKeySid = env('TWILIO_API_KEY');
        $apiKeySecret = env('TWILIO_API_SECRET');
    }
    public function getRoom($RoomNameOrSid,Request $request)
    {
        //Retrieve an in-progress Room instance by UniqueName

        $accountSid = env('TWILIO_ACCOUNT_SID');
        $apiKeySid = env('TWILIO_API_KEY');
        $apiKeySecret = env('TWILIO_API_SECRET');
        $twilio = new Client($accountSid, $apiKeySecret);

        $room = $twilio->video->v1->rooms($RoomNameOrSid)
            ->fetch();
        return response()->json(['status' => 'success', 'data' => $room], 200);
    }
    public function createRoom(Request $request)
    {
        $accountSid = env('TWILIO_ACCOUNT_SID');
        $apiKeySid = env('TWILIO_API_KEY');
        $apiKeySecret = env('TWILIO_API_SECRET');
        $twilio = new Client($accountSid, $apiKeySecret);
        $RoomNameOrSid = $request->RoomNameOrSid;
        $room = $twilio->video->v1->rooms
            ->create(
                [
                    "statusCallback" => "http://example.org",
                    "type" => "peer-to-peer",
                    "uniqueName" => $RoomNameOrSid
                ]
            );

            return response()->json(['status' => 'success', 'data' => $room], 200);
    }
    
    public function completeRoom(Request $request)
    {
        //Retrieve an in-progress Room instance by UniqueName

        $accountSid = env('TWILIO_ACCOUNT_SID');
        $apiKeySid = env('TWILIO_API_KEY');
        $apiKeySecret = env('TWILIO_API_SECRET');
        $twilio = new Client($accountSid, $apiKeySecret);
        $RoomNameOrSid = $request->RoomNameOrSid;
        $room = $twilio->video->v1->rooms($RoomNameOrSid)
        ->update("completed");

        return response()->json(['status' => 'success', 'data' => $room], 200);
    }
    public function retrieveParticipant($RoomNameOrSid,$ParticipantIdentityOrSid,Request $request)
    {
        //Retrieve an in-progress Room instance by UniqueName

        $accountSid = env('TWILIO_ACCOUNT_SID');
        $apiKeySid = env('TWILIO_API_KEY');
        $apiKeySecret = env('TWILIO_API_SECRET');
        $twilio = new Client($accountSid, $apiKeySecret);
        $participant = $twilio->video->rooms($RoomNameOrSid)
        ->participants($ParticipantIdentityOrSid)
        ->fetch();


        return response()->json(['status' => 'success', 'data' => $participant], 200);
    }
    public function removeParticipant($RoomNameOrSid,$ParticipantIdentityOrSid,Request $request)
    {
        //Retrieve an in-progress Room instance by UniqueName

        $accountSid = env('TWILIO_ACCOUNT_SID');
        $apiKeySid = env('TWILIO_API_KEY');
        $apiKeySecret = env('TWILIO_API_SECRET');
        $twilio = new Client($accountSid, $apiKeySecret);
        $participant = $twilio->video->rooms($RoomNameOrSid)
        ->participants($ParticipantIdentityOrSid)
        ->update(array("status" => "disconnected"));


        return response()->json(['status' => 'success', 'data' => $participant], 200);
    }
    public function retrieveConnectedParticipant($RoomNameOrSid,Request $request)
    {
        //Retrieve an in-progress Room instance by UniqueName

        $accountSid = env('TWILIO_ACCOUNT_SID');
        $apiKeySid = env('TWILIO_API_KEY');
        $apiKeySecret = env('TWILIO_API_SECRET');
        $twilio = new Client($accountSid, $apiKeySecret);
        $participant = $twilio->video->rooms($RoomNameOrSid)
        ->update(array("status" => "connected"));


        return response()->json(['status' => 'success', 'data' => $participant], 200);
    }
    
}
