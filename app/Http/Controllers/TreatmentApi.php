<?php

/**
 * Docexa Doctor Micro Service API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: satish.soni@globalspace.in
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

namespace App\Http\Controllers;

use App\TreatmentUserMap;
use App\TreatmentPlan;
use App\TreatmentRecord;
use App\TreatmentMainInvoice;
use Illuminate\Http\Response;
use Illuminate\Http\Request;
use DB;
use Log;

class TreatmentApi extends Controller
{

    /**
     * Constructor
     */
    public function __construct()
    {
    }
    /**
     * @OA\Get(
     * path="/establishments/users/{esteblishmentusermapID}/treatment",
     * tags={"Treatment"},
     *    
     * @OA\Parameter(
     *         name="esteblishmentusermapID",
     *         in="path",
     *         description="user map id",
     *         required=true,
     *         example="65887",
     *         @OA\Schema(type="string")
     *     ),
     * @OA\Response(
     *         response="200",
     *         description="treatment detail master data",
     *    @OA\JsonContent(
     *       @OA\Property(property="success", type="string", example="success")
     *        )
     *     ),
     * @OA\Response(
     *         response="400",
     *         description="Error: Bad request. required parameters is not supplied.",    
     *    @OA\JsonContent(
     *       @OA\Property(property="error", type="string", example="esteblishment User Map ID not found")
     *        )
     *     ),
     * )
     */
    public function treatmentlist($esteblishmentusermapID)
    {

        if (!isset($esteblishmentusermapID)) {
            return response()->json(['status' => 'fail', 'msg' => 'esteblishment User Map ID not found'], 400);
        }
        $treatment = TreatmentUserMap::with('details')->where('user_map_id',$esteblishmentusermapID)->where('parent_treatment',0)->get();
        return response()->json(['status' => "success", 'treatment' => $treatment], 200);
    } 
    /**
     * @OA\Get(
     * path="/establishments/users/{esteblishmentusermapID}/treatment/{planID}",
     * tags={"Treatment"},
     *    
     * @OA\Parameter(
     *         name="esteblishmentusermapID",
     *         in="path",
     *         description="user map id",
     *         required=true,
     *         example="65887",
     *         @OA\Schema(type="string")
     *     ),
     * @OA\Parameter(
     *         name="planID",
     *         in="path",
     *         description="planID",
     *         required=true,
     *         example="1",
     *         @OA\Schema(type="string")
     *     ),
     * @OA\Response(
     *         response="200",
     *         description="treatment detail master data",
     *    @OA\JsonContent(
     *       @OA\Property(property="success", type="string", example="success")
     *        )
     *     ),
     * @OA\Response(
     *         response="400",
     *         description="Error: Bad request. required parameters is not supplied.",    
     *    @OA\JsonContent(
     *       @OA\Property(property="error", type="string", example="esteblishment User Map ID not found")
     *        )
     *     ),
     * )
     */
    public function treatmentplan($esteblishmentusermapID,$planID)
    {

        if (!isset($esteblishmentusermapID)) {
            return response()->json(['status' => 'fail', 'msg' => 'esteblishment User Map ID not found'], 400);
        }
        $treatment = TreatmentPlan::with('details')->find($planID);
        return response()->json(['status' => "success", 'treatment' => $treatment], 200);
    } 
    /**
     * @OA\Get(
     * path="/establishments/users/{esteblishmentusermapID}/treatment/{planID}/details",
     * tags={"Treatment"},
     *    
     * @OA\Parameter(
     *         name="esteblishmentusermapID",
     *         in="path",
     *         description="user map id",
     *         required=true,
     *         example="65887",
     *         @OA\Schema(type="string")
     *     ),
     * @OA\Parameter(
     *         name="planID",
     *         in="path",
     *         description="planID",
     *         required=true,
     *         example="1",
     *         @OA\Schema(type="string")
     *     ),
     * @OA\Response(
     *         response="200",
     *         description="treatment detail master data",
     *    @OA\JsonContent(
     *       @OA\Property(property="success", type="string", example="success")
     *        )
     *     ),
     * @OA\Response(
     *         response="400",
     *         description="Error: Bad request. required parameters is not supplied.",    
     *    @OA\JsonContent(
     *       @OA\Property(property="error", type="string", example="esteblishment User Map ID not found")
     *        )
     *     ),
     * )
     */
    public function treatmentrecord($esteblishmentusermapID,$planID)
    {

        if (!isset($esteblishmentusermapID)) {
            return response()->json(['status' => 'fail', 'msg' => 'esteblishment User Map ID not found'], 400);
        }
        $treatment = TreatmentRecord::where('plan_id',$planID)->get();
        return response()->json(['status' => "success", 'treatment' => $treatment], 200);
    } 
    /**
     * @OA\Get(
     * path="/establishments/users/{esteblishmentusermapID}/treatment/{planID}/invoices",
     * tags={"Treatment"},
     *    
     * @OA\Parameter(
     *         name="esteblishmentusermapID",
     *         in="path",
     *         description="user map id",
     *         required=true,
     *         example="65887",
     *         @OA\Schema(type="string")
     *     ),
     * @OA\Parameter(
     *         name="planID",
     *         in="path",
     *         description="planID",
     *         required=true,
     *         example="1",
     *         @OA\Schema(type="string")
     *     ),
     * @OA\Response(
     *         response="200",
     *         description="treatment detail master data",
     *    @OA\JsonContent(
     *       @OA\Property(property="success", type="string", example="success")
     *        )
     *     ),
     * @OA\Response(
     *         response="400",
     *         description="Error: Bad request. required parameters is not supplied.",    
     *    @OA\JsonContent(
     *       @OA\Property(property="error", type="string", example="esteblishment User Map ID not found")
     *        )
     *     ),
     * )
     */
    public function treatmentinvoices($esteblishmentusermapID,$planID)
    {

        if (!isset($esteblishmentusermapID)) {
            return response()->json(['status' => 'fail', 'msg' => 'esteblishment User Map ID not found'], 400);
        }
        $treatment = TreatmentMainInvoice::where('plan_id',$planID)->get();
        return response()->json(['status' => "success", 'invoice' => $treatment], 200);
    } 
    
}
